
hub75.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004758  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00004758  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b24  20000004  0000475c  00020004  2**2
                  ALLOC
  3 .stack        00001000  20000b28  00005280  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001c58d  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a0a  00000000  00000000  0003c612  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006bb6  00000000  00000000  0003f01c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011a8  00000000  00000000  00045bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001060  00000000  00000000  00046d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e28c  00000000  00000000  00047dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000129b2  00000000  00000000  00066066  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00095a87  00000000  00000000  00078a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000040cc  00000000  00000000  0010e4a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 1b 00 20 31 01 00 00 b5 01 00 00 b5 01 00 00     (.. 1...........
	...
      2c:	b5 01 00 00 00 00 00 00 00 00 00 00 b5 01 00 00     ................
      3c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 65 2d 00 00     ............e-..
      4c:	8d 28 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     .(..............
      5c:	b5 01 00 00 b5 01 00 00 e5 34 00 00 b5 01 00 00     .........4......
      6c:	01 35 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     .5..............
      7c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      8c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      9c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      ac:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000004 	.word	0x20000004
      dc:	00000000 	.word	0x00000000
      e0:	00004758 	.word	0x00004758

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000008 	.word	0x20000008
     110:	00004758 	.word	0x00004758
     114:	00004758 	.word	0x00004758
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b580      	push	{r7, lr}
     11e:	af00      	add	r7, sp, #0
	system_init();
     120:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     122:	4798      	blx	r3
}
     124:	46c0      	nop			; (mov r8, r8)
     126:	46bd      	mov	sp, r7
     128:	bd80      	pop	{r7, pc}
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	00000c3d 	.word	0x00000c3d

00000130 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     130:	b580      	push	{r7, lr}
     132:	b082      	sub	sp, #8
     134:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     136:	4b16      	ldr	r3, [pc, #88]	; (190 <Reset_Handler+0x60>)
     138:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     13a:	4b16      	ldr	r3, [pc, #88]	; (194 <Reset_Handler+0x64>)
     13c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     13e:	687a      	ldr	r2, [r7, #4]
     140:	683b      	ldr	r3, [r7, #0]
     142:	429a      	cmp	r2, r3
     144:	d00c      	beq.n	160 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     146:	e007      	b.n	158 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     148:	683b      	ldr	r3, [r7, #0]
     14a:	1d1a      	adds	r2, r3, #4
     14c:	603a      	str	r2, [r7, #0]
     14e:	687a      	ldr	r2, [r7, #4]
     150:	1d11      	adds	r1, r2, #4
     152:	6079      	str	r1, [r7, #4]
     154:	6812      	ldr	r2, [r2, #0]
     156:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     158:	683a      	ldr	r2, [r7, #0]
     15a:	4b0f      	ldr	r3, [pc, #60]	; (198 <Reset_Handler+0x68>)
     15c:	429a      	cmp	r2, r3
     15e:	d3f3      	bcc.n	148 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4b0e      	ldr	r3, [pc, #56]	; (19c <Reset_Handler+0x6c>)
     162:	603b      	str	r3, [r7, #0]
     164:	e004      	b.n	170 <Reset_Handler+0x40>
                *pDest++ = 0;
     166:	683b      	ldr	r3, [r7, #0]
     168:	1d1a      	adds	r2, r3, #4
     16a:	603a      	str	r2, [r7, #0]
     16c:	2200      	movs	r2, #0
     16e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     170:	683a      	ldr	r2, [r7, #0]
     172:	4b0b      	ldr	r3, [pc, #44]	; (1a0 <Reset_Handler+0x70>)
     174:	429a      	cmp	r2, r3
     176:	d3f6      	bcc.n	166 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     178:	4b0a      	ldr	r3, [pc, #40]	; (1a4 <Reset_Handler+0x74>)
     17a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0a      	ldr	r3, [pc, #40]	; (1a8 <Reset_Handler+0x78>)
     17e:	687a      	ldr	r2, [r7, #4]
     180:	21ff      	movs	r1, #255	; 0xff
     182:	438a      	bics	r2, r1
     184:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
     186:	4b09      	ldr	r3, [pc, #36]	; (1ac <Reset_Handler+0x7c>)
     188:	4798      	blx	r3

        /* Branch to main function */
        main();
     18a:	4b09      	ldr	r3, [pc, #36]	; (1b0 <Reset_Handler+0x80>)
     18c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     18e:	e7fe      	b.n	18e <Reset_Handler+0x5e>
     190:	00004758 	.word	0x00004758
     194:	20000000 	.word	0x20000000
     198:	20000004 	.word	0x20000004
     19c:	20000004 	.word	0x20000004
     1a0:	20000b28 	.word	0x20000b28
     1a4:	00000000 	.word	0x00000000
     1a8:	e000ed00 	.word	0xe000ed00
     1ac:	00004579 	.word	0x00004579
     1b0:	00004081 	.word	0x00004081

000001b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	af00      	add	r7, sp, #0
        while (1) {
     1b8:	e7fe      	b.n	1b8 <Dummy_Handler+0x4>

000001ba <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     1ba:	b580      	push	{r7, lr}
     1bc:	b084      	sub	sp, #16
     1be:	af00      	add	r7, sp, #0
     1c0:	60f8      	str	r0, [r7, #12]
     1c2:	607a      	str	r2, [r7, #4]
     1c4:	230b      	movs	r3, #11
     1c6:	18fb      	adds	r3, r7, r3
     1c8:	1c0a      	adds	r2, r1, #0
     1ca:	701a      	strb	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1cc:	230b      	movs	r3, #11
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	781a      	ldrb	r2, [r3, #0]
     1d2:	68fb      	ldr	r3, [r7, #12]
     1d4:	3220      	adds	r2, #32
     1d6:	0092      	lsls	r2, r2, #2
     1d8:	6879      	ldr	r1, [r7, #4]
     1da:	50d1      	str	r1, [r2, r3]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     1dc:	46c0      	nop			; (mov r8, r8)
     1de:	46bd      	mov	sp, r7
     1e0:	b004      	add	sp, #16
     1e2:	bd80      	pop	{r7, pc}

000001e4 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	b082      	sub	sp, #8
     1e8:	af00      	add	r7, sp, #0
     1ea:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     1ec:	687b      	ldr	r3, [r7, #4]
     1ee:	695b      	ldr	r3, [r3, #20]
     1f0:	2280      	movs	r2, #128	; 0x80
     1f2:	0092      	lsls	r2, r2, #2
     1f4:	431a      	orrs	r2, r3
     1f6:	687b      	ldr	r3, [r7, #4]
     1f8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	46bd      	mov	sp, r7
     1fe:	b002      	add	sp, #8
     200:	bd80      	pop	{r7, pc}

00000202 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     202:	b580      	push	{r7, lr}
     204:	b082      	sub	sp, #8
     206:	af00      	add	r7, sp, #0
     208:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	695b      	ldr	r3, [r3, #20]
     20e:	2280      	movs	r2, #128	; 0x80
     210:	00d2      	lsls	r2, r2, #3
     212:	431a      	orrs	r2, r3
     214:	687b      	ldr	r3, [r7, #4]
     216:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     218:	46c0      	nop			; (mov r8, r8)
     21a:	46bd      	mov	sp, r7
     21c:	b002      	add	sp, #8
     21e:	bd80      	pop	{r7, pc}

00000220 <hri_mclk_set_APBCMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw)
{
     220:	b580      	push	{r7, lr}
     222:	b082      	sub	sp, #8
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     228:	687b      	ldr	r3, [r7, #4]
     22a:	69db      	ldr	r3, [r3, #28]
     22c:	2202      	movs	r2, #2
     22e:	431a      	orrs	r2, r3
     230:	687b      	ldr	r3, [r7, #4]
     232:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     234:	46c0      	nop			; (mov r8, r8)
     236:	46bd      	mov	sp, r7
     238:	b002      	add	sp, #8
     23a:	bd80      	pop	{r7, pc}

0000023c <hri_mclk_set_APBCMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_SERCOM2_bit(const void *const hw)
{
     23c:	b580      	push	{r7, lr}
     23e:	b082      	sub	sp, #8
     240:	af00      	add	r7, sp, #0
     242:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM2;
     244:	687b      	ldr	r3, [r7, #4]
     246:	69db      	ldr	r3, [r3, #28]
     248:	2208      	movs	r2, #8
     24a:	431a      	orrs	r2, r3
     24c:	687b      	ldr	r3, [r7, #4]
     24e:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     250:	46c0      	nop			; (mov r8, r8)
     252:	46bd      	mov	sp, r7
     254:	b002      	add	sp, #8
     256:	bd80      	pop	{r7, pc}

00000258 <hri_port_set_DIR_reg>:
	((PortGroup *)hw)->WRCONFIG.reg = data;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     258:	b580      	push	{r7, lr}
     25a:	b084      	sub	sp, #16
     25c:	af00      	add	r7, sp, #0
     25e:	60f8      	str	r0, [r7, #12]
     260:	607a      	str	r2, [r7, #4]
     262:	230b      	movs	r3, #11
     264:	18fb      	adds	r3, r7, r3
     266:	1c0a      	adds	r2, r1, #0
     268:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     26a:	230b      	movs	r3, #11
     26c:	18fb      	adds	r3, r7, r3
     26e:	781b      	ldrb	r3, [r3, #0]
     270:	68fa      	ldr	r2, [r7, #12]
     272:	01db      	lsls	r3, r3, #7
     274:	18d3      	adds	r3, r2, r3
     276:	3308      	adds	r3, #8
     278:	687a      	ldr	r2, [r7, #4]
     27a:	601a      	str	r2, [r3, #0]
}
     27c:	46c0      	nop			; (mov r8, r8)
     27e:	46bd      	mov	sp, r7
     280:	b004      	add	sp, #16
     282:	bd80      	pop	{r7, pc}

00000284 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     284:	b580      	push	{r7, lr}
     286:	b084      	sub	sp, #16
     288:	af00      	add	r7, sp, #0
     28a:	60f8      	str	r0, [r7, #12]
     28c:	607a      	str	r2, [r7, #4]
     28e:	230b      	movs	r3, #11
     290:	18fb      	adds	r3, r7, r3
     292:	1c0a      	adds	r2, r1, #0
     294:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     296:	230b      	movs	r3, #11
     298:	18fb      	adds	r3, r7, r3
     29a:	781b      	ldrb	r3, [r3, #0]
     29c:	68fa      	ldr	r2, [r7, #12]
     29e:	01db      	lsls	r3, r3, #7
     2a0:	18d3      	adds	r3, r2, r3
     2a2:	3304      	adds	r3, #4
     2a4:	687a      	ldr	r2, [r7, #4]
     2a6:	601a      	str	r2, [r3, #0]
}
     2a8:	46c0      	nop			; (mov r8, r8)
     2aa:	46bd      	mov	sp, r7
     2ac:	b004      	add	sp, #16
     2ae:	bd80      	pop	{r7, pc}

000002b0 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = mask;
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2b0:	b580      	push	{r7, lr}
     2b2:	b084      	sub	sp, #16
     2b4:	af00      	add	r7, sp, #0
     2b6:	60f8      	str	r0, [r7, #12]
     2b8:	607a      	str	r2, [r7, #4]
     2ba:	230b      	movs	r3, #11
     2bc:	18fb      	adds	r3, r7, r3
     2be:	1c0a      	adds	r2, r1, #0
     2c0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2c2:	230b      	movs	r3, #11
     2c4:	18fb      	adds	r3, r7, r3
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	68fa      	ldr	r2, [r7, #12]
     2ca:	01db      	lsls	r3, r3, #7
     2cc:	18d3      	adds	r3, r2, r3
     2ce:	3318      	adds	r3, #24
     2d0:	687a      	ldr	r2, [r7, #4]
     2d2:	601a      	str	r2, [r3, #0]
}
     2d4:	46c0      	nop			; (mov r8, r8)
     2d6:	46bd      	mov	sp, r7
     2d8:	b004      	add	sp, #16
     2da:	bd80      	pop	{r7, pc}

000002dc <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2dc:	b580      	push	{r7, lr}
     2de:	b084      	sub	sp, #16
     2e0:	af00      	add	r7, sp, #0
     2e2:	60f8      	str	r0, [r7, #12]
     2e4:	607a      	str	r2, [r7, #4]
     2e6:	230b      	movs	r3, #11
     2e8:	18fb      	adds	r3, r7, r3
     2ea:	1c0a      	adds	r2, r1, #0
     2ec:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2ee:	230b      	movs	r3, #11
     2f0:	18fb      	adds	r3, r7, r3
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	68fa      	ldr	r2, [r7, #12]
     2f6:	01db      	lsls	r3, r3, #7
     2f8:	18d3      	adds	r3, r2, r3
     2fa:	3314      	adds	r3, #20
     2fc:	687a      	ldr	r2, [r7, #4]
     2fe:	601a      	str	r2, [r3, #0]
}
     300:	46c0      	nop			; (mov r8, r8)
     302:	46bd      	mov	sp, r7
     304:	b004      	add	sp, #16
     306:	bd80      	pop	{r7, pc}

00000308 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     308:	b590      	push	{r4, r7, lr}
     30a:	b085      	sub	sp, #20
     30c:	af00      	add	r7, sp, #0
     30e:	6078      	str	r0, [r7, #4]
     310:	000c      	movs	r4, r1
     312:	0010      	movs	r0, r2
     314:	0019      	movs	r1, r3
     316:	1cfb      	adds	r3, r7, #3
     318:	1c22      	adds	r2, r4, #0
     31a:	701a      	strb	r2, [r3, #0]
     31c:	1cbb      	adds	r3, r7, #2
     31e:	1c02      	adds	r2, r0, #0
     320:	701a      	strb	r2, [r3, #0]
     322:	1c7b      	adds	r3, r7, #1
     324:	1c0a      	adds	r2, r1, #0
     326:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     328:	1cfb      	adds	r3, r7, #3
     32a:	7819      	ldrb	r1, [r3, #0]
     32c:	1cbb      	adds	r3, r7, #2
     32e:	781a      	ldrb	r2, [r3, #0]
     330:	230f      	movs	r3, #15
     332:	18fb      	adds	r3, r7, r3
     334:	6878      	ldr	r0, [r7, #4]
     336:	2430      	movs	r4, #48	; 0x30
     338:	01c9      	lsls	r1, r1, #7
     33a:	1841      	adds	r1, r0, r1
     33c:	188a      	adds	r2, r1, r2
     33e:	1912      	adds	r2, r2, r4
     340:	7812      	ldrb	r2, [r2, #0]
     342:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     344:	230f      	movs	r3, #15
     346:	18fb      	adds	r3, r7, r3
     348:	220f      	movs	r2, #15
     34a:	18ba      	adds	r2, r7, r2
     34c:	7812      	ldrb	r2, [r2, #0]
     34e:	210f      	movs	r1, #15
     350:	438a      	bics	r2, r1
     352:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     354:	1c7b      	adds	r3, r7, #1
     356:	781b      	ldrb	r3, [r3, #0]
     358:	220f      	movs	r2, #15
     35a:	4013      	ands	r3, r2
     35c:	b2d9      	uxtb	r1, r3
     35e:	230f      	movs	r3, #15
     360:	18fb      	adds	r3, r7, r3
     362:	220f      	movs	r2, #15
     364:	18ba      	adds	r2, r7, r2
     366:	7812      	ldrb	r2, [r2, #0]
     368:	430a      	orrs	r2, r1
     36a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     36c:	1cfb      	adds	r3, r7, #3
     36e:	781a      	ldrb	r2, [r3, #0]
     370:	1cbb      	adds	r3, r7, #2
     372:	781b      	ldrb	r3, [r3, #0]
     374:	6879      	ldr	r1, [r7, #4]
     376:	2030      	movs	r0, #48	; 0x30
     378:	01d2      	lsls	r2, r2, #7
     37a:	188a      	adds	r2, r1, r2
     37c:	18d3      	adds	r3, r2, r3
     37e:	181b      	adds	r3, r3, r0
     380:	220f      	movs	r2, #15
     382:	18ba      	adds	r2, r7, r2
     384:	7812      	ldrb	r2, [r2, #0]
     386:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     388:	46c0      	nop			; (mov r8, r8)
     38a:	46bd      	mov	sp, r7
     38c:	b005      	add	sp, #20
     38e:	bd90      	pop	{r4, r7, pc}

00000390 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     390:	b590      	push	{r4, r7, lr}
     392:	b085      	sub	sp, #20
     394:	af00      	add	r7, sp, #0
     396:	6078      	str	r0, [r7, #4]
     398:	000c      	movs	r4, r1
     39a:	0010      	movs	r0, r2
     39c:	0019      	movs	r1, r3
     39e:	1cfb      	adds	r3, r7, #3
     3a0:	1c22      	adds	r2, r4, #0
     3a2:	701a      	strb	r2, [r3, #0]
     3a4:	1cbb      	adds	r3, r7, #2
     3a6:	1c02      	adds	r2, r0, #0
     3a8:	701a      	strb	r2, [r3, #0]
     3aa:	1c7b      	adds	r3, r7, #1
     3ac:	1c0a      	adds	r2, r1, #0
     3ae:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b0:	1cfb      	adds	r3, r7, #3
     3b2:	7819      	ldrb	r1, [r3, #0]
     3b4:	1cbb      	adds	r3, r7, #2
     3b6:	781a      	ldrb	r2, [r3, #0]
     3b8:	230f      	movs	r3, #15
     3ba:	18fb      	adds	r3, r7, r3
     3bc:	6878      	ldr	r0, [r7, #4]
     3be:	2430      	movs	r4, #48	; 0x30
     3c0:	01c9      	lsls	r1, r1, #7
     3c2:	1841      	adds	r1, r0, r1
     3c4:	188a      	adds	r2, r1, r2
     3c6:	1912      	adds	r2, r2, r4
     3c8:	7812      	ldrb	r2, [r2, #0]
     3ca:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3cc:	230f      	movs	r3, #15
     3ce:	18fb      	adds	r3, r7, r3
     3d0:	220f      	movs	r2, #15
     3d2:	18ba      	adds	r2, r7, r2
     3d4:	7812      	ldrb	r2, [r2, #0]
     3d6:	210f      	movs	r1, #15
     3d8:	400a      	ands	r2, r1
     3da:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     3dc:	1c7b      	adds	r3, r7, #1
     3de:	781b      	ldrb	r3, [r3, #0]
     3e0:	011b      	lsls	r3, r3, #4
     3e2:	b2d9      	uxtb	r1, r3
     3e4:	230f      	movs	r3, #15
     3e6:	18fb      	adds	r3, r7, r3
     3e8:	220f      	movs	r2, #15
     3ea:	18ba      	adds	r2, r7, r2
     3ec:	7812      	ldrb	r2, [r2, #0]
     3ee:	430a      	orrs	r2, r1
     3f0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f2:	1cfb      	adds	r3, r7, #3
     3f4:	781a      	ldrb	r2, [r3, #0]
     3f6:	1cbb      	adds	r3, r7, #2
     3f8:	781b      	ldrb	r3, [r3, #0]
     3fa:	6879      	ldr	r1, [r7, #4]
     3fc:	2030      	movs	r0, #48	; 0x30
     3fe:	01d2      	lsls	r2, r2, #7
     400:	188a      	adds	r2, r1, r2
     402:	18d3      	adds	r3, r2, r3
     404:	181b      	adds	r3, r3, r0
     406:	220f      	movs	r2, #15
     408:	18ba      	adds	r2, r7, r2
     40a:	7812      	ldrb	r2, [r2, #0]
     40c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	46bd      	mov	sp, r7
     412:	b005      	add	sp, #20
     414:	bd90      	pop	{r4, r7, pc}

00000416 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     416:	b590      	push	{r4, r7, lr}
     418:	b085      	sub	sp, #20
     41a:	af00      	add	r7, sp, #0
     41c:	6078      	str	r0, [r7, #4]
     41e:	000c      	movs	r4, r1
     420:	0010      	movs	r0, r2
     422:	0019      	movs	r1, r3
     424:	1cfb      	adds	r3, r7, #3
     426:	1c22      	adds	r2, r4, #0
     428:	701a      	strb	r2, [r3, #0]
     42a:	1cbb      	adds	r3, r7, #2
     42c:	1c02      	adds	r2, r0, #0
     42e:	701a      	strb	r2, [r3, #0]
     430:	1c7b      	adds	r3, r7, #1
     432:	1c0a      	adds	r2, r1, #0
     434:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     436:	1cfb      	adds	r3, r7, #3
     438:	7819      	ldrb	r1, [r3, #0]
     43a:	1cbb      	adds	r3, r7, #2
     43c:	781a      	ldrb	r2, [r3, #0]
     43e:	230f      	movs	r3, #15
     440:	18fb      	adds	r3, r7, r3
     442:	6878      	ldr	r0, [r7, #4]
     444:	2440      	movs	r4, #64	; 0x40
     446:	01c9      	lsls	r1, r1, #7
     448:	1841      	adds	r1, r0, r1
     44a:	188a      	adds	r2, r1, r2
     44c:	1912      	adds	r2, r2, r4
     44e:	7812      	ldrb	r2, [r2, #0]
     450:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     452:	230f      	movs	r3, #15
     454:	18fb      	adds	r3, r7, r3
     456:	220f      	movs	r2, #15
     458:	18ba      	adds	r2, r7, r2
     45a:	7812      	ldrb	r2, [r2, #0]
     45c:	2101      	movs	r1, #1
     45e:	438a      	bics	r2, r1
     460:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     462:	1c7b      	adds	r3, r7, #1
     464:	7819      	ldrb	r1, [r3, #0]
     466:	230f      	movs	r3, #15
     468:	18fb      	adds	r3, r7, r3
     46a:	220f      	movs	r2, #15
     46c:	18ba      	adds	r2, r7, r2
     46e:	7812      	ldrb	r2, [r2, #0]
     470:	430a      	orrs	r2, r1
     472:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     474:	1cfb      	adds	r3, r7, #3
     476:	781a      	ldrb	r2, [r3, #0]
     478:	1cbb      	adds	r3, r7, #2
     47a:	781b      	ldrb	r3, [r3, #0]
     47c:	6879      	ldr	r1, [r7, #4]
     47e:	2040      	movs	r0, #64	; 0x40
     480:	01d2      	lsls	r2, r2, #7
     482:	188a      	adds	r2, r1, r2
     484:	18d3      	adds	r3, r2, r3
     486:	181b      	adds	r3, r3, r0
     488:	220f      	movs	r2, #15
     48a:	18ba      	adds	r2, r7, r2
     48c:	7812      	ldrb	r2, [r2, #0]
     48e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     490:	46c0      	nop			; (mov r8, r8)
     492:	46bd      	mov	sp, r7
     494:	b005      	add	sp, #20
     496:	bd90      	pop	{r4, r7, pc}

00000498 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     498:	b5b0      	push	{r4, r5, r7, lr}
     49a:	b082      	sub	sp, #8
     49c:	af00      	add	r7, sp, #0
     49e:	6078      	str	r0, [r7, #4]
     4a0:	0008      	movs	r0, r1
     4a2:	0011      	movs	r1, r2
     4a4:	1cfb      	adds	r3, r7, #3
     4a6:	1c02      	adds	r2, r0, #0
     4a8:	701a      	strb	r2, [r3, #0]
     4aa:	1cbb      	adds	r3, r7, #2
     4ac:	1c0a      	adds	r2, r1, #0
     4ae:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4b0:	1cfb      	adds	r3, r7, #3
     4b2:	781a      	ldrb	r2, [r3, #0]
     4b4:	1cbb      	adds	r3, r7, #2
     4b6:	781b      	ldrb	r3, [r3, #0]
     4b8:	1cf9      	adds	r1, r7, #3
     4ba:	7808      	ldrb	r0, [r1, #0]
     4bc:	1cb9      	adds	r1, r7, #2
     4be:	7809      	ldrb	r1, [r1, #0]
     4c0:	687c      	ldr	r4, [r7, #4]
     4c2:	2540      	movs	r5, #64	; 0x40
     4c4:	01c0      	lsls	r0, r0, #7
     4c6:	1820      	adds	r0, r4, r0
     4c8:	1841      	adds	r1, r0, r1
     4ca:	1949      	adds	r1, r1, r5
     4cc:	7809      	ldrb	r1, [r1, #0]
     4ce:	b2c9      	uxtb	r1, r1
     4d0:	2004      	movs	r0, #4
     4d2:	4301      	orrs	r1, r0
     4d4:	b2cc      	uxtb	r4, r1
     4d6:	6879      	ldr	r1, [r7, #4]
     4d8:	2040      	movs	r0, #64	; 0x40
     4da:	01d2      	lsls	r2, r2, #7
     4dc:	188a      	adds	r2, r1, r2
     4de:	18d3      	adds	r3, r2, r3
     4e0:	181b      	adds	r3, r3, r0
     4e2:	1c22      	adds	r2, r4, #0
     4e4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	46bd      	mov	sp, r7
     4ea:	b002      	add	sp, #8
     4ec:	bdb0      	pop	{r4, r5, r7, pc}

000004ee <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     4ee:	b5b0      	push	{r4, r5, r7, lr}
     4f0:	b082      	sub	sp, #8
     4f2:	af00      	add	r7, sp, #0
     4f4:	6078      	str	r0, [r7, #4]
     4f6:	0008      	movs	r0, r1
     4f8:	0011      	movs	r1, r2
     4fa:	1cfb      	adds	r3, r7, #3
     4fc:	1c02      	adds	r2, r0, #0
     4fe:	701a      	strb	r2, [r3, #0]
     500:	1cbb      	adds	r3, r7, #2
     502:	1c0a      	adds	r2, r1, #0
     504:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     506:	1cfb      	adds	r3, r7, #3
     508:	781a      	ldrb	r2, [r3, #0]
     50a:	1cbb      	adds	r3, r7, #2
     50c:	781b      	ldrb	r3, [r3, #0]
     50e:	1cf9      	adds	r1, r7, #3
     510:	7808      	ldrb	r0, [r1, #0]
     512:	1cb9      	adds	r1, r7, #2
     514:	7809      	ldrb	r1, [r1, #0]
     516:	687c      	ldr	r4, [r7, #4]
     518:	2540      	movs	r5, #64	; 0x40
     51a:	01c0      	lsls	r0, r0, #7
     51c:	1820      	adds	r0, r4, r0
     51e:	1841      	adds	r1, r0, r1
     520:	1949      	adds	r1, r1, r5
     522:	7809      	ldrb	r1, [r1, #0]
     524:	b2c9      	uxtb	r1, r1
     526:	2004      	movs	r0, #4
     528:	4381      	bics	r1, r0
     52a:	b2cc      	uxtb	r4, r1
     52c:	6879      	ldr	r1, [r7, #4]
     52e:	2040      	movs	r0, #64	; 0x40
     530:	01d2      	lsls	r2, r2, #7
     532:	188a      	adds	r2, r1, r2
     534:	18d3      	adds	r3, r2, r3
     536:	181b      	adds	r3, r3, r0
     538:	1c22      	adds	r2, r4, #0
     53a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     53c:	46c0      	nop			; (mov r8, r8)
     53e:	46bd      	mov	sp, r7
     540:	b002      	add	sp, #8
     542:	bdb0      	pop	{r4, r5, r7, pc}

00000544 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     544:	b580      	push	{r7, lr}
     546:	b084      	sub	sp, #16
     548:	af00      	add	r7, sp, #0
     54a:	60f8      	str	r0, [r7, #12]
     54c:	607a      	str	r2, [r7, #4]
     54e:	230b      	movs	r3, #11
     550:	18fb      	adds	r3, r7, r3
     552:	1c0a      	adds	r2, r1, #0
     554:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     556:	230b      	movs	r3, #11
     558:	18fb      	adds	r3, r7, r3
     55a:	781b      	ldrb	r3, [r3, #0]
     55c:	68fa      	ldr	r2, [r7, #12]
     55e:	01db      	lsls	r3, r3, #7
     560:	18d3      	adds	r3, r2, r3
     562:	3328      	adds	r3, #40	; 0x28
     564:	687a      	ldr	r2, [r7, #4]
     566:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     568:	46c0      	nop			; (mov r8, r8)
     56a:	46bd      	mov	sp, r7
     56c:	b004      	add	sp, #16
     56e:	bd80      	pop	{r7, pc}

00000570 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     570:	b580      	push	{r7, lr}
     572:	b082      	sub	sp, #8
     574:	af00      	add	r7, sp, #0
     576:	6039      	str	r1, [r7, #0]
     578:	0011      	movs	r1, r2
     57a:	1dfb      	adds	r3, r7, #7
     57c:	1c02      	adds	r2, r0, #0
     57e:	701a      	strb	r2, [r3, #0]
     580:	1dbb      	adds	r3, r7, #6
     582:	1c0a      	adds	r2, r1, #0
     584:	701a      	strb	r2, [r3, #0]
	switch (direction) {
     586:	1dbb      	adds	r3, r7, #6
     588:	781b      	ldrb	r3, [r3, #0]
     58a:	2b01      	cmp	r3, #1
     58c:	d025      	beq.n	5da <_gpio_set_direction+0x6a>
     58e:	2b02      	cmp	r3, #2
     590:	d043      	beq.n	61a <_gpio_set_direction+0xaa>
     592:	2b00      	cmp	r3, #0
     594:	d163      	bne.n	65e <_gpio_set_direction+0xee>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     596:	683a      	ldr	r2, [r7, #0]
     598:	1dfb      	adds	r3, r7, #7
     59a:	7819      	ldrb	r1, [r3, #0]
     59c:	23c0      	movs	r3, #192	; 0xc0
     59e:	05db      	lsls	r3, r3, #23
     5a0:	0018      	movs	r0, r3
     5a2:	4b34      	ldr	r3, [pc, #208]	; (674 <_gpio_set_direction+0x104>)
     5a4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     5a6:	683b      	ldr	r3, [r7, #0]
     5a8:	041b      	lsls	r3, r3, #16
     5aa:	0c1b      	lsrs	r3, r3, #16
     5ac:	2280      	movs	r2, #128	; 0x80
     5ae:	05d2      	lsls	r2, r2, #23
     5b0:	431a      	orrs	r2, r3
     5b2:	1dfb      	adds	r3, r7, #7
     5b4:	7819      	ldrb	r1, [r3, #0]
     5b6:	2382      	movs	r3, #130	; 0x82
     5b8:	05db      	lsls	r3, r3, #23
     5ba:	0018      	movs	r0, r3
     5bc:	4b2e      	ldr	r3, [pc, #184]	; (678 <_gpio_set_direction+0x108>)
     5be:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     5c0:	683b      	ldr	r3, [r7, #0]
     5c2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     5c4:	22c0      	movs	r2, #192	; 0xc0
     5c6:	0612      	lsls	r2, r2, #24
     5c8:	431a      	orrs	r2, r3
     5ca:	1dfb      	adds	r3, r7, #7
     5cc:	7819      	ldrb	r1, [r3, #0]
     5ce:	2382      	movs	r3, #130	; 0x82
     5d0:	05db      	lsls	r3, r3, #23
     5d2:	0018      	movs	r0, r3
     5d4:	4b28      	ldr	r3, [pc, #160]	; (678 <_gpio_set_direction+0x108>)
     5d6:	4798      	blx	r3
		break;
     5d8:	e047      	b.n	66a <_gpio_set_direction+0xfa>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     5da:	683a      	ldr	r2, [r7, #0]
     5dc:	1dfb      	adds	r3, r7, #7
     5de:	7819      	ldrb	r1, [r3, #0]
     5e0:	23c0      	movs	r3, #192	; 0xc0
     5e2:	05db      	lsls	r3, r3, #23
     5e4:	0018      	movs	r0, r3
     5e6:	4b23      	ldr	r3, [pc, #140]	; (674 <_gpio_set_direction+0x104>)
     5e8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     5ea:	683b      	ldr	r3, [r7, #0]
     5ec:	041b      	lsls	r3, r3, #16
     5ee:	0c1b      	lsrs	r3, r3, #16
     5f0:	4a22      	ldr	r2, [pc, #136]	; (67c <_gpio_set_direction+0x10c>)
     5f2:	431a      	orrs	r2, r3
     5f4:	1dfb      	adds	r3, r7, #7
     5f6:	7819      	ldrb	r1, [r3, #0]
     5f8:	2382      	movs	r3, #130	; 0x82
     5fa:	05db      	lsls	r3, r3, #23
     5fc:	0018      	movs	r0, r3
     5fe:	4b1e      	ldr	r3, [pc, #120]	; (678 <_gpio_set_direction+0x108>)
     600:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     602:	683b      	ldr	r3, [r7, #0]
     604:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     606:	4a1e      	ldr	r2, [pc, #120]	; (680 <_gpio_set_direction+0x110>)
     608:	431a      	orrs	r2, r3
     60a:	1dfb      	adds	r3, r7, #7
     60c:	7819      	ldrb	r1, [r3, #0]
     60e:	2382      	movs	r3, #130	; 0x82
     610:	05db      	lsls	r3, r3, #23
     612:	0018      	movs	r0, r3
     614:	4b18      	ldr	r3, [pc, #96]	; (678 <_gpio_set_direction+0x108>)
     616:	4798      	blx	r3
		break;
     618:	e027      	b.n	66a <_gpio_set_direction+0xfa>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
     61a:	683a      	ldr	r2, [r7, #0]
     61c:	1dfb      	adds	r3, r7, #7
     61e:	7819      	ldrb	r1, [r3, #0]
     620:	23c0      	movs	r3, #192	; 0xc0
     622:	05db      	lsls	r3, r3, #23
     624:	0018      	movs	r0, r3
     626:	4b17      	ldr	r3, [pc, #92]	; (684 <_gpio_set_direction+0x114>)
     628:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     62a:	683b      	ldr	r3, [r7, #0]
     62c:	041b      	lsls	r3, r3, #16
     62e:	0c1b      	lsrs	r3, r3, #16
     630:	2280      	movs	r2, #128	; 0x80
     632:	05d2      	lsls	r2, r2, #23
     634:	431a      	orrs	r2, r3
     636:	1dfb      	adds	r3, r7, #7
     638:	7819      	ldrb	r1, [r3, #0]
     63a:	2382      	movs	r3, #130	; 0x82
     63c:	05db      	lsls	r3, r3, #23
     63e:	0018      	movs	r0, r3
     640:	4b0d      	ldr	r3, [pc, #52]	; (678 <_gpio_set_direction+0x108>)
     642:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     644:	683b      	ldr	r3, [r7, #0]
     646:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     648:	22c0      	movs	r2, #192	; 0xc0
     64a:	0612      	lsls	r2, r2, #24
     64c:	431a      	orrs	r2, r3
     64e:	1dfb      	adds	r3, r7, #7
     650:	7819      	ldrb	r1, [r3, #0]
     652:	2382      	movs	r3, #130	; 0x82
     654:	05db      	lsls	r3, r3, #23
     656:	0018      	movs	r0, r3
     658:	4b07      	ldr	r3, [pc, #28]	; (678 <_gpio_set_direction+0x108>)
     65a:	4798      	blx	r3
		break;
     65c:	e005      	b.n	66a <_gpio_set_direction+0xfa>

	default:
		ASSERT(false);
     65e:	4b0a      	ldr	r3, [pc, #40]	; (688 <_gpio_set_direction+0x118>)
     660:	2246      	movs	r2, #70	; 0x46
     662:	0019      	movs	r1, r3
     664:	2000      	movs	r0, #0
     666:	4b09      	ldr	r3, [pc, #36]	; (68c <_gpio_set_direction+0x11c>)
     668:	4798      	blx	r3
	}
}
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	46bd      	mov	sp, r7
     66e:	b002      	add	sp, #8
     670:	bd80      	pop	{r7, pc}
     672:	46c0      	nop			; (mov r8, r8)
     674:	00000285 	.word	0x00000285
     678:	00000545 	.word	0x00000545
     67c:	40020000 	.word	0x40020000
     680:	c0020000 	.word	0xc0020000
     684:	00000259 	.word	0x00000259
     688:	000045e4 	.word	0x000045e4
     68c:	00001ec1 	.word	0x00001ec1

00000690 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     690:	b580      	push	{r7, lr}
     692:	b082      	sub	sp, #8
     694:	af00      	add	r7, sp, #0
     696:	6039      	str	r1, [r7, #0]
     698:	0011      	movs	r1, r2
     69a:	1dfb      	adds	r3, r7, #7
     69c:	1c02      	adds	r2, r0, #0
     69e:	701a      	strb	r2, [r3, #0]
     6a0:	1dbb      	adds	r3, r7, #6
     6a2:	1c0a      	adds	r2, r1, #0
     6a4:	701a      	strb	r2, [r3, #0]
	if (level) {
     6a6:	1dbb      	adds	r3, r7, #6
     6a8:	781b      	ldrb	r3, [r3, #0]
     6aa:	2b00      	cmp	r3, #0
     6ac:	d008      	beq.n	6c0 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     6ae:	683a      	ldr	r2, [r7, #0]
     6b0:	1dfb      	adds	r3, r7, #7
     6b2:	7819      	ldrb	r1, [r3, #0]
     6b4:	23c0      	movs	r3, #192	; 0xc0
     6b6:	05db      	lsls	r3, r3, #23
     6b8:	0018      	movs	r0, r3
     6ba:	4b07      	ldr	r3, [pc, #28]	; (6d8 <_gpio_set_level+0x48>)
     6bc:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     6be:	e007      	b.n	6d0 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     6c0:	683a      	ldr	r2, [r7, #0]
     6c2:	1dfb      	adds	r3, r7, #7
     6c4:	7819      	ldrb	r1, [r3, #0]
     6c6:	23c0      	movs	r3, #192	; 0xc0
     6c8:	05db      	lsls	r3, r3, #23
     6ca:	0018      	movs	r0, r3
     6cc:	4b03      	ldr	r3, [pc, #12]	; (6dc <_gpio_set_level+0x4c>)
     6ce:	4798      	blx	r3
}
     6d0:	46c0      	nop			; (mov r8, r8)
     6d2:	46bd      	mov	sp, r7
     6d4:	b002      	add	sp, #8
     6d6:	bd80      	pop	{r7, pc}
     6d8:	000002b1 	.word	0x000002b1
     6dc:	000002dd 	.word	0x000002dd

000006e0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     6e0:	b590      	push	{r4, r7, lr}
     6e2:	b083      	sub	sp, #12
     6e4:	af00      	add	r7, sp, #0
     6e6:	0004      	movs	r4, r0
     6e8:	0008      	movs	r0, r1
     6ea:	0011      	movs	r1, r2
     6ec:	1dfb      	adds	r3, r7, #7
     6ee:	1c22      	adds	r2, r4, #0
     6f0:	701a      	strb	r2, [r3, #0]
     6f2:	1dbb      	adds	r3, r7, #6
     6f4:	1c02      	adds	r2, r0, #0
     6f6:	701a      	strb	r2, [r3, #0]
     6f8:	1d7b      	adds	r3, r7, #5
     6fa:	1c0a      	adds	r2, r1, #0
     6fc:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     6fe:	1d7b      	adds	r3, r7, #5
     700:	781b      	ldrb	r3, [r3, #0]
     702:	2b01      	cmp	r3, #1
     704:	d00d      	beq.n	722 <_gpio_set_pin_pull_mode+0x42>
     706:	2b02      	cmp	r3, #2
     708:	d02b      	beq.n	762 <_gpio_set_pin_pull_mode+0x82>
     70a:	2b00      	cmp	r3, #0
     70c:	d149      	bne.n	7a2 <_gpio_set_pin_pull_mode+0xc2>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     70e:	1dbb      	adds	r3, r7, #6
     710:	781a      	ldrb	r2, [r3, #0]
     712:	1dfb      	adds	r3, r7, #7
     714:	7819      	ldrb	r1, [r3, #0]
     716:	2382      	movs	r3, #130	; 0x82
     718:	05db      	lsls	r3, r3, #23
     71a:	0018      	movs	r0, r3
     71c:	4b26      	ldr	r3, [pc, #152]	; (7b8 <_gpio_set_pin_pull_mode+0xd8>)
     71e:	4798      	blx	r3
		break;
     720:	e046      	b.n	7b0 <_gpio_set_pin_pull_mode+0xd0>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     722:	1dbb      	adds	r3, r7, #6
     724:	781b      	ldrb	r3, [r3, #0]
     726:	2201      	movs	r2, #1
     728:	409a      	lsls	r2, r3
     72a:	1dfb      	adds	r3, r7, #7
     72c:	7819      	ldrb	r1, [r3, #0]
     72e:	23c0      	movs	r3, #192	; 0xc0
     730:	05db      	lsls	r3, r3, #23
     732:	0018      	movs	r0, r3
     734:	4b21      	ldr	r3, [pc, #132]	; (7bc <_gpio_set_pin_pull_mode+0xdc>)
     736:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     738:	1dbb      	adds	r3, r7, #6
     73a:	781a      	ldrb	r2, [r3, #0]
     73c:	1dfb      	adds	r3, r7, #7
     73e:	7819      	ldrb	r1, [r3, #0]
     740:	2382      	movs	r3, #130	; 0x82
     742:	05db      	lsls	r3, r3, #23
     744:	0018      	movs	r0, r3
     746:	4b1e      	ldr	r3, [pc, #120]	; (7c0 <_gpio_set_pin_pull_mode+0xe0>)
     748:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     74a:	1dbb      	adds	r3, r7, #6
     74c:	781b      	ldrb	r3, [r3, #0]
     74e:	2201      	movs	r2, #1
     750:	409a      	lsls	r2, r3
     752:	1dfb      	adds	r3, r7, #7
     754:	7819      	ldrb	r1, [r3, #0]
     756:	23c0      	movs	r3, #192	; 0xc0
     758:	05db      	lsls	r3, r3, #23
     75a:	0018      	movs	r0, r3
     75c:	4b19      	ldr	r3, [pc, #100]	; (7c4 <_gpio_set_pin_pull_mode+0xe4>)
     75e:	4798      	blx	r3
		break;
     760:	e026      	b.n	7b0 <_gpio_set_pin_pull_mode+0xd0>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     762:	1dbb      	adds	r3, r7, #6
     764:	781b      	ldrb	r3, [r3, #0]
     766:	2201      	movs	r2, #1
     768:	409a      	lsls	r2, r3
     76a:	1dfb      	adds	r3, r7, #7
     76c:	7819      	ldrb	r1, [r3, #0]
     76e:	23c0      	movs	r3, #192	; 0xc0
     770:	05db      	lsls	r3, r3, #23
     772:	0018      	movs	r0, r3
     774:	4b11      	ldr	r3, [pc, #68]	; (7bc <_gpio_set_pin_pull_mode+0xdc>)
     776:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     778:	1dbb      	adds	r3, r7, #6
     77a:	781a      	ldrb	r2, [r3, #0]
     77c:	1dfb      	adds	r3, r7, #7
     77e:	7819      	ldrb	r1, [r3, #0]
     780:	2382      	movs	r3, #130	; 0x82
     782:	05db      	lsls	r3, r3, #23
     784:	0018      	movs	r0, r3
     786:	4b0e      	ldr	r3, [pc, #56]	; (7c0 <_gpio_set_pin_pull_mode+0xe0>)
     788:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     78a:	1dbb      	adds	r3, r7, #6
     78c:	781b      	ldrb	r3, [r3, #0]
     78e:	2201      	movs	r2, #1
     790:	409a      	lsls	r2, r3
     792:	1dfb      	adds	r3, r7, #7
     794:	7819      	ldrb	r1, [r3, #0]
     796:	23c0      	movs	r3, #192	; 0xc0
     798:	05db      	lsls	r3, r3, #23
     79a:	0018      	movs	r0, r3
     79c:	4b0a      	ldr	r3, [pc, #40]	; (7c8 <_gpio_set_pin_pull_mode+0xe8>)
     79e:	4798      	blx	r3
		break;
     7a0:	e006      	b.n	7b0 <_gpio_set_pin_pull_mode+0xd0>

	default:
		ASSERT(false);
     7a2:	4b0a      	ldr	r3, [pc, #40]	; (7cc <_gpio_set_pin_pull_mode+0xec>)
     7a4:	2289      	movs	r2, #137	; 0x89
     7a6:	0019      	movs	r1, r3
     7a8:	2000      	movs	r0, #0
     7aa:	4b09      	ldr	r3, [pc, #36]	; (7d0 <_gpio_set_pin_pull_mode+0xf0>)
     7ac:	4798      	blx	r3
		break;
     7ae:	46c0      	nop			; (mov r8, r8)
	}
}
     7b0:	46c0      	nop			; (mov r8, r8)
     7b2:	46bd      	mov	sp, r7
     7b4:	b003      	add	sp, #12
     7b6:	bd90      	pop	{r4, r7, pc}
     7b8:	000004ef 	.word	0x000004ef
     7bc:	00000285 	.word	0x00000285
     7c0:	00000499 	.word	0x00000499
     7c4:	000002b1 	.word	0x000002b1
     7c8:	000002dd 	.word	0x000002dd
     7cc:	000045e4 	.word	0x000045e4
     7d0:	00001ec1 	.word	0x00001ec1

000007d4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     7d4:	b590      	push	{r4, r7, lr}
     7d6:	b085      	sub	sp, #20
     7d8:	af00      	add	r7, sp, #0
     7da:	6078      	str	r0, [r7, #4]
     7dc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     7de:	687b      	ldr	r3, [r7, #4]
     7e0:	095a      	lsrs	r2, r3, #5
     7e2:	230f      	movs	r3, #15
     7e4:	18fb      	adds	r3, r7, r3
     7e6:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     7e8:	687b      	ldr	r3, [r7, #4]
     7ea:	b2da      	uxtb	r2, r3
     7ec:	230e      	movs	r3, #14
     7ee:	18fb      	adds	r3, r7, r3
     7f0:	211f      	movs	r1, #31
     7f2:	400a      	ands	r2, r1
     7f4:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     7f6:	683b      	ldr	r3, [r7, #0]
     7f8:	3301      	adds	r3, #1
     7fa:	d10b      	bne.n	814 <_gpio_set_pin_function+0x40>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     7fc:	230e      	movs	r3, #14
     7fe:	18fb      	adds	r3, r7, r3
     800:	781a      	ldrb	r2, [r3, #0]
     802:	230f      	movs	r3, #15
     804:	18fb      	adds	r3, r7, r3
     806:	7819      	ldrb	r1, [r3, #0]
     808:	2382      	movs	r3, #130	; 0x82
     80a:	05d8      	lsls	r0, r3, #23
     80c:	2300      	movs	r3, #0
     80e:	4c1b      	ldr	r4, [pc, #108]	; (87c <_gpio_set_pin_function+0xa8>)
     810:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     812:	e02f      	b.n	874 <_gpio_set_pin_function+0xa0>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     814:	230e      	movs	r3, #14
     816:	18fb      	adds	r3, r7, r3
     818:	781a      	ldrb	r2, [r3, #0]
     81a:	230f      	movs	r3, #15
     81c:	18fb      	adds	r3, r7, r3
     81e:	7819      	ldrb	r1, [r3, #0]
     820:	2382      	movs	r3, #130	; 0x82
     822:	05d8      	lsls	r0, r3, #23
     824:	2301      	movs	r3, #1
     826:	4c15      	ldr	r4, [pc, #84]	; (87c <_gpio_set_pin_function+0xa8>)
     828:	47a0      	blx	r4
		if (pin & 1) {
     82a:	230e      	movs	r3, #14
     82c:	18fb      	adds	r3, r7, r3
     82e:	781b      	ldrb	r3, [r3, #0]
     830:	2201      	movs	r2, #1
     832:	4013      	ands	r3, r2
     834:	d00f      	beq.n	856 <_gpio_set_pin_function+0x82>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     836:	230e      	movs	r3, #14
     838:	18fb      	adds	r3, r7, r3
     83a:	781b      	ldrb	r3, [r3, #0]
     83c:	085b      	lsrs	r3, r3, #1
     83e:	b2da      	uxtb	r2, r3
     840:	683b      	ldr	r3, [r7, #0]
     842:	b2dc      	uxtb	r4, r3
     844:	230f      	movs	r3, #15
     846:	18fb      	adds	r3, r7, r3
     848:	7819      	ldrb	r1, [r3, #0]
     84a:	2382      	movs	r3, #130	; 0x82
     84c:	05d8      	lsls	r0, r3, #23
     84e:	0023      	movs	r3, r4
     850:	4c0b      	ldr	r4, [pc, #44]	; (880 <_gpio_set_pin_function+0xac>)
     852:	47a0      	blx	r4
}
     854:	e00e      	b.n	874 <_gpio_set_pin_function+0xa0>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     856:	230e      	movs	r3, #14
     858:	18fb      	adds	r3, r7, r3
     85a:	781b      	ldrb	r3, [r3, #0]
     85c:	085b      	lsrs	r3, r3, #1
     85e:	b2da      	uxtb	r2, r3
     860:	683b      	ldr	r3, [r7, #0]
     862:	b2dc      	uxtb	r4, r3
     864:	230f      	movs	r3, #15
     866:	18fb      	adds	r3, r7, r3
     868:	7819      	ldrb	r1, [r3, #0]
     86a:	2382      	movs	r3, #130	; 0x82
     86c:	05d8      	lsls	r0, r3, #23
     86e:	0023      	movs	r3, r4
     870:	4c04      	ldr	r4, [pc, #16]	; (884 <_gpio_set_pin_function+0xb0>)
     872:	47a0      	blx	r4
}
     874:	46c0      	nop			; (mov r8, r8)
     876:	46bd      	mov	sp, r7
     878:	b005      	add	sp, #20
     87a:	bd90      	pop	{r4, r7, pc}
     87c:	00000417 	.word	0x00000417
     880:	00000391 	.word	0x00000391
     884:	00000309 	.word	0x00000309

00000888 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     888:	b580      	push	{r7, lr}
     88a:	b082      	sub	sp, #8
     88c:	af00      	add	r7, sp, #0
     88e:	0002      	movs	r2, r0
     890:	1dfb      	adds	r3, r7, #7
     892:	701a      	strb	r2, [r3, #0]
     894:	1dbb      	adds	r3, r7, #6
     896:	1c0a      	adds	r2, r1, #0
     898:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     89a:	1dfb      	adds	r3, r7, #7
     89c:	781b      	ldrb	r3, [r3, #0]
     89e:	095b      	lsrs	r3, r3, #5
     8a0:	b2d8      	uxtb	r0, r3
     8a2:	1dfb      	adds	r3, r7, #7
     8a4:	781b      	ldrb	r3, [r3, #0]
     8a6:	221f      	movs	r2, #31
     8a8:	4013      	ands	r3, r2
     8aa:	b2d9      	uxtb	r1, r3
     8ac:	1dbb      	adds	r3, r7, #6
     8ae:	781b      	ldrb	r3, [r3, #0]
     8b0:	001a      	movs	r2, r3
     8b2:	4b03      	ldr	r3, [pc, #12]	; (8c0 <gpio_set_pin_pull_mode+0x38>)
     8b4:	4798      	blx	r3
}
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	46bd      	mov	sp, r7
     8ba:	b002      	add	sp, #8
     8bc:	bd80      	pop	{r7, pc}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	000006e1 	.word	0x000006e1

000008c4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     8c4:	b580      	push	{r7, lr}
     8c6:	b082      	sub	sp, #8
     8c8:	af00      	add	r7, sp, #0
     8ca:	6078      	str	r0, [r7, #4]
     8cc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     8ce:	683a      	ldr	r2, [r7, #0]
     8d0:	687b      	ldr	r3, [r7, #4]
     8d2:	0011      	movs	r1, r2
     8d4:	0018      	movs	r0, r3
     8d6:	4b03      	ldr	r3, [pc, #12]	; (8e4 <gpio_set_pin_function+0x20>)
     8d8:	4798      	blx	r3
}
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	46bd      	mov	sp, r7
     8de:	b002      	add	sp, #8
     8e0:	bd80      	pop	{r7, pc}
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	000007d5 	.word	0x000007d5

000008e8 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     8e8:	b580      	push	{r7, lr}
     8ea:	b082      	sub	sp, #8
     8ec:	af00      	add	r7, sp, #0
     8ee:	0002      	movs	r2, r0
     8f0:	1dfb      	adds	r3, r7, #7
     8f2:	701a      	strb	r2, [r3, #0]
     8f4:	1dbb      	adds	r3, r7, #6
     8f6:	1c0a      	adds	r2, r1, #0
     8f8:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     8fa:	1dfb      	adds	r3, r7, #7
     8fc:	781b      	ldrb	r3, [r3, #0]
     8fe:	095b      	lsrs	r3, r3, #5
     900:	b2d8      	uxtb	r0, r3
     902:	1dfb      	adds	r3, r7, #7
     904:	781b      	ldrb	r3, [r3, #0]
     906:	221f      	movs	r2, #31
     908:	4013      	ands	r3, r2
     90a:	2201      	movs	r2, #1
     90c:	409a      	lsls	r2, r3
     90e:	0011      	movs	r1, r2
     910:	1dbb      	adds	r3, r7, #6
     912:	781b      	ldrb	r3, [r3, #0]
     914:	001a      	movs	r2, r3
     916:	4b03      	ldr	r3, [pc, #12]	; (924 <gpio_set_pin_direction+0x3c>)
     918:	4798      	blx	r3
}
     91a:	46c0      	nop			; (mov r8, r8)
     91c:	46bd      	mov	sp, r7
     91e:	b002      	add	sp, #8
     920:	bd80      	pop	{r7, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	00000571 	.word	0x00000571

00000928 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     928:	b580      	push	{r7, lr}
     92a:	b082      	sub	sp, #8
     92c:	af00      	add	r7, sp, #0
     92e:	0002      	movs	r2, r0
     930:	1dfb      	adds	r3, r7, #7
     932:	701a      	strb	r2, [r3, #0]
     934:	1dbb      	adds	r3, r7, #6
     936:	1c0a      	adds	r2, r1, #0
     938:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     93a:	1dfb      	adds	r3, r7, #7
     93c:	781b      	ldrb	r3, [r3, #0]
     93e:	095b      	lsrs	r3, r3, #5
     940:	b2d8      	uxtb	r0, r3
     942:	1dfb      	adds	r3, r7, #7
     944:	781b      	ldrb	r3, [r3, #0]
     946:	221f      	movs	r2, #31
     948:	4013      	ands	r3, r2
     94a:	2201      	movs	r2, #1
     94c:	409a      	lsls	r2, r3
     94e:	0011      	movs	r1, r2
     950:	1dbb      	adds	r3, r7, #6
     952:	781b      	ldrb	r3, [r3, #0]
     954:	001a      	movs	r2, r3
     956:	4b03      	ldr	r3, [pc, #12]	; (964 <gpio_set_pin_level+0x3c>)
     958:	4798      	blx	r3
}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	46bd      	mov	sp, r7
     95e:	b002      	add	sp, #8
     960:	bd80      	pop	{r7, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	00000691 	.word	0x00000691

00000968 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     968:	b580      	push	{r7, lr}
     96a:	af00      	add	r7, sp, #0
	_init_chip();
     96c:	4b02      	ldr	r3, [pc, #8]	; (978 <init_mcu+0x10>)
     96e:	4798      	blx	r3
}
     970:	46c0      	nop			; (mov r8, r8)
     972:	46bd      	mov	sp, r7
     974:	bd80      	pop	{r7, pc}
     976:	46c0      	nop			; (mov r8, r8)
     978:	0000217d 	.word	0x0000217d

0000097c <EXTERNAL_IRQ_0_init>:

struct spi_s_async_descriptor SPI_1;
static uint16_t               SPI_1_buf[16];

void EXTERNAL_IRQ_0_init(void)
{
     97c:	b580      	push	{r7, lr}
     97e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     980:	4b1c      	ldr	r3, [pc, #112]	; (9f4 <EXTERNAL_IRQ_0_init+0x78>)
     982:	2240      	movs	r2, #64	; 0x40
     984:	2102      	movs	r1, #2
     986:	0018      	movs	r0, r3
     988:	4b1b      	ldr	r3, [pc, #108]	; (9f8 <EXTERNAL_IRQ_0_init+0x7c>)
     98a:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     98c:	4b1b      	ldr	r3, [pc, #108]	; (9fc <EXTERNAL_IRQ_0_init+0x80>)
     98e:	0018      	movs	r0, r3
     990:	4b1b      	ldr	r3, [pc, #108]	; (a00 <EXTERNAL_IRQ_0_init+0x84>)
     992:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(CLEAR, GPIO_DIRECTION_IN);
     994:	2101      	movs	r1, #1
     996:	2036      	movs	r0, #54	; 0x36
     998:	4b1a      	ldr	r3, [pc, #104]	; (a04 <EXTERNAL_IRQ_0_init+0x88>)
     99a:	4798      	blx	r3

	gpio_set_pin_pull_mode(CLEAR,
     99c:	2100      	movs	r1, #0
     99e:	2036      	movs	r0, #54	; 0x36
     9a0:	4b19      	ldr	r3, [pc, #100]	; (a08 <EXTERNAL_IRQ_0_init+0x8c>)
     9a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(CLEAR, PINMUX_PB22A_EIC_EXTINT6);
     9a4:	23d8      	movs	r3, #216	; 0xd8
     9a6:	039b      	lsls	r3, r3, #14
     9a8:	0019      	movs	r1, r3
     9aa:	2036      	movs	r0, #54	; 0x36
     9ac:	4b17      	ldr	r3, [pc, #92]	; (a0c <EXTERNAL_IRQ_0_init+0x90>)
     9ae:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(SHIFT, GPIO_DIRECTION_IN);
     9b0:	2101      	movs	r1, #1
     9b2:	2037      	movs	r0, #55	; 0x37
     9b4:	4b13      	ldr	r3, [pc, #76]	; (a04 <EXTERNAL_IRQ_0_init+0x88>)
     9b6:	4798      	blx	r3

	gpio_set_pin_pull_mode(SHIFT,
     9b8:	2100      	movs	r1, #0
     9ba:	2037      	movs	r0, #55	; 0x37
     9bc:	4b12      	ldr	r3, [pc, #72]	; (a08 <EXTERNAL_IRQ_0_init+0x8c>)
     9be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(SHIFT, PINMUX_PB23A_EIC_EXTINT7);
     9c0:	23dc      	movs	r3, #220	; 0xdc
     9c2:	039b      	lsls	r3, r3, #14
     9c4:	0019      	movs	r1, r3
     9c6:	2037      	movs	r0, #55	; 0x37
     9c8:	4b10      	ldr	r3, [pc, #64]	; (a0c <EXTERNAL_IRQ_0_init+0x90>)
     9ca:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(OE, GPIO_DIRECTION_IN);
     9cc:	2101      	movs	r1, #1
     9ce:	201b      	movs	r0, #27
     9d0:	4b0c      	ldr	r3, [pc, #48]	; (a04 <EXTERNAL_IRQ_0_init+0x88>)
     9d2:	4798      	blx	r3

	gpio_set_pin_pull_mode(OE,
     9d4:	2100      	movs	r1, #0
     9d6:	201b      	movs	r0, #27
     9d8:	4b0b      	ldr	r3, [pc, #44]	; (a08 <EXTERNAL_IRQ_0_init+0x8c>)
     9da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(OE, PINMUX_PA27A_EIC_EXTINT15);
     9dc:	23d8      	movs	r3, #216	; 0xd8
     9de:	035b      	lsls	r3, r3, #13
     9e0:	0019      	movs	r1, r3
     9e2:	201b      	movs	r0, #27
     9e4:	4b09      	ldr	r3, [pc, #36]	; (a0c <EXTERNAL_IRQ_0_init+0x90>)
     9e6:	4798      	blx	r3

	ext_irq_init();
     9e8:	4b09      	ldr	r3, [pc, #36]	; (a10 <EXTERNAL_IRQ_0_init+0x94>)
     9ea:	4798      	blx	r3
}
     9ec:	46c0      	nop			; (mov r8, r8)
     9ee:	46bd      	mov	sp, r7
     9f0:	bd80      	pop	{r7, pc}
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	40001c00 	.word	0x40001c00
     9f8:	000001bb 	.word	0x000001bb
     9fc:	40000800 	.word	0x40000800
     a00:	00000203 	.word	0x00000203
     a04:	000008e9 	.word	0x000008e9
     a08:	00000889 	.word	0x00000889
     a0c:	000008c5 	.word	0x000008c5
     a10:	00000e49 	.word	0x00000e49

00000a14 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     a14:	b580      	push	{r7, lr}
     a16:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     a18:	4b07      	ldr	r3, [pc, #28]	; (a38 <TIMER_0_init+0x24>)
     a1a:	0018      	movs	r0, r3
     a1c:	4b07      	ldr	r3, [pc, #28]	; (a3c <TIMER_0_init+0x28>)
     a1e:	4798      	blx	r3
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     a20:	4b07      	ldr	r3, [pc, #28]	; (a40 <TIMER_0_init+0x2c>)
     a22:	4798      	blx	r3
     a24:	0002      	movs	r2, r0
     a26:	4907      	ldr	r1, [pc, #28]	; (a44 <TIMER_0_init+0x30>)
     a28:	4b07      	ldr	r3, [pc, #28]	; (a48 <TIMER_0_init+0x34>)
     a2a:	0018      	movs	r0, r3
     a2c:	4b07      	ldr	r3, [pc, #28]	; (a4c <TIMER_0_init+0x38>)
     a2e:	4798      	blx	r3
}
     a30:	46c0      	nop			; (mov r8, r8)
     a32:	46bd      	mov	sp, r7
     a34:	bd80      	pop	{r7, pc}
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	40000800 	.word	0x40000800
     a3c:	000001e5 	.word	0x000001e5
     a40:	00002d59 	.word	0x00002d59
     a44:	40002400 	.word	0x40002400
     a48:	20000244 	.word	0x20000244
     a4c:	00001cd5 	.word	0x00001cd5

00000a50 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     a50:	b580      	push	{r7, lr}
     a52:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(PA08, GPIO_DIRECTION_IN);
     a54:	2101      	movs	r1, #1
     a56:	2008      	movs	r0, #8
     a58:	4b13      	ldr	r3, [pc, #76]	; (aa8 <SPI_0_PORT_init+0x58>)
     a5a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA08,
     a5c:	2100      	movs	r1, #0
     a5e:	2008      	movs	r0, #8
     a60:	4b12      	ldr	r3, [pc, #72]	; (aac <SPI_0_PORT_init+0x5c>)
     a62:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA08, PINMUX_PA08C_SERCOM0_PAD0);
     a64:	4b12      	ldr	r3, [pc, #72]	; (ab0 <SPI_0_PORT_init+0x60>)
     a66:	0019      	movs	r1, r3
     a68:	2008      	movs	r0, #8
     a6a:	4b12      	ldr	r3, [pc, #72]	; (ab4 <SPI_0_PORT_init+0x64>)
     a6c:	4798      	blx	r3

	gpio_set_pin_level(PA10,
     a6e:	2100      	movs	r1, #0
     a70:	200a      	movs	r0, #10
     a72:	4b11      	ldr	r3, [pc, #68]	; (ab8 <SPI_0_PORT_init+0x68>)
     a74:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA10, GPIO_DIRECTION_OUT);
     a76:	2102      	movs	r1, #2
     a78:	200a      	movs	r0, #10
     a7a:	4b0b      	ldr	r3, [pc, #44]	; (aa8 <SPI_0_PORT_init+0x58>)
     a7c:	4798      	blx	r3

	gpio_set_pin_function(PA10, PINMUX_PA10C_SERCOM0_PAD2);
     a7e:	4b0f      	ldr	r3, [pc, #60]	; (abc <SPI_0_PORT_init+0x6c>)
     a80:	0019      	movs	r1, r3
     a82:	200a      	movs	r0, #10
     a84:	4b0b      	ldr	r3, [pc, #44]	; (ab4 <SPI_0_PORT_init+0x64>)
     a86:	4798      	blx	r3

	gpio_set_pin_level(PA11,
     a88:	2100      	movs	r1, #0
     a8a:	200b      	movs	r0, #11
     a8c:	4b0a      	ldr	r3, [pc, #40]	; (ab8 <SPI_0_PORT_init+0x68>)
     a8e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);
     a90:	2102      	movs	r1, #2
     a92:	200b      	movs	r0, #11
     a94:	4b04      	ldr	r3, [pc, #16]	; (aa8 <SPI_0_PORT_init+0x58>)
     a96:	4798      	blx	r3

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
     a98:	4b09      	ldr	r3, [pc, #36]	; (ac0 <SPI_0_PORT_init+0x70>)
     a9a:	0019      	movs	r1, r3
     a9c:	200b      	movs	r0, #11
     a9e:	4b05      	ldr	r3, [pc, #20]	; (ab4 <SPI_0_PORT_init+0x64>)
     aa0:	4798      	blx	r3
}
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	46bd      	mov	sp, r7
     aa6:	bd80      	pop	{r7, pc}
     aa8:	000008e9 	.word	0x000008e9
     aac:	00000889 	.word	0x00000889
     ab0:	00080002 	.word	0x00080002
     ab4:	000008c5 	.word	0x000008c5
     ab8:	00000929 	.word	0x00000929
     abc:	000a0002 	.word	0x000a0002
     ac0:	000b0002 	.word	0x000b0002

00000ac4 <SPI_0_CLOCK_init>:

void SPI_0_CLOCK_init(void)
{
     ac4:	b580      	push	{r7, lr}
     ac6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     ac8:	4b09      	ldr	r3, [pc, #36]	; (af0 <SPI_0_CLOCK_init+0x2c>)
     aca:	2240      	movs	r2, #64	; 0x40
     acc:	2113      	movs	r1, #19
     ace:	0018      	movs	r0, r3
     ad0:	4b08      	ldr	r3, [pc, #32]	; (af4 <SPI_0_CLOCK_init+0x30>)
     ad2:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     ad4:	4b06      	ldr	r3, [pc, #24]	; (af0 <SPI_0_CLOCK_init+0x2c>)
     ad6:	2243      	movs	r2, #67	; 0x43
     ad8:	2112      	movs	r1, #18
     ada:	0018      	movs	r0, r3
     adc:	4b05      	ldr	r3, [pc, #20]	; (af4 <SPI_0_CLOCK_init+0x30>)
     ade:	4798      	blx	r3
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
     ae0:	4b05      	ldr	r3, [pc, #20]	; (af8 <SPI_0_CLOCK_init+0x34>)
     ae2:	0018      	movs	r0, r3
     ae4:	4b05      	ldr	r3, [pc, #20]	; (afc <SPI_0_CLOCK_init+0x38>)
     ae6:	4798      	blx	r3
}
     ae8:	46c0      	nop			; (mov r8, r8)
     aea:	46bd      	mov	sp, r7
     aec:	bd80      	pop	{r7, pc}
     aee:	46c0      	nop			; (mov r8, r8)
     af0:	40001c00 	.word	0x40001c00
     af4:	000001bb 	.word	0x000001bb
     af8:	40000800 	.word	0x40000800
     afc:	00000221 	.word	0x00000221

00000b00 <SPI_0_init>:

void SPI_0_init(void)
{
     b00:	b580      	push	{r7, lr}
     b02:	af00      	add	r7, sp, #0
	SPI_0_CLOCK_init();
     b04:	4b06      	ldr	r3, [pc, #24]	; (b20 <SPI_0_init+0x20>)
     b06:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     b08:	4a06      	ldr	r2, [pc, #24]	; (b24 <SPI_0_init+0x24>)
     b0a:	4b07      	ldr	r3, [pc, #28]	; (b28 <SPI_0_init+0x28>)
     b0c:	0011      	movs	r1, r2
     b0e:	0018      	movs	r0, r3
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SPI_0_init+0x2c>)
     b12:	4798      	blx	r3
	SPI_0_PORT_init();
     b14:	4b06      	ldr	r3, [pc, #24]	; (b30 <SPI_0_init+0x30>)
     b16:	4798      	blx	r3
}
     b18:	46c0      	nop			; (mov r8, r8)
     b1a:	46bd      	mov	sp, r7
     b1c:	bd80      	pop	{r7, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	00000ac5 	.word	0x00000ac5
     b24:	42000400 	.word	0x42000400
     b28:	200001fc 	.word	0x200001fc
     b2c:	000013ed 	.word	0x000013ed
     b30:	00000a51 	.word	0x00000a51

00000b34 <SPI_1_PORT_init>:

void SPI_1_PORT_init(void)
{
     b34:	b580      	push	{r7, lr}
     b36:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(PA12, GPIO_DIRECTION_IN);
     b38:	2101      	movs	r1, #1
     b3a:	200c      	movs	r0, #12
     b3c:	4b1a      	ldr	r3, [pc, #104]	; (ba8 <SPI_1_PORT_init+0x74>)
     b3e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA12,
     b40:	2100      	movs	r1, #0
     b42:	200c      	movs	r0, #12
     b44:	4b19      	ldr	r3, [pc, #100]	; (bac <SPI_1_PORT_init+0x78>)
     b46:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);
     b48:	4b19      	ldr	r3, [pc, #100]	; (bb0 <SPI_1_PORT_init+0x7c>)
     b4a:	0019      	movs	r1, r3
     b4c:	200c      	movs	r0, #12
     b4e:	4b19      	ldr	r3, [pc, #100]	; (bb4 <SPI_1_PORT_init+0x80>)
     b50:	4798      	blx	r3

	gpio_set_pin_level(PA13,
     b52:	2100      	movs	r1, #0
     b54:	200d      	movs	r0, #13
     b56:	4b18      	ldr	r3, [pc, #96]	; (bb8 <SPI_1_PORT_init+0x84>)
     b58:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA13, GPIO_DIRECTION_OUT);
     b5a:	2102      	movs	r1, #2
     b5c:	200d      	movs	r0, #13
     b5e:	4b12      	ldr	r3, [pc, #72]	; (ba8 <SPI_1_PORT_init+0x74>)
     b60:	4798      	blx	r3

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
     b62:	4b16      	ldr	r3, [pc, #88]	; (bbc <SPI_1_PORT_init+0x88>)
     b64:	0019      	movs	r1, r3
     b66:	200d      	movs	r0, #13
     b68:	4b12      	ldr	r3, [pc, #72]	; (bb4 <SPI_1_PORT_init+0x80>)
     b6a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA14, GPIO_DIRECTION_IN);
     b6c:	2101      	movs	r1, #1
     b6e:	200e      	movs	r0, #14
     b70:	4b0d      	ldr	r3, [pc, #52]	; (ba8 <SPI_1_PORT_init+0x74>)
     b72:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA14,
     b74:	2100      	movs	r1, #0
     b76:	200e      	movs	r0, #14
     b78:	4b0c      	ldr	r3, [pc, #48]	; (bac <SPI_1_PORT_init+0x78>)
     b7a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA14, PINMUX_PA14C_SERCOM2_PAD2);
     b7c:	4b10      	ldr	r3, [pc, #64]	; (bc0 <SPI_1_PORT_init+0x8c>)
     b7e:	0019      	movs	r1, r3
     b80:	200e      	movs	r0, #14
     b82:	4b0c      	ldr	r3, [pc, #48]	; (bb4 <SPI_1_PORT_init+0x80>)
     b84:	4798      	blx	r3

	gpio_set_pin_level(PA15,
     b86:	2100      	movs	r1, #0
     b88:	200f      	movs	r0, #15
     b8a:	4b0b      	ldr	r3, [pc, #44]	; (bb8 <SPI_1_PORT_init+0x84>)
     b8c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA15, GPIO_DIRECTION_OUT);
     b8e:	2102      	movs	r1, #2
     b90:	200f      	movs	r0, #15
     b92:	4b05      	ldr	r3, [pc, #20]	; (ba8 <SPI_1_PORT_init+0x74>)
     b94:	4798      	blx	r3

	gpio_set_pin_function(PA15, PINMUX_PA15C_SERCOM2_PAD3);
     b96:	4b0b      	ldr	r3, [pc, #44]	; (bc4 <SPI_1_PORT_init+0x90>)
     b98:	0019      	movs	r1, r3
     b9a:	200f      	movs	r0, #15
     b9c:	4b05      	ldr	r3, [pc, #20]	; (bb4 <SPI_1_PORT_init+0x80>)
     b9e:	4798      	blx	r3
}
     ba0:	46c0      	nop			; (mov r8, r8)
     ba2:	46bd      	mov	sp, r7
     ba4:	bd80      	pop	{r7, pc}
     ba6:	46c0      	nop			; (mov r8, r8)
     ba8:	000008e9 	.word	0x000008e9
     bac:	00000889 	.word	0x00000889
     bb0:	000c0002 	.word	0x000c0002
     bb4:	000008c5 	.word	0x000008c5
     bb8:	00000929 	.word	0x00000929
     bbc:	000d0002 	.word	0x000d0002
     bc0:	000e0002 	.word	0x000e0002
     bc4:	000f0002 	.word	0x000f0002

00000bc8 <SPI_1_CLOCK_init>:

void SPI_1_CLOCK_init(void)
{
     bc8:	b580      	push	{r7, lr}
     bca:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     bcc:	4b09      	ldr	r3, [pc, #36]	; (bf4 <SPI_1_CLOCK_init+0x2c>)
     bce:	2240      	movs	r2, #64	; 0x40
     bd0:	2115      	movs	r1, #21
     bd2:	0018      	movs	r0, r3
     bd4:	4b08      	ldr	r3, [pc, #32]	; (bf8 <SPI_1_CLOCK_init+0x30>)
     bd6:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     bd8:	4b06      	ldr	r3, [pc, #24]	; (bf4 <SPI_1_CLOCK_init+0x2c>)
     bda:	2243      	movs	r2, #67	; 0x43
     bdc:	2112      	movs	r1, #18
     bde:	0018      	movs	r0, r3
     be0:	4b05      	ldr	r3, [pc, #20]	; (bf8 <SPI_1_CLOCK_init+0x30>)
     be2:	4798      	blx	r3
	hri_mclk_set_APBCMASK_SERCOM2_bit(MCLK);
     be4:	4b05      	ldr	r3, [pc, #20]	; (bfc <SPI_1_CLOCK_init+0x34>)
     be6:	0018      	movs	r0, r3
     be8:	4b05      	ldr	r3, [pc, #20]	; (c00 <SPI_1_CLOCK_init+0x38>)
     bea:	4798      	blx	r3
}
     bec:	46c0      	nop			; (mov r8, r8)
     bee:	46bd      	mov	sp, r7
     bf0:	bd80      	pop	{r7, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	40001c00 	.word	0x40001c00
     bf8:	000001bb 	.word	0x000001bb
     bfc:	40000800 	.word	0x40000800
     c00:	0000023d 	.word	0x0000023d

00000c04 <SPI_1_init>:

void SPI_1_init(void)
{
     c04:	b5b0      	push	{r4, r5, r7, lr}
     c06:	af00      	add	r7, sp, #0
	SPI_1_CLOCK_init();
     c08:	4b06      	ldr	r3, [pc, #24]	; (c24 <SPI_1_init+0x20>)
     c0a:	4798      	blx	r3
	spi_s_async_init(&SPI_1, SERCOM2, (uint8_t *)SPI_1_buf, 32);
     c0c:	4a06      	ldr	r2, [pc, #24]	; (c28 <SPI_1_init+0x24>)
     c0e:	4907      	ldr	r1, [pc, #28]	; (c2c <SPI_1_init+0x28>)
     c10:	4807      	ldr	r0, [pc, #28]	; (c30 <SPI_1_init+0x2c>)
     c12:	2320      	movs	r3, #32
     c14:	4c07      	ldr	r4, [pc, #28]	; (c34 <SPI_1_init+0x30>)
     c16:	47a0      	blx	r4
	SPI_1_PORT_init();
     c18:	4b07      	ldr	r3, [pc, #28]	; (c38 <SPI_1_init+0x34>)
     c1a:	4798      	blx	r3
}
     c1c:	46c0      	nop			; (mov r8, r8)
     c1e:	46bd      	mov	sp, r7
     c20:	bdb0      	pop	{r4, r5, r7, pc}
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	00000bc9 	.word	0x00000bc9
     c28:	20000020 	.word	0x20000020
     c2c:	42000c00 	.word	0x42000c00
     c30:	200001a4 	.word	0x200001a4
     c34:	00001a05 	.word	0x00001a05
     c38:	00000b35 	.word	0x00000b35

00000c3c <system_init>:

void system_init(void)
{
     c3c:	b580      	push	{r7, lr}
     c3e:	af00      	add	r7, sp, #0
	init_mcu();
     c40:	4b68      	ldr	r3, [pc, #416]	; (de4 <system_init+0x1a8>)
     c42:	4798      	blx	r3

	// GPIO on PA00

	gpio_set_pin_level(P_R1,
     c44:	2100      	movs	r1, #0
     c46:	2000      	movs	r0, #0
     c48:	4b67      	ldr	r3, [pc, #412]	; (de8 <system_init+0x1ac>)
     c4a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(P_R1, GPIO_DIRECTION_OUT);
     c4c:	2102      	movs	r1, #2
     c4e:	2000      	movs	r0, #0
     c50:	4b66      	ldr	r3, [pc, #408]	; (dec <system_init+0x1b0>)
     c52:	4798      	blx	r3

	gpio_set_pin_function(P_R1, GPIO_PIN_FUNCTION_OFF);
     c54:	2301      	movs	r3, #1
     c56:	425b      	negs	r3, r3
     c58:	0019      	movs	r1, r3
     c5a:	2000      	movs	r0, #0
     c5c:	4b64      	ldr	r3, [pc, #400]	; (df0 <system_init+0x1b4>)
     c5e:	4798      	blx	r3

	// GPIO on PA01

	gpio_set_pin_level(P_G1,
     c60:	2100      	movs	r1, #0
     c62:	2001      	movs	r0, #1
     c64:	4b60      	ldr	r3, [pc, #384]	; (de8 <system_init+0x1ac>)
     c66:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(P_G1, GPIO_DIRECTION_OUT);
     c68:	2102      	movs	r1, #2
     c6a:	2001      	movs	r0, #1
     c6c:	4b5f      	ldr	r3, [pc, #380]	; (dec <system_init+0x1b0>)
     c6e:	4798      	blx	r3

	gpio_set_pin_function(P_G1, GPIO_PIN_FUNCTION_OFF);
     c70:	2301      	movs	r3, #1
     c72:	425b      	negs	r3, r3
     c74:	0019      	movs	r1, r3
     c76:	2001      	movs	r0, #1
     c78:	4b5d      	ldr	r3, [pc, #372]	; (df0 <system_init+0x1b4>)
     c7a:	4798      	blx	r3

	// GPIO on PA02

	gpio_set_pin_level(P_B1,
     c7c:	2100      	movs	r1, #0
     c7e:	2002      	movs	r0, #2
     c80:	4b59      	ldr	r3, [pc, #356]	; (de8 <system_init+0x1ac>)
     c82:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(P_B1, GPIO_DIRECTION_OUT);
     c84:	2102      	movs	r1, #2
     c86:	2002      	movs	r0, #2
     c88:	4b58      	ldr	r3, [pc, #352]	; (dec <system_init+0x1b0>)
     c8a:	4798      	blx	r3

	gpio_set_pin_function(P_B1, GPIO_PIN_FUNCTION_OFF);
     c8c:	2301      	movs	r3, #1
     c8e:	425b      	negs	r3, r3
     c90:	0019      	movs	r1, r3
     c92:	2002      	movs	r0, #2
     c94:	4b56      	ldr	r3, [pc, #344]	; (df0 <system_init+0x1b4>)
     c96:	4798      	blx	r3

	// GPIO on PA03

	gpio_set_pin_level(P_R2,
     c98:	2100      	movs	r1, #0
     c9a:	2003      	movs	r0, #3
     c9c:	4b52      	ldr	r3, [pc, #328]	; (de8 <system_init+0x1ac>)
     c9e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(P_R2, GPIO_DIRECTION_OUT);
     ca0:	2102      	movs	r1, #2
     ca2:	2003      	movs	r0, #3
     ca4:	4b51      	ldr	r3, [pc, #324]	; (dec <system_init+0x1b0>)
     ca6:	4798      	blx	r3

	gpio_set_pin_function(P_R2, GPIO_PIN_FUNCTION_OFF);
     ca8:	2301      	movs	r3, #1
     caa:	425b      	negs	r3, r3
     cac:	0019      	movs	r1, r3
     cae:	2003      	movs	r0, #3
     cb0:	4b4f      	ldr	r3, [pc, #316]	; (df0 <system_init+0x1b4>)
     cb2:	4798      	blx	r3

	// GPIO on PA04

	gpio_set_pin_level(P_G2,
     cb4:	2100      	movs	r1, #0
     cb6:	2004      	movs	r0, #4
     cb8:	4b4b      	ldr	r3, [pc, #300]	; (de8 <system_init+0x1ac>)
     cba:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(P_G2, GPIO_DIRECTION_OUT);
     cbc:	2102      	movs	r1, #2
     cbe:	2004      	movs	r0, #4
     cc0:	4b4a      	ldr	r3, [pc, #296]	; (dec <system_init+0x1b0>)
     cc2:	4798      	blx	r3

	gpio_set_pin_function(P_G2, GPIO_PIN_FUNCTION_OFF);
     cc4:	2301      	movs	r3, #1
     cc6:	425b      	negs	r3, r3
     cc8:	0019      	movs	r1, r3
     cca:	2004      	movs	r0, #4
     ccc:	4b48      	ldr	r3, [pc, #288]	; (df0 <system_init+0x1b4>)
     cce:	4798      	blx	r3

	// GPIO on PA05

	gpio_set_pin_level(P_B2,
     cd0:	2100      	movs	r1, #0
     cd2:	2005      	movs	r0, #5
     cd4:	4b44      	ldr	r3, [pc, #272]	; (de8 <system_init+0x1ac>)
     cd6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(P_B2, GPIO_DIRECTION_OUT);
     cd8:	2102      	movs	r1, #2
     cda:	2005      	movs	r0, #5
     cdc:	4b43      	ldr	r3, [pc, #268]	; (dec <system_init+0x1b0>)
     cde:	4798      	blx	r3

	gpio_set_pin_function(P_B2, GPIO_PIN_FUNCTION_OFF);
     ce0:	2301      	movs	r3, #1
     ce2:	425b      	negs	r3, r3
     ce4:	0019      	movs	r1, r3
     ce6:	2005      	movs	r0, #5
     ce8:	4b41      	ldr	r3, [pc, #260]	; (df0 <system_init+0x1b4>)
     cea:	4798      	blx	r3

	// GPIO on PA06

	gpio_set_pin_level(P_CLK,
     cec:	2100      	movs	r1, #0
     cee:	2006      	movs	r0, #6
     cf0:	4b3d      	ldr	r3, [pc, #244]	; (de8 <system_init+0x1ac>)
     cf2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(P_CLK, GPIO_DIRECTION_OUT);
     cf4:	2102      	movs	r1, #2
     cf6:	2006      	movs	r0, #6
     cf8:	4b3c      	ldr	r3, [pc, #240]	; (dec <system_init+0x1b0>)
     cfa:	4798      	blx	r3

	gpio_set_pin_function(P_CLK, GPIO_PIN_FUNCTION_OFF);
     cfc:	2301      	movs	r3, #1
     cfe:	425b      	negs	r3, r3
     d00:	0019      	movs	r1, r3
     d02:	2006      	movs	r0, #6
     d04:	4b3a      	ldr	r3, [pc, #232]	; (df0 <system_init+0x1b4>)
     d06:	4798      	blx	r3

	// GPIO on PA09

	gpio_set_pin_level(SPI0_SS,
     d08:	2100      	movs	r1, #0
     d0a:	2009      	movs	r0, #9
     d0c:	4b36      	ldr	r3, [pc, #216]	; (de8 <system_init+0x1ac>)
     d0e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(SPI0_SS, GPIO_DIRECTION_OUT);
     d10:	2102      	movs	r1, #2
     d12:	2009      	movs	r0, #9
     d14:	4b35      	ldr	r3, [pc, #212]	; (dec <system_init+0x1b0>)
     d16:	4798      	blx	r3

	gpio_set_pin_function(SPI0_SS, GPIO_PIN_FUNCTION_OFF);
     d18:	2301      	movs	r3, #1
     d1a:	425b      	negs	r3, r3
     d1c:	0019      	movs	r1, r3
     d1e:	2009      	movs	r0, #9
     d20:	4b33      	ldr	r3, [pc, #204]	; (df0 <system_init+0x1b4>)
     d22:	4798      	blx	r3

	// GPIO on PA16

	gpio_set_pin_level(P_A,
     d24:	2100      	movs	r1, #0
     d26:	2010      	movs	r0, #16
     d28:	4b2f      	ldr	r3, [pc, #188]	; (de8 <system_init+0x1ac>)
     d2a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(P_A, GPIO_DIRECTION_OUT);
     d2c:	2102      	movs	r1, #2
     d2e:	2010      	movs	r0, #16
     d30:	4b2e      	ldr	r3, [pc, #184]	; (dec <system_init+0x1b0>)
     d32:	4798      	blx	r3

	gpio_set_pin_function(P_A, GPIO_PIN_FUNCTION_OFF);
     d34:	2301      	movs	r3, #1
     d36:	425b      	negs	r3, r3
     d38:	0019      	movs	r1, r3
     d3a:	2010      	movs	r0, #16
     d3c:	4b2c      	ldr	r3, [pc, #176]	; (df0 <system_init+0x1b4>)
     d3e:	4798      	blx	r3

	// GPIO on PA17

	gpio_set_pin_level(P_B,
     d40:	2100      	movs	r1, #0
     d42:	2011      	movs	r0, #17
     d44:	4b28      	ldr	r3, [pc, #160]	; (de8 <system_init+0x1ac>)
     d46:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(P_B, GPIO_DIRECTION_OUT);
     d48:	2102      	movs	r1, #2
     d4a:	2011      	movs	r0, #17
     d4c:	4b27      	ldr	r3, [pc, #156]	; (dec <system_init+0x1b0>)
     d4e:	4798      	blx	r3

	gpio_set_pin_function(P_B, GPIO_PIN_FUNCTION_OFF);
     d50:	2301      	movs	r3, #1
     d52:	425b      	negs	r3, r3
     d54:	0019      	movs	r1, r3
     d56:	2011      	movs	r0, #17
     d58:	4b25      	ldr	r3, [pc, #148]	; (df0 <system_init+0x1b4>)
     d5a:	4798      	blx	r3

	// GPIO on PA18

	gpio_set_pin_level(P_C,
     d5c:	2100      	movs	r1, #0
     d5e:	2012      	movs	r0, #18
     d60:	4b21      	ldr	r3, [pc, #132]	; (de8 <system_init+0x1ac>)
     d62:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(P_C, GPIO_DIRECTION_OUT);
     d64:	2102      	movs	r1, #2
     d66:	2012      	movs	r0, #18
     d68:	4b20      	ldr	r3, [pc, #128]	; (dec <system_init+0x1b0>)
     d6a:	4798      	blx	r3

	gpio_set_pin_function(P_C, GPIO_PIN_FUNCTION_OFF);
     d6c:	2301      	movs	r3, #1
     d6e:	425b      	negs	r3, r3
     d70:	0019      	movs	r1, r3
     d72:	2012      	movs	r0, #18
     d74:	4b1e      	ldr	r3, [pc, #120]	; (df0 <system_init+0x1b4>)
     d76:	4798      	blx	r3

	// GPIO on PB03

	gpio_set_pin_level(LED,
     d78:	2100      	movs	r1, #0
     d7a:	2023      	movs	r0, #35	; 0x23
     d7c:	4b1a      	ldr	r3, [pc, #104]	; (de8 <system_init+0x1ac>)
     d7e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED, GPIO_DIRECTION_OUT);
     d80:	2102      	movs	r1, #2
     d82:	2023      	movs	r0, #35	; 0x23
     d84:	4b19      	ldr	r3, [pc, #100]	; (dec <system_init+0x1b0>)
     d86:	4798      	blx	r3

	gpio_set_pin_function(LED, GPIO_PIN_FUNCTION_OFF);
     d88:	2301      	movs	r3, #1
     d8a:	425b      	negs	r3, r3
     d8c:	0019      	movs	r1, r3
     d8e:	2023      	movs	r0, #35	; 0x23
     d90:	4b17      	ldr	r3, [pc, #92]	; (df0 <system_init+0x1b4>)
     d92:	4798      	blx	r3

	// GPIO on PB10

	gpio_set_pin_level(P_OE,
     d94:	2101      	movs	r1, #1
     d96:	202a      	movs	r0, #42	; 0x2a
     d98:	4b13      	ldr	r3, [pc, #76]	; (de8 <system_init+0x1ac>)
     d9a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(P_OE, GPIO_DIRECTION_OUT);
     d9c:	2102      	movs	r1, #2
     d9e:	202a      	movs	r0, #42	; 0x2a
     da0:	4b12      	ldr	r3, [pc, #72]	; (dec <system_init+0x1b0>)
     da2:	4798      	blx	r3

	gpio_set_pin_function(P_OE, GPIO_PIN_FUNCTION_OFF);
     da4:	2301      	movs	r3, #1
     da6:	425b      	negs	r3, r3
     da8:	0019      	movs	r1, r3
     daa:	202a      	movs	r0, #42	; 0x2a
     dac:	4b10      	ldr	r3, [pc, #64]	; (df0 <system_init+0x1b4>)
     dae:	4798      	blx	r3

	// GPIO on PB11

	gpio_set_pin_level(P_STB,
     db0:	2100      	movs	r1, #0
     db2:	202b      	movs	r0, #43	; 0x2b
     db4:	4b0c      	ldr	r3, [pc, #48]	; (de8 <system_init+0x1ac>)
     db6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(P_STB, GPIO_DIRECTION_OUT);
     db8:	2102      	movs	r1, #2
     dba:	202b      	movs	r0, #43	; 0x2b
     dbc:	4b0b      	ldr	r3, [pc, #44]	; (dec <system_init+0x1b0>)
     dbe:	4798      	blx	r3

	gpio_set_pin_function(P_STB, GPIO_PIN_FUNCTION_OFF);
     dc0:	2301      	movs	r3, #1
     dc2:	425b      	negs	r3, r3
     dc4:	0019      	movs	r1, r3
     dc6:	202b      	movs	r0, #43	; 0x2b
     dc8:	4b09      	ldr	r3, [pc, #36]	; (df0 <system_init+0x1b4>)
     dca:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     dcc:	4b09      	ldr	r3, [pc, #36]	; (df4 <system_init+0x1b8>)
     dce:	4798      	blx	r3

	TIMER_0_init();
     dd0:	4b09      	ldr	r3, [pc, #36]	; (df8 <system_init+0x1bc>)
     dd2:	4798      	blx	r3

	SPI_0_init();
     dd4:	4b09      	ldr	r3, [pc, #36]	; (dfc <system_init+0x1c0>)
     dd6:	4798      	blx	r3

	SPI_1_init();
     dd8:	4b09      	ldr	r3, [pc, #36]	; (e00 <system_init+0x1c4>)
     dda:	4798      	blx	r3
}
     ddc:	46c0      	nop			; (mov r8, r8)
     dde:	46bd      	mov	sp, r7
     de0:	bd80      	pop	{r7, pc}
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	00000969 	.word	0x00000969
     de8:	00000929 	.word	0x00000929
     dec:	000008e9 	.word	0x000008e9
     df0:	000008c5 	.word	0x000008c5
     df4:	0000097d 	.word	0x0000097d
     df8:	00000a15 	.word	0x00000a15
     dfc:	00000b01 	.word	0x00000b01
     e00:	00000c05 	.word	0x00000c05

00000e04 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     e04:	b580      	push	{r7, lr}
     e06:	b084      	sub	sp, #16
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e0c:	f3ef 8310 	mrs	r3, PRIMASK
     e10:	60fb      	str	r3, [r7, #12]
  return(result);
     e12:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     e14:	687b      	ldr	r3, [r7, #4]
     e16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     e18:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     e1a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     e1e:	46c0      	nop			; (mov r8, r8)
     e20:	46bd      	mov	sp, r7
     e22:	b004      	add	sp, #16
     e24:	bd80      	pop	{r7, pc}

00000e26 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     e26:	b580      	push	{r7, lr}
     e28:	b084      	sub	sp, #16
     e2a:	af00      	add	r7, sp, #0
     e2c:	6078      	str	r0, [r7, #4]
     e2e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	681b      	ldr	r3, [r3, #0]
     e36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     e38:	68fb      	ldr	r3, [r7, #12]
     e3a:	f383 8810 	msr	PRIMASK, r3
}
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	46bd      	mov	sp, r7
     e42:	b004      	add	sp, #16
     e44:	bd80      	pop	{r7, pc}
	...

00000e48 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
     e48:	b580      	push	{r7, lr}
     e4a:	b082      	sub	sp, #8
     e4c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e4e:	1dbb      	adds	r3, r7, #6
     e50:	2200      	movs	r2, #0
     e52:	801a      	strh	r2, [r3, #0]
     e54:	e013      	b.n	e7e <ext_irq_init+0x36>
		ext_irqs[i].pin = 0xFFFFFFFF;
     e56:	1dbb      	adds	r3, r7, #6
     e58:	881b      	ldrh	r3, [r3, #0]
     e5a:	4a0f      	ldr	r2, [pc, #60]	; (e98 <ext_irq_init+0x50>)
     e5c:	00db      	lsls	r3, r3, #3
     e5e:	18d3      	adds	r3, r2, r3
     e60:	3304      	adds	r3, #4
     e62:	2201      	movs	r2, #1
     e64:	4252      	negs	r2, r2
     e66:	601a      	str	r2, [r3, #0]
		ext_irqs[i].cb  = NULL;
     e68:	1dbb      	adds	r3, r7, #6
     e6a:	881a      	ldrh	r2, [r3, #0]
     e6c:	4b0a      	ldr	r3, [pc, #40]	; (e98 <ext_irq_init+0x50>)
     e6e:	00d2      	lsls	r2, r2, #3
     e70:	2100      	movs	r1, #0
     e72:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e74:	1dbb      	adds	r3, r7, #6
     e76:	881a      	ldrh	r2, [r3, #0]
     e78:	1dbb      	adds	r3, r7, #6
     e7a:	3201      	adds	r2, #1
     e7c:	801a      	strh	r2, [r3, #0]
     e7e:	1dbb      	adds	r3, r7, #6
     e80:	881b      	ldrh	r3, [r3, #0]
     e82:	2b02      	cmp	r3, #2
     e84:	d9e7      	bls.n	e56 <ext_irq_init+0xe>
	}

	return _ext_irq_init(process_ext_irq);
     e86:	4b05      	ldr	r3, [pc, #20]	; (e9c <ext_irq_init+0x54>)
     e88:	0018      	movs	r0, r3
     e8a:	4b05      	ldr	r3, [pc, #20]	; (ea0 <ext_irq_init+0x58>)
     e8c:	4798      	blx	r3
     e8e:	0003      	movs	r3, r0
}
     e90:	0018      	movs	r0, r3
     e92:	46bd      	mov	sp, r7
     e94:	b002      	add	sp, #8
     e96:	bd80      	pop	{r7, pc}
     e98:	20000040 	.word	0x20000040
     e9c:	0000107d 	.word	0x0000107d
     ea0:	00002539 	.word	0x00002539

00000ea4 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
     ea4:	b580      	push	{r7, lr}
     ea6:	b086      	sub	sp, #24
     ea8:	af00      	add	r7, sp, #0
     eaa:	6078      	str	r0, [r7, #4]
     eac:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
     eae:	2317      	movs	r3, #23
     eb0:	18fb      	adds	r3, r7, r3
     eb2:	2200      	movs	r2, #0
     eb4:	701a      	strb	r2, [r3, #0]
     eb6:	2316      	movs	r3, #22
     eb8:	18fb      	adds	r3, r7, r3
     eba:	2200      	movs	r2, #0
     ebc:	701a      	strb	r2, [r3, #0]
	bool    found = false;
     ebe:	2315      	movs	r3, #21
     ec0:	18fb      	adds	r3, r7, r3
     ec2:	2200      	movs	r2, #0
     ec4:	701a      	strb	r2, [r3, #0]

	for (; i < EXT_IRQ_AMOUNT; i++) {
     ec6:	e01d      	b.n	f04 <ext_irq_register+0x60>
		if (ext_irqs[i].pin == pin) {
     ec8:	2317      	movs	r3, #23
     eca:	18fb      	adds	r3, r7, r3
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	4a69      	ldr	r2, [pc, #420]	; (1074 <STACK_SIZE+0x74>)
     ed0:	00db      	lsls	r3, r3, #3
     ed2:	18d3      	adds	r3, r2, r3
     ed4:	3304      	adds	r3, #4
     ed6:	681a      	ldr	r2, [r3, #0]
     ed8:	687b      	ldr	r3, [r7, #4]
     eda:	429a      	cmp	r2, r3
     edc:	d10b      	bne.n	ef6 <ext_irq_register+0x52>
			ext_irqs[i].cb = cb;
     ede:	2317      	movs	r3, #23
     ee0:	18fb      	adds	r3, r7, r3
     ee2:	781a      	ldrb	r2, [r3, #0]
     ee4:	4b63      	ldr	r3, [pc, #396]	; (1074 <STACK_SIZE+0x74>)
     ee6:	00d2      	lsls	r2, r2, #3
     ee8:	6839      	ldr	r1, [r7, #0]
     eea:	50d1      	str	r1, [r2, r3]
			found          = true;
     eec:	2315      	movs	r3, #21
     eee:	18fb      	adds	r3, r7, r3
     ef0:	2201      	movs	r2, #1
     ef2:	701a      	strb	r2, [r3, #0]
			break;
     ef4:	e00b      	b.n	f0e <ext_irq_register+0x6a>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     ef6:	2317      	movs	r3, #23
     ef8:	18fb      	adds	r3, r7, r3
     efa:	781a      	ldrb	r2, [r3, #0]
     efc:	2317      	movs	r3, #23
     efe:	18fb      	adds	r3, r7, r3
     f00:	3201      	adds	r2, #1
     f02:	701a      	strb	r2, [r3, #0]
     f04:	2317      	movs	r3, #23
     f06:	18fb      	adds	r3, r7, r3
     f08:	781b      	ldrb	r3, [r3, #0]
     f0a:	2b02      	cmp	r3, #2
     f0c:	d9dc      	bls.n	ec8 <ext_irq_register+0x24>
		}
	}

	if (NULL == cb) {
     f0e:	683b      	ldr	r3, [r7, #0]
     f10:	2b00      	cmp	r3, #0
     f12:	d111      	bne.n	f38 <ext_irq_register+0x94>
		if (!found) {
     f14:	2315      	movs	r3, #21
     f16:	18fb      	adds	r3, r7, r3
     f18:	781b      	ldrb	r3, [r3, #0]
     f1a:	2201      	movs	r2, #1
     f1c:	4053      	eors	r3, r2
     f1e:	b2db      	uxtb	r3, r3
     f20:	2b00      	cmp	r3, #0
     f22:	d002      	beq.n	f2a <ext_irq_register+0x86>
			return ERR_INVALID_ARG;
     f24:	230d      	movs	r3, #13
     f26:	425b      	negs	r3, r3
     f28:	e09f      	b.n	106a <STACK_SIZE+0x6a>
		}
		return _ext_irq_enable(pin, false);
     f2a:	687b      	ldr	r3, [r7, #4]
     f2c:	2100      	movs	r1, #0
     f2e:	0018      	movs	r0, r3
     f30:	4b51      	ldr	r3, [pc, #324]	; (1078 <STACK_SIZE+0x78>)
     f32:	4798      	blx	r3
     f34:	0003      	movs	r3, r0
     f36:	e098      	b.n	106a <STACK_SIZE+0x6a>
	}

	if (!found) {
     f38:	2315      	movs	r3, #21
     f3a:	18fb      	adds	r3, r7, r3
     f3c:	781b      	ldrb	r3, [r3, #0]
     f3e:	2201      	movs	r2, #1
     f40:	4053      	eors	r3, r2
     f42:	b2db      	uxtb	r3, r3
     f44:	2b00      	cmp	r3, #0
     f46:	d100      	bne.n	f4a <ext_irq_register+0xa6>
     f48:	e07e      	b.n	1048 <STACK_SIZE+0x48>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     f4a:	2317      	movs	r3, #23
     f4c:	18fb      	adds	r3, r7, r3
     f4e:	2200      	movs	r2, #0
     f50:	701a      	strb	r2, [r3, #0]
     f52:	e023      	b.n	f9c <ext_irq_register+0xf8>
			if (NULL == ext_irqs[i].cb) {
     f54:	2317      	movs	r3, #23
     f56:	18fb      	adds	r3, r7, r3
     f58:	781a      	ldrb	r2, [r3, #0]
     f5a:	4b46      	ldr	r3, [pc, #280]	; (1074 <STACK_SIZE+0x74>)
     f5c:	00d2      	lsls	r2, r2, #3
     f5e:	58d3      	ldr	r3, [r2, r3]
     f60:	2b00      	cmp	r3, #0
     f62:	d114      	bne.n	f8e <ext_irq_register+0xea>
				ext_irqs[i].cb  = cb;
     f64:	2317      	movs	r3, #23
     f66:	18fb      	adds	r3, r7, r3
     f68:	781a      	ldrb	r2, [r3, #0]
     f6a:	4b42      	ldr	r3, [pc, #264]	; (1074 <STACK_SIZE+0x74>)
     f6c:	00d2      	lsls	r2, r2, #3
     f6e:	6839      	ldr	r1, [r7, #0]
     f70:	50d1      	str	r1, [r2, r3]
				ext_irqs[i].pin = pin;
     f72:	2317      	movs	r3, #23
     f74:	18fb      	adds	r3, r7, r3
     f76:	781b      	ldrb	r3, [r3, #0]
     f78:	4a3e      	ldr	r2, [pc, #248]	; (1074 <STACK_SIZE+0x74>)
     f7a:	00db      	lsls	r3, r3, #3
     f7c:	18d3      	adds	r3, r2, r3
     f7e:	3304      	adds	r3, #4
     f80:	687a      	ldr	r2, [r7, #4]
     f82:	601a      	str	r2, [r3, #0]
				found           = true;
     f84:	2315      	movs	r3, #21
     f86:	18fb      	adds	r3, r7, r3
     f88:	2201      	movs	r2, #1
     f8a:	701a      	strb	r2, [r3, #0]
				break;
     f8c:	e00b      	b.n	fa6 <ext_irq_register+0x102>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     f8e:	2317      	movs	r3, #23
     f90:	18fb      	adds	r3, r7, r3
     f92:	781a      	ldrb	r2, [r3, #0]
     f94:	2317      	movs	r3, #23
     f96:	18fb      	adds	r3, r7, r3
     f98:	3201      	adds	r2, #1
     f9a:	701a      	strb	r2, [r3, #0]
     f9c:	2317      	movs	r3, #23
     f9e:	18fb      	adds	r3, r7, r3
     fa0:	781b      	ldrb	r3, [r3, #0]
     fa2:	2b02      	cmp	r3, #2
     fa4:	d9d6      	bls.n	f54 <ext_irq_register+0xb0>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     fa6:	e045      	b.n	1034 <STACK_SIZE+0x34>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     fa8:	2317      	movs	r3, #23
     faa:	18fb      	adds	r3, r7, r3
     fac:	781b      	ldrb	r3, [r3, #0]
     fae:	4a31      	ldr	r2, [pc, #196]	; (1074 <STACK_SIZE+0x74>)
     fb0:	00db      	lsls	r3, r3, #3
     fb2:	18d3      	adds	r3, r2, r3
     fb4:	3304      	adds	r3, #4
     fb6:	681a      	ldr	r2, [r3, #0]
     fb8:	2316      	movs	r3, #22
     fba:	18fb      	adds	r3, r7, r3
     fbc:	781b      	ldrb	r3, [r3, #0]
     fbe:	492d      	ldr	r1, [pc, #180]	; (1074 <STACK_SIZE+0x74>)
     fc0:	00db      	lsls	r3, r3, #3
     fc2:	18cb      	adds	r3, r1, r3
     fc4:	3304      	adds	r3, #4
     fc6:	681b      	ldr	r3, [r3, #0]
     fc8:	429a      	cmp	r2, r3
     fca:	d22c      	bcs.n	1026 <STACK_SIZE+0x26>
     fcc:	2316      	movs	r3, #22
     fce:	18fb      	adds	r3, r7, r3
     fd0:	781b      	ldrb	r3, [r3, #0]
     fd2:	4a28      	ldr	r2, [pc, #160]	; (1074 <STACK_SIZE+0x74>)
     fd4:	00db      	lsls	r3, r3, #3
     fd6:	18d3      	adds	r3, r2, r3
     fd8:	3304      	adds	r3, #4
     fda:	681b      	ldr	r3, [r3, #0]
     fdc:	3301      	adds	r3, #1
     fde:	d022      	beq.n	1026 <STACK_SIZE+0x26>
				struct ext_irq tmp = ext_irqs[j];
     fe0:	2316      	movs	r3, #22
     fe2:	18fb      	adds	r3, r7, r3
     fe4:	781b      	ldrb	r3, [r3, #0]
     fe6:	220c      	movs	r2, #12
     fe8:	18ba      	adds	r2, r7, r2
     fea:	4922      	ldr	r1, [pc, #136]	; (1074 <STACK_SIZE+0x74>)
     fec:	00db      	lsls	r3, r3, #3
     fee:	18cb      	adds	r3, r1, r3
     ff0:	cb03      	ldmia	r3!, {r0, r1}
     ff2:	c203      	stmia	r2!, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
     ff4:	2316      	movs	r3, #22
     ff6:	18fb      	adds	r3, r7, r3
     ff8:	781b      	ldrb	r3, [r3, #0]
     ffa:	2217      	movs	r2, #23
     ffc:	18ba      	adds	r2, r7, r2
     ffe:	7812      	ldrb	r2, [r2, #0]
    1000:	481c      	ldr	r0, [pc, #112]	; (1074 <STACK_SIZE+0x74>)
    1002:	00db      	lsls	r3, r3, #3
    1004:	491b      	ldr	r1, [pc, #108]	; (1074 <STACK_SIZE+0x74>)
    1006:	00d2      	lsls	r2, r2, #3
    1008:	18c3      	adds	r3, r0, r3
    100a:	188a      	adds	r2, r1, r2
    100c:	ca03      	ldmia	r2!, {r0, r1}
    100e:	c303      	stmia	r3!, {r0, r1}
				ext_irqs[i] = tmp;
    1010:	2317      	movs	r3, #23
    1012:	18fb      	adds	r3, r7, r3
    1014:	781b      	ldrb	r3, [r3, #0]
    1016:	4a17      	ldr	r2, [pc, #92]	; (1074 <STACK_SIZE+0x74>)
    1018:	00db      	lsls	r3, r3, #3
    101a:	210c      	movs	r1, #12
    101c:	1879      	adds	r1, r7, r1
    101e:	18d3      	adds	r3, r2, r3
    1020:	000a      	movs	r2, r1
    1022:	ca03      	ldmia	r2!, {r0, r1}
    1024:	c303      	stmia	r3!, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1026:	2316      	movs	r3, #22
    1028:	18fb      	adds	r3, r7, r3
    102a:	781a      	ldrb	r2, [r3, #0]
    102c:	2316      	movs	r3, #22
    102e:	18fb      	adds	r3, r7, r3
    1030:	3201      	adds	r2, #1
    1032:	701a      	strb	r2, [r3, #0]
    1034:	2316      	movs	r3, #22
    1036:	18fb      	adds	r3, r7, r3
    1038:	781b      	ldrb	r3, [r3, #0]
    103a:	2b02      	cmp	r3, #2
    103c:	d804      	bhi.n	1048 <STACK_SIZE+0x48>
    103e:	2317      	movs	r3, #23
    1040:	18fb      	adds	r3, r7, r3
    1042:	781b      	ldrb	r3, [r3, #0]
    1044:	2b02      	cmp	r3, #2
    1046:	d9af      	bls.n	fa8 <ext_irq_register+0x104>
			}
		}
	}

	if (!found) {
    1048:	2315      	movs	r3, #21
    104a:	18fb      	adds	r3, r7, r3
    104c:	781b      	ldrb	r3, [r3, #0]
    104e:	2201      	movs	r2, #1
    1050:	4053      	eors	r3, r2
    1052:	b2db      	uxtb	r3, r3
    1054:	2b00      	cmp	r3, #0
    1056:	d002      	beq.n	105e <STACK_SIZE+0x5e>
		return ERR_INVALID_ARG;
    1058:	230d      	movs	r3, #13
    105a:	425b      	negs	r3, r3
    105c:	e005      	b.n	106a <STACK_SIZE+0x6a>
	}

	return _ext_irq_enable(pin, true);
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	2101      	movs	r1, #1
    1062:	0018      	movs	r0, r3
    1064:	4b04      	ldr	r3, [pc, #16]	; (1078 <STACK_SIZE+0x78>)
    1066:	4798      	blx	r3
    1068:	0003      	movs	r3, r0
}
    106a:	0018      	movs	r0, r3
    106c:	46bd      	mov	sp, r7
    106e:	b006      	add	sp, #24
    1070:	bd80      	pop	{r7, pc}
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	20000040 	.word	0x20000040
    1078:	0000263d 	.word	0x0000263d

0000107c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    107c:	b580      	push	{r7, lr}
    107e:	b084      	sub	sp, #16
    1080:	af00      	add	r7, sp, #0
    1082:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1084:	230f      	movs	r3, #15
    1086:	18fb      	adds	r3, r7, r3
    1088:	2200      	movs	r2, #0
    108a:	701a      	strb	r2, [r3, #0]
    108c:	230e      	movs	r3, #14
    108e:	18fb      	adds	r3, r7, r3
    1090:	2203      	movs	r2, #3
    1092:	701a      	strb	r2, [r3, #0]

	while (upper >= lower) {
    1094:	e050      	b.n	1138 <process_ext_irq+0xbc>
		middle = (upper + lower) >> 1;
    1096:	230e      	movs	r3, #14
    1098:	18fb      	adds	r3, r7, r3
    109a:	781a      	ldrb	r2, [r3, #0]
    109c:	230f      	movs	r3, #15
    109e:	18fb      	adds	r3, r7, r3
    10a0:	781b      	ldrb	r3, [r3, #0]
    10a2:	18d3      	adds	r3, r2, r3
    10a4:	105a      	asrs	r2, r3, #1
    10a6:	230d      	movs	r3, #13
    10a8:	18fb      	adds	r3, r7, r3
    10aa:	701a      	strb	r2, [r3, #0]
		if (middle >= EXT_IRQ_AMOUNT) {
    10ac:	230d      	movs	r3, #13
    10ae:	18fb      	adds	r3, r7, r3
    10b0:	781b      	ldrb	r3, [r3, #0]
    10b2:	2b02      	cmp	r3, #2
    10b4:	d849      	bhi.n	114a <process_ext_irq+0xce>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    10b6:	230d      	movs	r3, #13
    10b8:	18fb      	adds	r3, r7, r3
    10ba:	781b      	ldrb	r3, [r3, #0]
    10bc:	4a26      	ldr	r2, [pc, #152]	; (1158 <process_ext_irq+0xdc>)
    10be:	00db      	lsls	r3, r3, #3
    10c0:	18d3      	adds	r3, r2, r3
    10c2:	3304      	adds	r3, #4
    10c4:	681a      	ldr	r2, [r3, #0]
    10c6:	687b      	ldr	r3, [r7, #4]
    10c8:	429a      	cmp	r2, r3
    10ca:	d10f      	bne.n	10ec <process_ext_irq+0x70>
			if (ext_irqs[middle].cb) {
    10cc:	230d      	movs	r3, #13
    10ce:	18fb      	adds	r3, r7, r3
    10d0:	781a      	ldrb	r2, [r3, #0]
    10d2:	4b21      	ldr	r3, [pc, #132]	; (1158 <process_ext_irq+0xdc>)
    10d4:	00d2      	lsls	r2, r2, #3
    10d6:	58d3      	ldr	r3, [r2, r3]
    10d8:	2b00      	cmp	r3, #0
    10da:	d038      	beq.n	114e <process_ext_irq+0xd2>
				ext_irqs[middle].cb();
    10dc:	230d      	movs	r3, #13
    10de:	18fb      	adds	r3, r7, r3
    10e0:	781a      	ldrb	r2, [r3, #0]
    10e2:	4b1d      	ldr	r3, [pc, #116]	; (1158 <process_ext_irq+0xdc>)
    10e4:	00d2      	lsls	r2, r2, #3
    10e6:	58d3      	ldr	r3, [r2, r3]
    10e8:	4798      	blx	r3
			}
			return;
    10ea:	e030      	b.n	114e <process_ext_irq+0xd2>
		}

		if (ext_irqs[middle].pin < pin) {
    10ec:	230d      	movs	r3, #13
    10ee:	18fb      	adds	r3, r7, r3
    10f0:	781b      	ldrb	r3, [r3, #0]
    10f2:	4a19      	ldr	r2, [pc, #100]	; (1158 <process_ext_irq+0xdc>)
    10f4:	00db      	lsls	r3, r3, #3
    10f6:	18d3      	adds	r3, r2, r3
    10f8:	3304      	adds	r3, #4
    10fa:	681a      	ldr	r2, [r3, #0]
    10fc:	687b      	ldr	r3, [r7, #4]
    10fe:	429a      	cmp	r2, r3
    1100:	d20d      	bcs.n	111e <process_ext_irq+0xa2>
			lower = middle + 1;
    1102:	230f      	movs	r3, #15
    1104:	18fb      	adds	r3, r7, r3
    1106:	220d      	movs	r2, #13
    1108:	18ba      	adds	r2, r7, r2
    110a:	7812      	ldrb	r2, [r2, #0]
    110c:	3201      	adds	r2, #1
    110e:	701a      	strb	r2, [r3, #0]
    1110:	230e      	movs	r3, #14
    1112:	18fb      	adds	r3, r7, r3
    1114:	220e      	movs	r2, #14
    1116:	18ba      	adds	r2, r7, r2
    1118:	7812      	ldrb	r2, [r2, #0]
    111a:	701a      	strb	r2, [r3, #0]
    111c:	e00c      	b.n	1138 <process_ext_irq+0xbc>
		} else {
			upper = middle - 1;
    111e:	230e      	movs	r3, #14
    1120:	18fb      	adds	r3, r7, r3
    1122:	220d      	movs	r2, #13
    1124:	18ba      	adds	r2, r7, r2
    1126:	7812      	ldrb	r2, [r2, #0]
    1128:	3a01      	subs	r2, #1
    112a:	701a      	strb	r2, [r3, #0]
    112c:	230f      	movs	r3, #15
    112e:	18fb      	adds	r3, r7, r3
    1130:	220f      	movs	r2, #15
    1132:	18ba      	adds	r2, r7, r2
    1134:	7812      	ldrb	r2, [r2, #0]
    1136:	701a      	strb	r2, [r3, #0]
	while (upper >= lower) {
    1138:	230e      	movs	r3, #14
    113a:	18fa      	adds	r2, r7, r3
    113c:	230f      	movs	r3, #15
    113e:	18fb      	adds	r3, r7, r3
    1140:	7812      	ldrb	r2, [r2, #0]
    1142:	781b      	ldrb	r3, [r3, #0]
    1144:	429a      	cmp	r2, r3
    1146:	d2a6      	bcs.n	1096 <process_ext_irq+0x1a>
    1148:	e002      	b.n	1150 <process_ext_irq+0xd4>
			return;
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	e000      	b.n	1150 <process_ext_irq+0xd4>
			return;
    114e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    1150:	46bd      	mov	sp, r7
    1152:	b004      	add	sp, #16
    1154:	bd80      	pop	{r7, pc}
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	20000040 	.word	0x20000040

0000115c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    115c:	b580      	push	{r7, lr}
    115e:	b084      	sub	sp, #16
    1160:	af00      	add	r7, sp, #0
    1162:	60f8      	str	r0, [r7, #12]
    1164:	60b9      	str	r1, [r7, #8]
    1166:	1dbb      	adds	r3, r7, #6
    1168:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    116a:	68fb      	ldr	r3, [r7, #12]
    116c:	2b00      	cmp	r3, #0
    116e:	d004      	beq.n	117a <io_write+0x1e>
    1170:	68bb      	ldr	r3, [r7, #8]
    1172:	2b00      	cmp	r3, #0
    1174:	d001      	beq.n	117a <io_write+0x1e>
    1176:	2301      	movs	r3, #1
    1178:	e000      	b.n	117c <io_write+0x20>
    117a:	2300      	movs	r3, #0
    117c:	1c1a      	adds	r2, r3, #0
    117e:	2301      	movs	r3, #1
    1180:	4013      	ands	r3, r2
    1182:	b2db      	uxtb	r3, r3
    1184:	4908      	ldr	r1, [pc, #32]	; (11a8 <io_write+0x4c>)
    1186:	2234      	movs	r2, #52	; 0x34
    1188:	0018      	movs	r0, r3
    118a:	4b08      	ldr	r3, [pc, #32]	; (11ac <io_write+0x50>)
    118c:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    118e:	68fb      	ldr	r3, [r7, #12]
    1190:	681b      	ldr	r3, [r3, #0]
    1192:	1dba      	adds	r2, r7, #6
    1194:	8812      	ldrh	r2, [r2, #0]
    1196:	68b9      	ldr	r1, [r7, #8]
    1198:	68f8      	ldr	r0, [r7, #12]
    119a:	4798      	blx	r3
    119c:	0003      	movs	r3, r0
}
    119e:	0018      	movs	r0, r3
    11a0:	46bd      	mov	sp, r7
    11a2:	b004      	add	sp, #16
    11a4:	bd80      	pop	{r7, pc}
    11a6:	46c0      	nop			; (mov r8, r8)
    11a8:	00004600 	.word	0x00004600
    11ac:	00001ec1 	.word	0x00001ec1

000011b0 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    11b0:	b580      	push	{r7, lr}
    11b2:	b084      	sub	sp, #16
    11b4:	af00      	add	r7, sp, #0
    11b6:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    11b8:	687b      	ldr	r3, [r7, #4]
    11ba:	3b04      	subs	r3, #4
    11bc:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    11be:	687b      	ldr	r3, [r7, #4]
    11c0:	791b      	ldrb	r3, [r3, #4]
    11c2:	2b01      	cmp	r3, #1
    11c4:	d80f      	bhi.n	11e6 <_spi_dev_tx+0x36>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    11c6:	68fb      	ldr	r3, [r7, #12]
    11c8:	6b99      	ldr	r1, [r3, #56]	; 0x38
    11ca:	68fb      	ldr	r3, [r7, #12]
    11cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    11ce:	1c58      	adds	r0, r3, #1
    11d0:	68fa      	ldr	r2, [r7, #12]
    11d2:	6450      	str	r0, [r2, #68]	; 0x44
    11d4:	18cb      	adds	r3, r1, r3
    11d6:	781b      	ldrb	r3, [r3, #0]
    11d8:	b29a      	uxth	r2, r3
    11da:	687b      	ldr	r3, [r7, #4]
    11dc:	0011      	movs	r1, r2
    11de:	0018      	movs	r0, r3
    11e0:	4b12      	ldr	r3, [pc, #72]	; (122c <_spi_dev_tx+0x7c>)
    11e2:	4798      	blx	r3
    11e4:	e00e      	b.n	1204 <_spi_dev_tx+0x54>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    11e6:	68fb      	ldr	r3, [r7, #12]
    11e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
    11ea:	68fb      	ldr	r3, [r7, #12]
    11ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    11ee:	1c58      	adds	r0, r3, #1
    11f0:	68fa      	ldr	r2, [r7, #12]
    11f2:	6450      	str	r0, [r2, #68]	; 0x44
    11f4:	005b      	lsls	r3, r3, #1
    11f6:	18cb      	adds	r3, r1, r3
    11f8:	881a      	ldrh	r2, [r3, #0]
    11fa:	687b      	ldr	r3, [r7, #4]
    11fc:	0011      	movs	r1, r2
    11fe:	0018      	movs	r0, r3
    1200:	4b0a      	ldr	r3, [pc, #40]	; (122c <_spi_dev_tx+0x7c>)
    1202:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    1204:	68fb      	ldr	r3, [r7, #12]
    1206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1208:	68fb      	ldr	r3, [r7, #12]
    120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    120c:	429a      	cmp	r2, r3
    120e:	d109      	bne.n	1224 <_spi_dev_tx+0x74>
		_spi_m_async_enable_tx(dev, false);
    1210:	687b      	ldr	r3, [r7, #4]
    1212:	2100      	movs	r1, #0
    1214:	0018      	movs	r0, r3
    1216:	4b06      	ldr	r3, [pc, #24]	; (1230 <_spi_dev_tx+0x80>)
    1218:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    121a:	687b      	ldr	r3, [r7, #4]
    121c:	2101      	movs	r1, #1
    121e:	0018      	movs	r0, r3
    1220:	4b04      	ldr	r3, [pc, #16]	; (1234 <_spi_dev_tx+0x84>)
    1222:	4798      	blx	r3
	}
}
    1224:	46c0      	nop			; (mov r8, r8)
    1226:	46bd      	mov	sp, r7
    1228:	b004      	add	sp, #16
    122a:	bd80      	pop	{r7, pc}
    122c:	000039ad 	.word	0x000039ad
    1230:	000037d5 	.word	0x000037d5
    1234:	00003911 	.word	0x00003911

00001238 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    1238:	b590      	push	{r4, r7, lr}
    123a:	b085      	sub	sp, #20
    123c:	af00      	add	r7, sp, #0
    123e:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1240:	687b      	ldr	r3, [r7, #4]
    1242:	3b04      	subs	r3, #4
    1244:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    1246:	68fb      	ldr	r3, [r7, #12]
    1248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    124a:	2b00      	cmp	r3, #0
    124c:	d023      	beq.n	1296 <_spi_dev_rx+0x5e>
		if (!(dev->char_size > 1)) {
    124e:	687b      	ldr	r3, [r7, #4]
    1250:	791b      	ldrb	r3, [r3, #4]
    1252:	2b01      	cmp	r3, #1
    1254:	d80f      	bhi.n	1276 <_spi_dev_rx+0x3e>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    1256:	68fb      	ldr	r3, [r7, #12]
    1258:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    125a:	68fb      	ldr	r3, [r7, #12]
    125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    125e:	1c58      	adds	r0, r3, #1
    1260:	68fa      	ldr	r2, [r7, #12]
    1262:	6450      	str	r0, [r2, #68]	; 0x44
    1264:	18cc      	adds	r4, r1, r3
    1266:	687b      	ldr	r3, [r7, #4]
    1268:	0018      	movs	r0, r3
    126a:	4b32      	ldr	r3, [pc, #200]	; (1334 <_spi_dev_rx+0xfc>)
    126c:	4798      	blx	r3
    126e:	0003      	movs	r3, r0
    1270:	b2db      	uxtb	r3, r3
    1272:	7023      	strb	r3, [r4, #0]
    1274:	e018      	b.n	12a8 <_spi_dev_rx+0x70>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    1276:	68fb      	ldr	r3, [r7, #12]
    1278:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    127a:	68fb      	ldr	r3, [r7, #12]
    127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    127e:	1c58      	adds	r0, r3, #1
    1280:	68fa      	ldr	r2, [r7, #12]
    1282:	6450      	str	r0, [r2, #68]	; 0x44
    1284:	005b      	lsls	r3, r3, #1
    1286:	18cc      	adds	r4, r1, r3
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	0018      	movs	r0, r3
    128c:	4b29      	ldr	r3, [pc, #164]	; (1334 <_spi_dev_rx+0xfc>)
    128e:	4798      	blx	r3
    1290:	0003      	movs	r3, r0
    1292:	8023      	strh	r3, [r4, #0]
    1294:	e008      	b.n	12a8 <_spi_dev_rx+0x70>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	0018      	movs	r0, r3
    129a:	4b26      	ldr	r3, [pc, #152]	; (1334 <_spi_dev_rx+0xfc>)
    129c:	4798      	blx	r3
		spi->xfercnt++;
    129e:	68fb      	ldr	r3, [r7, #12]
    12a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    12a2:	1c5a      	adds	r2, r3, #1
    12a4:	68fb      	ldr	r3, [r7, #12]
    12a6:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    12a8:	68fb      	ldr	r3, [r7, #12]
    12aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    12ac:	68fb      	ldr	r3, [r7, #12]
    12ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    12b0:	429a      	cmp	r2, r3
    12b2:	d229      	bcs.n	1308 <_spi_dev_rx+0xd0>
		if (spi->xfer.txbuf) {
    12b4:	68fb      	ldr	r3, [r7, #12]
    12b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    12b8:	2b00      	cmp	r3, #0
    12ba:	d01d      	beq.n	12f8 <_spi_dev_rx+0xc0>
			if (!(dev->char_size > 1)) {
    12bc:	687b      	ldr	r3, [r7, #4]
    12be:	791b      	ldrb	r3, [r3, #4]
    12c0:	2b01      	cmp	r3, #1
    12c2:	d80c      	bhi.n	12de <_spi_dev_rx+0xa6>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    12c4:	68fb      	ldr	r3, [r7, #12]
    12c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    12c8:	68fb      	ldr	r3, [r7, #12]
    12ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    12cc:	18d3      	adds	r3, r2, r3
    12ce:	781b      	ldrb	r3, [r3, #0]
    12d0:	b29a      	uxth	r2, r3
    12d2:	687b      	ldr	r3, [r7, #4]
    12d4:	0011      	movs	r1, r2
    12d6:	0018      	movs	r0, r3
    12d8:	4b17      	ldr	r3, [pc, #92]	; (1338 <_spi_dev_rx+0x100>)
    12da:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    12dc:	e026      	b.n	132c <_spi_dev_rx+0xf4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    12de:	68fb      	ldr	r3, [r7, #12]
    12e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    12e2:	68fb      	ldr	r3, [r7, #12]
    12e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    12e6:	005b      	lsls	r3, r3, #1
    12e8:	18d3      	adds	r3, r2, r3
    12ea:	881a      	ldrh	r2, [r3, #0]
    12ec:	687b      	ldr	r3, [r7, #4]
    12ee:	0011      	movs	r1, r2
    12f0:	0018      	movs	r0, r3
    12f2:	4b11      	ldr	r3, [pc, #68]	; (1338 <_spi_dev_rx+0x100>)
    12f4:	4798      	blx	r3
}
    12f6:	e019      	b.n	132c <_spi_dev_rx+0xf4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    12f8:	687b      	ldr	r3, [r7, #4]
    12fa:	88da      	ldrh	r2, [r3, #6]
    12fc:	687b      	ldr	r3, [r7, #4]
    12fe:	0011      	movs	r1, r2
    1300:	0018      	movs	r0, r3
    1302:	4b0d      	ldr	r3, [pc, #52]	; (1338 <_spi_dev_rx+0x100>)
    1304:	4798      	blx	r3
}
    1306:	e011      	b.n	132c <_spi_dev_rx+0xf4>
		_spi_m_async_enable_rx(dev, false);
    1308:	687b      	ldr	r3, [r7, #4]
    130a:	2100      	movs	r1, #0
    130c:	0018      	movs	r0, r3
    130e:	4b0b      	ldr	r3, [pc, #44]	; (133c <_spi_dev_rx+0x104>)
    1310:	4798      	blx	r3
		spi->stat = 0;
    1312:	68fb      	ldr	r3, [r7, #12]
    1314:	222c      	movs	r2, #44	; 0x2c
    1316:	2100      	movs	r1, #0
    1318:	5499      	strb	r1, [r3, r2]
		if (spi->callbacks.cb_xfer) {
    131a:	68fb      	ldr	r3, [r7, #12]
    131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    131e:	2b00      	cmp	r3, #0
    1320:	d004      	beq.n	132c <_spi_dev_rx+0xf4>
			spi->callbacks.cb_xfer(spi);
    1322:	68fb      	ldr	r3, [r7, #12]
    1324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1326:	68fa      	ldr	r2, [r7, #12]
    1328:	0010      	movs	r0, r2
    132a:	4798      	blx	r3
}
    132c:	46c0      	nop			; (mov r8, r8)
    132e:	46bd      	mov	sp, r7
    1330:	b005      	add	sp, #20
    1332:	bd90      	pop	{r4, r7, pc}
    1334:	00003a69 	.word	0x00003a69
    1338:	000039ad 	.word	0x000039ad
    133c:	00003871 	.word	0x00003871

00001340 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    1340:	b580      	push	{r7, lr}
    1342:	b084      	sub	sp, #16
    1344:	af00      	add	r7, sp, #0
    1346:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1348:	687b      	ldr	r3, [r7, #4]
    134a:	3b04      	subs	r3, #4
    134c:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    134e:	68fb      	ldr	r3, [r7, #12]
    1350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1356:	429a      	cmp	r2, r3
    1358:	d311      	bcc.n	137e <_spi_dev_complete+0x3e>
		_spi_m_async_enable_tx_complete(dev, false);
    135a:	687b      	ldr	r3, [r7, #4]
    135c:	2100      	movs	r1, #0
    135e:	0018      	movs	r0, r3
    1360:	4b09      	ldr	r3, [pc, #36]	; (1388 <_spi_dev_complete+0x48>)
    1362:	4798      	blx	r3
		spi->stat = 0;
    1364:	68fb      	ldr	r3, [r7, #12]
    1366:	222c      	movs	r2, #44	; 0x2c
    1368:	2100      	movs	r1, #0
    136a:	5499      	strb	r1, [r3, r2]

		if (spi->callbacks.cb_xfer) {
    136c:	68fb      	ldr	r3, [r7, #12]
    136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1370:	2b00      	cmp	r3, #0
    1372:	d004      	beq.n	137e <_spi_dev_complete+0x3e>
			spi->callbacks.cb_xfer(spi);
    1374:	68fb      	ldr	r3, [r7, #12]
    1376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1378:	68fa      	ldr	r2, [r7, #12]
    137a:	0010      	movs	r0, r2
    137c:	4798      	blx	r3
		}
	}
}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	46bd      	mov	sp, r7
    1382:	b004      	add	sp, #16
    1384:	bd80      	pop	{r7, pc}
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	00003911 	.word	0x00003911

0000138c <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    138c:	b580      	push	{r7, lr}
    138e:	b084      	sub	sp, #16
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
    1394:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1396:	687b      	ldr	r3, [r7, #4]
    1398:	3b04      	subs	r3, #4
    139a:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    139c:	687b      	ldr	r3, [r7, #4]
    139e:	2100      	movs	r1, #0
    13a0:	0018      	movs	r0, r3
    13a2:	4b0f      	ldr	r3, [pc, #60]	; (13e0 <_spi_dev_error+0x54>)
    13a4:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    13a6:	687b      	ldr	r3, [r7, #4]
    13a8:	2100      	movs	r1, #0
    13aa:	0018      	movs	r0, r3
    13ac:	4b0d      	ldr	r3, [pc, #52]	; (13e4 <_spi_dev_error+0x58>)
    13ae:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    13b0:	687b      	ldr	r3, [r7, #4]
    13b2:	2100      	movs	r1, #0
    13b4:	0018      	movs	r0, r3
    13b6:	4b0c      	ldr	r3, [pc, #48]	; (13e8 <_spi_dev_error+0x5c>)
    13b8:	4798      	blx	r3
	spi->stat = 0;
    13ba:	68fb      	ldr	r3, [r7, #12]
    13bc:	222c      	movs	r2, #44	; 0x2c
    13be:	2100      	movs	r1, #0
    13c0:	5499      	strb	r1, [r3, r2]

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    13c2:	68fb      	ldr	r3, [r7, #12]
    13c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    13c6:	2b00      	cmp	r3, #0
    13c8:	d005      	beq.n	13d6 <_spi_dev_error+0x4a>
		spi->callbacks.cb_error(spi, status);
    13ca:	68fb      	ldr	r3, [r7, #12]
    13cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    13ce:	6839      	ldr	r1, [r7, #0]
    13d0:	68fa      	ldr	r2, [r7, #12]
    13d2:	0010      	movs	r0, r2
    13d4:	4798      	blx	r3
	}
}
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	46bd      	mov	sp, r7
    13da:	b004      	add	sp, #16
    13dc:	bd80      	pop	{r7, pc}
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	000037d5 	.word	0x000037d5
    13e4:	00003871 	.word	0x00003871
    13e8:	00003911 	.word	0x00003911

000013ec <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    13ec:	b580      	push	{r7, lr}
    13ee:	b084      	sub	sp, #16
    13f0:	af00      	add	r7, sp, #0
    13f2:	6078      	str	r0, [r7, #4]
    13f4:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    13f6:	2300      	movs	r3, #0
    13f8:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    13fa:	687b      	ldr	r3, [r7, #4]
    13fc:	2b00      	cmp	r3, #0
    13fe:	d004      	beq.n	140a <spi_m_async_init+0x1e>
    1400:	683b      	ldr	r3, [r7, #0]
    1402:	2b00      	cmp	r3, #0
    1404:	d001      	beq.n	140a <spi_m_async_init+0x1e>
    1406:	2301      	movs	r3, #1
    1408:	e000      	b.n	140c <spi_m_async_init+0x20>
    140a:	2300      	movs	r3, #0
    140c:	1c1a      	adds	r2, r3, #0
    140e:	2301      	movs	r3, #1
    1410:	4013      	ands	r3, r2
    1412:	b2db      	uxtb	r3, r3
    1414:	491e      	ldr	r1, [pc, #120]	; (1490 <spi_m_async_init+0xa4>)
    1416:	22a5      	movs	r2, #165	; 0xa5
    1418:	0018      	movs	r0, r3
    141a:	4b1e      	ldr	r3, [pc, #120]	; (1494 <spi_m_async_init+0xa8>)
    141c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	683a      	ldr	r2, [r7, #0]
    1422:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    1424:	687b      	ldr	r3, [r7, #4]
    1426:	3304      	adds	r3, #4
    1428:	683a      	ldr	r2, [r7, #0]
    142a:	0011      	movs	r1, r2
    142c:	0018      	movs	r0, r3
    142e:	4b1a      	ldr	r3, [pc, #104]	; (1498 <spi_m_async_init+0xac>)
    1430:	4798      	blx	r3
    1432:	0003      	movs	r3, r0
    1434:	60fb      	str	r3, [r7, #12]

	if (rc >= 0) {
    1436:	68fb      	ldr	r3, [r7, #12]
    1438:	2b00      	cmp	r3, #0
    143a:	db23      	blt.n	1484 <spi_m_async_init+0x98>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	3304      	adds	r3, #4
    1440:	4a16      	ldr	r2, [pc, #88]	; (149c <spi_m_async_init+0xb0>)
    1442:	2100      	movs	r1, #0
    1444:	0018      	movs	r0, r3
    1446:	4b16      	ldr	r3, [pc, #88]	; (14a0 <spi_m_async_init+0xb4>)
    1448:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    144a:	687b      	ldr	r3, [r7, #4]
    144c:	3304      	adds	r3, #4
    144e:	4a15      	ldr	r2, [pc, #84]	; (14a4 <spi_m_async_init+0xb8>)
    1450:	2101      	movs	r1, #1
    1452:	0018      	movs	r0, r3
    1454:	4b12      	ldr	r3, [pc, #72]	; (14a0 <spi_m_async_init+0xb4>)
    1456:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	3304      	adds	r3, #4
    145c:	4a12      	ldr	r2, [pc, #72]	; (14a8 <spi_m_async_init+0xbc>)
    145e:	2102      	movs	r1, #2
    1460:	0018      	movs	r0, r3
    1462:	4b0f      	ldr	r3, [pc, #60]	; (14a0 <spi_m_async_init+0xb4>)
    1464:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    1466:	687b      	ldr	r3, [r7, #4]
    1468:	3304      	adds	r3, #4
    146a:	4a10      	ldr	r2, [pc, #64]	; (14ac <spi_m_async_init+0xc0>)
    146c:	2103      	movs	r1, #3
    146e:	0018      	movs	r0, r3
    1470:	4b0b      	ldr	r3, [pc, #44]	; (14a0 <spi_m_async_init+0xb4>)
    1472:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    1474:	687b      	ldr	r3, [r7, #4]
    1476:	4a0e      	ldr	r2, [pc, #56]	; (14b0 <spi_m_async_init+0xc4>)
    1478:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    147a:	687b      	ldr	r3, [r7, #4]
    147c:	4a0d      	ldr	r2, [pc, #52]	; (14b4 <spi_m_async_init+0xc8>)
    147e:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    1480:	2300      	movs	r3, #0
    1482:	e000      	b.n	1486 <spi_m_async_init+0x9a>
		return rc;
    1484:	68fb      	ldr	r3, [r7, #12]
}
    1486:	0018      	movs	r0, r3
    1488:	46bd      	mov	sp, r7
    148a:	b004      	add	sp, #16
    148c:	bd80      	pop	{r7, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	00004614 	.word	0x00004614
    1494:	00001ec1 	.word	0x00001ec1
    1498:	00003681 	.word	0x00003681
    149c:	000011b1 	.word	0x000011b1
    14a0:	00003b11 	.word	0x00003b11
    14a4:	00001239 	.word	0x00001239
    14a8:	00001341 	.word	0x00001341
    14ac:	0000138d 	.word	0x0000138d
    14b0:	000014f1 	.word	0x000014f1
    14b4:	00001575 	.word	0x00001575

000014b8 <spi_m_async_enable>:
	spi->callbacks.cb_error = NULL;
	spi->callbacks.cb_xfer  = NULL;
}

void spi_m_async_enable(struct spi_m_async_descriptor *spi)
{
    14b8:	b580      	push	{r7, lr}
    14ba:	b082      	sub	sp, #8
    14bc:	af00      	add	r7, sp, #0
    14be:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    14c0:	687b      	ldr	r3, [r7, #4]
    14c2:	1e5a      	subs	r2, r3, #1
    14c4:	4193      	sbcs	r3, r2
    14c6:	b2db      	uxtb	r3, r3
    14c8:	4906      	ldr	r1, [pc, #24]	; (14e4 <spi_m_async_enable+0x2c>)
    14ca:	22c1      	movs	r2, #193	; 0xc1
    14cc:	0018      	movs	r0, r3
    14ce:	4b06      	ldr	r3, [pc, #24]	; (14e8 <spi_m_async_enable+0x30>)
    14d0:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    14d2:	687b      	ldr	r3, [r7, #4]
    14d4:	3304      	adds	r3, #4
    14d6:	0018      	movs	r0, r3
    14d8:	4b04      	ldr	r3, [pc, #16]	; (14ec <spi_m_async_enable+0x34>)
    14da:	4798      	blx	r3
}
    14dc:	46c0      	nop			; (mov r8, r8)
    14de:	46bd      	mov	sp, r7
    14e0:	b002      	add	sp, #8
    14e2:	bd80      	pop	{r7, pc}
    14e4:	00004614 	.word	0x00004614
    14e8:	00001ec1 	.word	0x00001ec1
    14ec:	0000372d 	.word	0x0000372d

000014f0 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    14f0:	b580      	push	{r7, lr}
    14f2:	b086      	sub	sp, #24
    14f4:	af00      	add	r7, sp, #0
    14f6:	60f8      	str	r0, [r7, #12]
    14f8:	60b9      	str	r1, [r7, #8]
    14fa:	1dbb      	adds	r3, r7, #6
    14fc:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    14fe:	68fb      	ldr	r3, [r7, #12]
    1500:	1e5a      	subs	r2, r3, #1
    1502:	4193      	sbcs	r3, r2
    1504:	b2d8      	uxtb	r0, r3
    1506:	2306      	movs	r3, #6
    1508:	33ff      	adds	r3, #255	; 0xff
    150a:	001a      	movs	r2, r3
    150c:	4b14      	ldr	r3, [pc, #80]	; (1560 <_spi_m_async_io_read+0x70>)
    150e:	0019      	movs	r1, r3
    1510:	4b14      	ldr	r3, [pc, #80]	; (1564 <_spi_m_async_io_read+0x74>)
    1512:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    1514:	68fb      	ldr	r3, [r7, #12]
    1516:	3b24      	subs	r3, #36	; 0x24
    1518:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    151a:	697b      	ldr	r3, [r7, #20]
    151c:	68ba      	ldr	r2, [r7, #8]
    151e:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    1520:	697b      	ldr	r3, [r7, #20]
    1522:	2200      	movs	r2, #0
    1524:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    1526:	1dbb      	adds	r3, r7, #6
    1528:	881a      	ldrh	r2, [r3, #0]
    152a:	697b      	ldr	r3, [r7, #20]
    152c:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    152e:	697b      	ldr	r3, [r7, #20]
    1530:	2200      	movs	r2, #0
    1532:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    1534:	697b      	ldr	r3, [r7, #20]
    1536:	222c      	movs	r2, #44	; 0x2c
    1538:	2110      	movs	r1, #16
    153a:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_rx(&spi->dev, true);
    153c:	697b      	ldr	r3, [r7, #20]
    153e:	3304      	adds	r3, #4
    1540:	2101      	movs	r1, #1
    1542:	0018      	movs	r0, r3
    1544:	4b08      	ldr	r3, [pc, #32]	; (1568 <_spi_m_async_io_read+0x78>)
    1546:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    1548:	697b      	ldr	r3, [r7, #20]
    154a:	3304      	adds	r3, #4
    154c:	4a07      	ldr	r2, [pc, #28]	; (156c <_spi_m_async_io_read+0x7c>)
    154e:	0011      	movs	r1, r2
    1550:	0018      	movs	r0, r3
    1552:	4b07      	ldr	r3, [pc, #28]	; (1570 <_spi_m_async_io_read+0x80>)
    1554:	4798      	blx	r3

	return ERR_NONE;
    1556:	2300      	movs	r3, #0
}
    1558:	0018      	movs	r0, r3
    155a:	46bd      	mov	sp, r7
    155c:	b006      	add	sp, #24
    155e:	bd80      	pop	{r7, pc}
    1560:	00004614 	.word	0x00004614
    1564:	00001ec1 	.word	0x00001ec1
    1568:	00003871 	.word	0x00003871
    156c:	000001ff 	.word	0x000001ff
    1570:	000039ad 	.word	0x000039ad

00001574 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    1574:	b580      	push	{r7, lr}
    1576:	b086      	sub	sp, #24
    1578:	af00      	add	r7, sp, #0
    157a:	60f8      	str	r0, [r7, #12]
    157c:	60b9      	str	r1, [r7, #8]
    157e:	1dbb      	adds	r3, r7, #6
    1580:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	1e5a      	subs	r2, r3, #1
    1586:	4193      	sbcs	r3, r2
    1588:	b2d8      	uxtb	r0, r3
    158a:	2328      	movs	r3, #40	; 0x28
    158c:	33ff      	adds	r3, #255	; 0xff
    158e:	001a      	movs	r2, r3
    1590:	4b11      	ldr	r3, [pc, #68]	; (15d8 <_spi_m_async_io_write+0x64>)
    1592:	0019      	movs	r1, r3
    1594:	4b11      	ldr	r3, [pc, #68]	; (15dc <_spi_m_async_io_write+0x68>)
    1596:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    1598:	68fb      	ldr	r3, [r7, #12]
    159a:	3b24      	subs	r3, #36	; 0x24
    159c:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    159e:	697b      	ldr	r3, [r7, #20]
    15a0:	2200      	movs	r2, #0
    15a2:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    15a4:	697b      	ldr	r3, [r7, #20]
    15a6:	68ba      	ldr	r2, [r7, #8]
    15a8:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    15aa:	1dbb      	adds	r3, r7, #6
    15ac:	881a      	ldrh	r2, [r3, #0]
    15ae:	697b      	ldr	r3, [r7, #20]
    15b0:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    15b2:	697b      	ldr	r3, [r7, #20]
    15b4:	2200      	movs	r2, #0
    15b6:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    15b8:	697b      	ldr	r3, [r7, #20]
    15ba:	222c      	movs	r2, #44	; 0x2c
    15bc:	2110      	movs	r1, #16
    15be:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_tx(&spi->dev, true);
    15c0:	697b      	ldr	r3, [r7, #20]
    15c2:	3304      	adds	r3, #4
    15c4:	2101      	movs	r1, #1
    15c6:	0018      	movs	r0, r3
    15c8:	4b05      	ldr	r3, [pc, #20]	; (15e0 <_spi_m_async_io_write+0x6c>)
    15ca:	4798      	blx	r3

	return ERR_NONE;
    15cc:	2300      	movs	r3, #0
}
    15ce:	0018      	movs	r0, r3
    15d0:	46bd      	mov	sp, r7
    15d2:	b006      	add	sp, #24
    15d4:	bd80      	pop	{r7, pc}
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	00004614 	.word	0x00004614
    15dc:	00001ec1 	.word	0x00001ec1
    15e0:	000037d5 	.word	0x000037d5

000015e4 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    15e4:	b580      	push	{r7, lr}
    15e6:	b084      	sub	sp, #16
    15e8:	af00      	add	r7, sp, #0
    15ea:	60f8      	str	r0, [r7, #12]
    15ec:	607a      	str	r2, [r7, #4]
    15ee:	230b      	movs	r3, #11
    15f0:	18fb      	adds	r3, r7, r3
    15f2:	1c0a      	adds	r2, r1, #0
    15f4:	701a      	strb	r2, [r3, #0]
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    15f6:	68fb      	ldr	r3, [r7, #12]
    15f8:	2b00      	cmp	r3, #0
    15fa:	d006      	beq.n	160a <spi_m_async_register_callback+0x26>
    15fc:	230b      	movs	r3, #11
    15fe:	18fb      	adds	r3, r7, r3
    1600:	781b      	ldrb	r3, [r3, #0]
    1602:	2b01      	cmp	r3, #1
    1604:	d801      	bhi.n	160a <spi_m_async_register_callback+0x26>
    1606:	2301      	movs	r3, #1
    1608:	e000      	b.n	160c <spi_m_async_register_callback+0x28>
    160a:	2300      	movs	r3, #0
    160c:	1c1a      	adds	r2, r3, #0
    160e:	2301      	movs	r3, #1
    1610:	4013      	ands	r3, r2
    1612:	b2d8      	uxtb	r0, r3
    1614:	2364      	movs	r3, #100	; 0x64
    1616:	33ff      	adds	r3, #255	; 0xff
    1618:	001a      	movs	r2, r3
    161a:	4b0f      	ldr	r3, [pc, #60]	; (1658 <spi_m_async_register_callback+0x74>)
    161c:	0019      	movs	r1, r3
    161e:	4b0f      	ldr	r3, [pc, #60]	; (165c <spi_m_async_register_callback+0x78>)
    1620:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    1622:	230b      	movs	r3, #11
    1624:	18fb      	adds	r3, r7, r3
    1626:	781b      	ldrb	r3, [r3, #0]
    1628:	2b00      	cmp	r3, #0
    162a:	d103      	bne.n	1634 <spi_m_async_register_callback+0x50>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    162c:	68fb      	ldr	r3, [r7, #12]
    162e:	687a      	ldr	r2, [r7, #4]
    1630:	631a      	str	r2, [r3, #48]	; 0x30
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
	}
}
    1632:	e00c      	b.n	164e <spi_m_async_register_callback+0x6a>
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    1634:	68fb      	ldr	r3, [r7, #12]
    1636:	687a      	ldr	r2, [r7, #4]
    1638:	635a      	str	r2, [r3, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    163a:	68fb      	ldr	r3, [r7, #12]
    163c:	1d18      	adds	r0, r3, #4
    163e:	687b      	ldr	r3, [r7, #4]
    1640:	1e5a      	subs	r2, r3, #1
    1642:	4193      	sbcs	r3, r2
    1644:	b2db      	uxtb	r3, r3
    1646:	001a      	movs	r2, r3
    1648:	2103      	movs	r1, #3
    164a:	4b05      	ldr	r3, [pc, #20]	; (1660 <spi_m_async_register_callback+0x7c>)
    164c:	4798      	blx	r3
}
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	46bd      	mov	sp, r7
    1652:	b004      	add	sp, #16
    1654:	bd80      	pop	{r7, pc}
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	00004614 	.word	0x00004614
    165c:	00001ec1 	.word	0x00001ec1
    1660:	00003bad 	.word	0x00003bad

00001664 <spi_m_async_get_io_descriptor>:

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    1664:	b580      	push	{r7, lr}
    1666:	b082      	sub	sp, #8
    1668:	af00      	add	r7, sp, #0
    166a:	6078      	str	r0, [r7, #4]
    166c:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	2b00      	cmp	r3, #0
    1672:	d004      	beq.n	167e <spi_m_async_get_io_descriptor+0x1a>
    1674:	683b      	ldr	r3, [r7, #0]
    1676:	2b00      	cmp	r3, #0
    1678:	d001      	beq.n	167e <spi_m_async_get_io_descriptor+0x1a>
    167a:	2301      	movs	r3, #1
    167c:	e000      	b.n	1680 <spi_m_async_get_io_descriptor+0x1c>
    167e:	2300      	movs	r3, #0
    1680:	1c1a      	adds	r2, r3, #0
    1682:	2301      	movs	r3, #1
    1684:	4013      	ands	r3, r2
    1686:	b2d8      	uxtb	r0, r3
    1688:	2370      	movs	r3, #112	; 0x70
    168a:	33ff      	adds	r3, #255	; 0xff
    168c:	001a      	movs	r2, r3
    168e:	4b07      	ldr	r3, [pc, #28]	; (16ac <spi_m_async_get_io_descriptor+0x48>)
    1690:	0019      	movs	r1, r3
    1692:	4b07      	ldr	r3, [pc, #28]	; (16b0 <spi_m_async_get_io_descriptor+0x4c>)
    1694:	4798      	blx	r3
	*io = &spi->io;
    1696:	687b      	ldr	r3, [r7, #4]
    1698:	3324      	adds	r3, #36	; 0x24
    169a:	001a      	movs	r2, r3
    169c:	683b      	ldr	r3, [r7, #0]
    169e:	601a      	str	r2, [r3, #0]
	return 0;
    16a0:	2300      	movs	r3, #0
}
    16a2:	0018      	movs	r0, r3
    16a4:	46bd      	mov	sp, r7
    16a6:	b002      	add	sp, #8
    16a8:	bd80      	pop	{r7, pc}
    16aa:	46c0      	nop			; (mov r8, r8)
    16ac:	00004614 	.word	0x00004614
    16b0:	00001ec1 	.word	0x00001ec1

000016b4 <spi_s_async_dev_tx>:

/**
 * \brief Data transmitted callback
 */
static void spi_s_async_dev_tx(struct _spi_s_async_dev *dev)
{
    16b4:	b590      	push	{r4, r7, lr}
    16b6:	b085      	sub	sp, #20
    16b8:	af00      	add	r7, sp, #0
    16ba:	6078      	str	r0, [r7, #4]
	struct spi_s_async_descriptor *spi = CONTAINER_OF(dev, struct spi_s_async_descriptor, dev);
    16bc:	687b      	ldr	r3, [r7, #4]
    16be:	3b04      	subs	r3, #4
    16c0:	60fb      	str	r3, [r7, #12]

	if (dev->char_size > 1) {
    16c2:	687b      	ldr	r3, [r7, #4]
    16c4:	791b      	ldrb	r3, [r3, #4]
    16c6:	2b01      	cmp	r3, #1
    16c8:	d912      	bls.n	16f0 <spi_s_async_dev_tx+0x3c>
		_spi_s_async_write_one(dev, ((uint16_t *)spi->txbuf)[spi->txcnt++]);
    16ca:	68fb      	ldr	r3, [r7, #12]
    16cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    16ce:	68fb      	ldr	r3, [r7, #12]
    16d0:	2142      	movs	r1, #66	; 0x42
    16d2:	5a5b      	ldrh	r3, [r3, r1]
    16d4:	1c59      	adds	r1, r3, #1
    16d6:	b28c      	uxth	r4, r1
    16d8:	68f9      	ldr	r1, [r7, #12]
    16da:	2042      	movs	r0, #66	; 0x42
    16dc:	520c      	strh	r4, [r1, r0]
    16de:	005b      	lsls	r3, r3, #1
    16e0:	18d3      	adds	r3, r2, r3
    16e2:	881a      	ldrh	r2, [r3, #0]
    16e4:	687b      	ldr	r3, [r7, #4]
    16e6:	0011      	movs	r1, r2
    16e8:	0018      	movs	r0, r3
    16ea:	4b18      	ldr	r3, [pc, #96]	; (174c <spi_s_async_dev_tx+0x98>)
    16ec:	4798      	blx	r3
    16ee:	e011      	b.n	1714 <spi_s_async_dev_tx+0x60>
	} else {
		_spi_s_async_write_one(dev, spi->txbuf[spi->txcnt++]);
    16f0:	68fb      	ldr	r3, [r7, #12]
    16f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    16f4:	68fb      	ldr	r3, [r7, #12]
    16f6:	2142      	movs	r1, #66	; 0x42
    16f8:	5a5b      	ldrh	r3, [r3, r1]
    16fa:	1c59      	adds	r1, r3, #1
    16fc:	b28c      	uxth	r4, r1
    16fe:	68f9      	ldr	r1, [r7, #12]
    1700:	2042      	movs	r0, #66	; 0x42
    1702:	520c      	strh	r4, [r1, r0]
    1704:	18d3      	adds	r3, r2, r3
    1706:	781b      	ldrb	r3, [r3, #0]
    1708:	b29a      	uxth	r2, r3
    170a:	687b      	ldr	r3, [r7, #4]
    170c:	0011      	movs	r1, r2
    170e:	0018      	movs	r0, r3
    1710:	4b0e      	ldr	r3, [pc, #56]	; (174c <spi_s_async_dev_tx+0x98>)
    1712:	4798      	blx	r3
	}

	if (spi->txcnt >= spi->txsize) {
    1714:	68fb      	ldr	r3, [r7, #12]
    1716:	2242      	movs	r2, #66	; 0x42
    1718:	5a9a      	ldrh	r2, [r3, r2]
    171a:	68fb      	ldr	r3, [r7, #12]
    171c:	2140      	movs	r1, #64	; 0x40
    171e:	5a5b      	ldrh	r3, [r3, r1]
    1720:	429a      	cmp	r2, r3
    1722:	d30f      	bcc.n	1744 <spi_s_async_dev_tx+0x90>
		_spi_s_async_enable_tx(dev, false);
    1724:	687b      	ldr	r3, [r7, #4]
    1726:	2100      	movs	r1, #0
    1728:	0018      	movs	r0, r3
    172a:	4b09      	ldr	r3, [pc, #36]	; (1750 <spi_s_async_dev_tx+0x9c>)
    172c:	4798      	blx	r3

		spi->busy = 0;
    172e:	68fb      	ldr	r3, [r7, #12]
    1730:	2255      	movs	r2, #85	; 0x55
    1732:	5c99      	ldrb	r1, [r3, r2]
    1734:	2001      	movs	r0, #1
    1736:	4381      	bics	r1, r0
    1738:	5499      	strb	r1, [r3, r2]
		spi->callbacks.tx(spi);
    173a:	68fb      	ldr	r3, [r7, #12]
    173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    173e:	68fa      	ldr	r2, [r7, #12]
    1740:	0010      	movs	r0, r2
    1742:	4798      	blx	r3
	}
}
    1744:	46c0      	nop			; (mov r8, r8)
    1746:	46bd      	mov	sp, r7
    1748:	b005      	add	sp, #20
    174a:	bd90      	pop	{r4, r7, pc}
    174c:	00003a09 	.word	0x00003a09
    1750:	00003845 	.word	0x00003845

00001754 <spi_s_async_dev_rx>:

/**
 * \brief Data received callback
 */
static void spi_s_async_dev_rx(struct _spi_s_async_dev *dev)
{
    1754:	b580      	push	{r7, lr}
    1756:	b084      	sub	sp, #16
    1758:	af00      	add	r7, sp, #0
    175a:	6078      	str	r0, [r7, #4]
	struct spi_s_async_descriptor *spi = CONTAINER_OF(dev, struct spi_s_async_descriptor, dev);
    175c:	687b      	ldr	r3, [r7, #4]
    175e:	3b04      	subs	r3, #4
    1760:	60fb      	str	r3, [r7, #12]
	union {
		uint8_t  u8[2];
		uint16_t u16;
	} tmp;

	tmp.u16 = _spi_s_async_read_one(dev);
    1762:	687b      	ldr	r3, [r7, #4]
    1764:	0018      	movs	r0, r3
    1766:	4b14      	ldr	r3, [pc, #80]	; (17b8 <spi_s_async_dev_rx+0x64>)
    1768:	4798      	blx	r3
    176a:	0003      	movs	r3, r0
    176c:	001a      	movs	r2, r3
    176e:	2308      	movs	r3, #8
    1770:	18fb      	adds	r3, r7, r3
    1772:	801a      	strh	r2, [r3, #0]

	ringbuffer_put(&spi->rx_rb, tmp.u8[0]);
    1774:	68fb      	ldr	r3, [r7, #12]
    1776:	3344      	adds	r3, #68	; 0x44
    1778:	001a      	movs	r2, r3
    177a:	2308      	movs	r3, #8
    177c:	18fb      	adds	r3, r7, r3
    177e:	781b      	ldrb	r3, [r3, #0]
    1780:	0019      	movs	r1, r3
    1782:	0010      	movs	r0, r2
    1784:	4b0d      	ldr	r3, [pc, #52]	; (17bc <spi_s_async_dev_rx+0x68>)
    1786:	4798      	blx	r3
	if (dev->char_size > 1) {
    1788:	687b      	ldr	r3, [r7, #4]
    178a:	791b      	ldrb	r3, [r3, #4]
    178c:	2b01      	cmp	r3, #1
    178e:	d909      	bls.n	17a4 <spi_s_async_dev_rx+0x50>
		ringbuffer_put(&spi->rx_rb, tmp.u8[1]);
    1790:	68fb      	ldr	r3, [r7, #12]
    1792:	3344      	adds	r3, #68	; 0x44
    1794:	001a      	movs	r2, r3
    1796:	2308      	movs	r3, #8
    1798:	18fb      	adds	r3, r7, r3
    179a:	785b      	ldrb	r3, [r3, #1]
    179c:	0019      	movs	r1, r3
    179e:	0010      	movs	r0, r2
    17a0:	4b06      	ldr	r3, [pc, #24]	; (17bc <spi_s_async_dev_rx+0x68>)
    17a2:	4798      	blx	r3
	}

	spi->callbacks.rx(spi);
    17a4:	68fb      	ldr	r3, [r7, #12]
    17a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    17a8:	68fa      	ldr	r2, [r7, #12]
    17aa:	0010      	movs	r0, r2
    17ac:	4798      	blx	r3
}
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	46bd      	mov	sp, r7
    17b2:	b004      	add	sp, #16
    17b4:	bd80      	pop	{r7, pc}
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	00003abd 	.word	0x00003abd
    17bc:	000020b1 	.word	0x000020b1

000017c0 <spi_s_async_dev_complete>:

static void spi_s_async_dev_complete(struct _spi_s_async_dev *dev)
{
    17c0:	b580      	push	{r7, lr}
    17c2:	b084      	sub	sp, #16
    17c4:	af00      	add	r7, sp, #0
    17c6:	6078      	str	r0, [r7, #4]
	struct spi_s_async_descriptor *spi = CONTAINER_OF(dev, struct spi_s_async_descriptor, dev);
    17c8:	687b      	ldr	r3, [r7, #4]
    17ca:	3b04      	subs	r3, #4
    17cc:	60fb      	str	r3, [r7, #12]

	spi->callbacks.complete(spi);
    17ce:	68fb      	ldr	r3, [r7, #12]
    17d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    17d2:	68fa      	ldr	r2, [r7, #12]
    17d4:	0010      	movs	r0, r2
    17d6:	4798      	blx	r3
}
    17d8:	46c0      	nop			; (mov r8, r8)
    17da:	46bd      	mov	sp, r7
    17dc:	b004      	add	sp, #16
    17de:	bd80      	pop	{r7, pc}

000017e0 <spi_s_async_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void spi_s_async_dev_error(struct _spi_s_async_dev *dev, int32_t status)
{
    17e0:	b580      	push	{r7, lr}
    17e2:	b084      	sub	sp, #16
    17e4:	af00      	add	r7, sp, #0
    17e6:	6078      	str	r0, [r7, #4]
    17e8:	6039      	str	r1, [r7, #0]
	struct spi_s_async_descriptor *spi = CONTAINER_OF(dev, struct spi_s_async_descriptor, dev);
    17ea:	687b      	ldr	r3, [r7, #4]
    17ec:	3b04      	subs	r3, #4
    17ee:	60fb      	str	r3, [r7, #12]
	_spi_s_async_enable_tx(dev, false);
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	2100      	movs	r1, #0
    17f4:	0018      	movs	r0, r3
    17f6:	4b0e      	ldr	r3, [pc, #56]	; (1830 <spi_s_async_dev_error+0x50>)
    17f8:	4798      	blx	r3
	_spi_s_async_enable_rx(dev, false);
    17fa:	687b      	ldr	r3, [r7, #4]
    17fc:	2100      	movs	r1, #0
    17fe:	0018      	movs	r0, r3
    1800:	4b0c      	ldr	r3, [pc, #48]	; (1834 <spi_s_async_dev_error+0x54>)
    1802:	4798      	blx	r3
	_spi_s_async_enable_ss_detect(dev, false);
    1804:	687b      	ldr	r3, [r7, #4]
    1806:	2100      	movs	r1, #0
    1808:	0018      	movs	r0, r3
    180a:	4b0b      	ldr	r3, [pc, #44]	; (1838 <spi_s_async_dev_error+0x58>)
    180c:	4798      	blx	r3

	spi->busy = 0;
    180e:	68fb      	ldr	r3, [r7, #12]
    1810:	2255      	movs	r2, #85	; 0x55
    1812:	5c99      	ldrb	r1, [r3, r2]
    1814:	2001      	movs	r0, #1
    1816:	4381      	bics	r1, r0
    1818:	5499      	strb	r1, [r3, r2]

	/* Invoke error callback */
	spi->callbacks.err(spi, status);
    181a:	68fb      	ldr	r3, [r7, #12]
    181c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    181e:	6839      	ldr	r1, [r7, #0]
    1820:	68fa      	ldr	r2, [r7, #12]
    1822:	0010      	movs	r0, r2
    1824:	4798      	blx	r3
}
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	46bd      	mov	sp, r7
    182a:	b004      	add	sp, #16
    182c:	bd80      	pop	{r7, pc}
    182e:	46c0      	nop			; (mov r8, r8)
    1830:	00003845 	.word	0x00003845
    1834:	000038e5 	.word	0x000038e5
    1838:	00003981 	.word	0x00003981

0000183c <_spi_s_async_io_write>:
 *  \retval 0 Success.
 *  \retval -1 Busy, transfer in progress.
 *  \retval -3 Parameter error.
 */
static int32_t _spi_s_async_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t size)
{
    183c:	b580      	push	{r7, lr}
    183e:	b086      	sub	sp, #24
    1840:	af00      	add	r7, sp, #0
    1842:	60f8      	str	r0, [r7, #12]
    1844:	60b9      	str	r1, [r7, #8]
    1846:	1dbb      	adds	r3, r7, #6
    1848:	801a      	strh	r2, [r3, #0]
	struct spi_s_async_descriptor *spi;
	volatile hal_atomic_t          flags;

	ASSERT(io);
    184a:	68fb      	ldr	r3, [r7, #12]
    184c:	1e5a      	subs	r2, r3, #1
    184e:	4193      	sbcs	r3, r2
    1850:	b2db      	uxtb	r3, r3
    1852:	4922      	ldr	r1, [pc, #136]	; (18dc <_spi_s_async_io_write+0xa0>)
    1854:	2288      	movs	r2, #136	; 0x88
    1856:	0018      	movs	r0, r3
    1858:	4b21      	ldr	r3, [pc, #132]	; (18e0 <_spi_s_async_io_write+0xa4>)
    185a:	4798      	blx	r3

	if (size == 0) {
    185c:	1dbb      	adds	r3, r7, #6
    185e:	881b      	ldrh	r3, [r3, #0]
    1860:	2b00      	cmp	r3, #0
    1862:	d101      	bne.n	1868 <_spi_s_async_io_write+0x2c>
		return ERR_NONE;
    1864:	2300      	movs	r3, #0
    1866:	e035      	b.n	18d4 <_spi_s_async_io_write+0x98>
	}

	spi = CONTAINER_OF(io, struct spi_s_async_descriptor, io);
    1868:	68fb      	ldr	r3, [r7, #12]
    186a:	3b24      	subs	r3, #36	; 0x24
    186c:	617b      	str	r3, [r7, #20]

	atomic_enter_critical(&flags);
    186e:	2310      	movs	r3, #16
    1870:	18fb      	adds	r3, r7, r3
    1872:	0018      	movs	r0, r3
    1874:	4b1b      	ldr	r3, [pc, #108]	; (18e4 <_spi_s_async_io_write+0xa8>)
    1876:	4798      	blx	r3
	if (spi->busy) {
    1878:	697b      	ldr	r3, [r7, #20]
    187a:	2255      	movs	r2, #85	; 0x55
    187c:	5c9b      	ldrb	r3, [r3, r2]
    187e:	2201      	movs	r2, #1
    1880:	4013      	ands	r3, r2
    1882:	b2db      	uxtb	r3, r3
    1884:	2b00      	cmp	r3, #0
    1886:	d007      	beq.n	1898 <_spi_s_async_io_write+0x5c>
		atomic_leave_critical(&flags);
    1888:	2310      	movs	r3, #16
    188a:	18fb      	adds	r3, r7, r3
    188c:	0018      	movs	r0, r3
    188e:	4b16      	ldr	r3, [pc, #88]	; (18e8 <_spi_s_async_io_write+0xac>)
    1890:	4798      	blx	r3
		return ERR_BUSY;
    1892:	2304      	movs	r3, #4
    1894:	425b      	negs	r3, r3
    1896:	e01d      	b.n	18d4 <_spi_s_async_io_write+0x98>
	}
	spi->busy = 1;
    1898:	697b      	ldr	r3, [r7, #20]
    189a:	2255      	movs	r2, #85	; 0x55
    189c:	5c99      	ldrb	r1, [r3, r2]
    189e:	2001      	movs	r0, #1
    18a0:	4301      	orrs	r1, r0
    18a2:	5499      	strb	r1, [r3, r2]
	atomic_leave_critical(&flags);
    18a4:	2310      	movs	r3, #16
    18a6:	18fb      	adds	r3, r7, r3
    18a8:	0018      	movs	r0, r3
    18aa:	4b0f      	ldr	r3, [pc, #60]	; (18e8 <_spi_s_async_io_write+0xac>)
    18ac:	4798      	blx	r3

	spi->txbuf  = (uint8_t *)buf;
    18ae:	697b      	ldr	r3, [r7, #20]
    18b0:	68ba      	ldr	r2, [r7, #8]
    18b2:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->txcnt  = 0;
    18b4:	697b      	ldr	r3, [r7, #20]
    18b6:	2242      	movs	r2, #66	; 0x42
    18b8:	2100      	movs	r1, #0
    18ba:	5299      	strh	r1, [r3, r2]
	spi->txsize = size;
    18bc:	697b      	ldr	r3, [r7, #20]
    18be:	1dba      	adds	r2, r7, #6
    18c0:	2140      	movs	r1, #64	; 0x40
    18c2:	8812      	ldrh	r2, [r2, #0]
    18c4:	525a      	strh	r2, [r3, r1]
	_spi_s_async_enable_tx(&spi->dev, true);
    18c6:	697b      	ldr	r3, [r7, #20]
    18c8:	3304      	adds	r3, #4
    18ca:	2101      	movs	r1, #1
    18cc:	0018      	movs	r0, r3
    18ce:	4b07      	ldr	r3, [pc, #28]	; (18ec <_spi_s_async_io_write+0xb0>)
    18d0:	4798      	blx	r3

	return ERR_NONE;
    18d2:	2300      	movs	r3, #0
}
    18d4:	0018      	movs	r0, r3
    18d6:	46bd      	mov	sp, r7
    18d8:	b006      	add	sp, #24
    18da:	bd80      	pop	{r7, pc}
    18dc:	00004634 	.word	0x00004634
    18e0:	00001ec1 	.word	0x00001ec1
    18e4:	00000e05 	.word	0x00000e05
    18e8:	00000e27 	.word	0x00000e27
    18ec:	00003845 	.word	0x00003845

000018f0 <_spi_s_async_io_read>:
 *  \return Read result.
 *  \retval n Number of characters read.
 *  \retval <0 Error.
 */
static int32_t _spi_s_async_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t size)
{
    18f0:	b580      	push	{r7, lr}
    18f2:	b08a      	sub	sp, #40	; 0x28
    18f4:	af00      	add	r7, sp, #0
    18f6:	60f8      	str	r0, [r7, #12]
    18f8:	60b9      	str	r1, [r7, #8]
    18fa:	1dbb      	adds	r3, r7, #6
    18fc:	801a      	strh	r2, [r3, #0]
	struct spi_s_async_descriptor *spi;
	uint32_t                       n_bytes, i;
	uint8_t *                      p = (uint8_t *)buf;
    18fe:	68bb      	ldr	r3, [r7, #8]
    1900:	61fb      	str	r3, [r7, #28]

	ASSERT(io);
    1902:	68fb      	ldr	r3, [r7, #12]
    1904:	1e5a      	subs	r2, r3, #1
    1906:	4193      	sbcs	r3, r2
    1908:	b2db      	uxtb	r3, r3
    190a:	4935      	ldr	r1, [pc, #212]	; (19e0 <_spi_s_async_io_read+0xf0>)
    190c:	22b6      	movs	r2, #182	; 0xb6
    190e:	0018      	movs	r0, r3
    1910:	4b34      	ldr	r3, [pc, #208]	; (19e4 <_spi_s_async_io_read+0xf4>)
    1912:	4798      	blx	r3

	if (size == 0) {
    1914:	1dbb      	adds	r3, r7, #6
    1916:	881b      	ldrh	r3, [r3, #0]
    1918:	2b00      	cmp	r3, #0
    191a:	d101      	bne.n	1920 <_spi_s_async_io_read+0x30>
		return 0;
    191c:	2300      	movs	r3, #0
    191e:	e05b      	b.n	19d8 <_spi_s_async_io_read+0xe8>
	}

	spi = CONTAINER_OF(io, struct spi_s_async_descriptor, io);
    1920:	68fb      	ldr	r3, [r7, #12]
    1922:	3b24      	subs	r3, #36	; 0x24
    1924:	617b      	str	r3, [r7, #20]

	n_bytes = ringbuffer_num(&spi->rx_rb);
    1926:	697b      	ldr	r3, [r7, #20]
    1928:	3344      	adds	r3, #68	; 0x44
    192a:	0018      	movs	r0, r3
    192c:	4b2e      	ldr	r3, [pc, #184]	; (19e8 <_spi_s_async_io_read+0xf8>)
    192e:	4798      	blx	r3
    1930:	0003      	movs	r3, r0
    1932:	627b      	str	r3, [r7, #36]	; 0x24
	if (n_bytes == 0) {
    1934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1936:	2b00      	cmp	r3, #0
    1938:	d101      	bne.n	193e <_spi_s_async_io_read+0x4e>
		return 0;
    193a:	2300      	movs	r3, #0
    193c:	e04c      	b.n	19d8 <_spi_s_async_io_read+0xe8>
	} else {
		uint16_t n = size;
    193e:	231a      	movs	r3, #26
    1940:	18fb      	adds	r3, r7, r3
    1942:	1dba      	adds	r2, r7, #6
    1944:	8812      	ldrh	r2, [r2, #0]
    1946:	801a      	strh	r2, [r3, #0]

		switch (spi->dev.char_size) {
    1948:	697b      	ldr	r3, [r7, #20]
    194a:	7a1b      	ldrb	r3, [r3, #8]
    194c:	2b02      	cmp	r3, #2
    194e:	d000      	beq.n	1952 <_spi_s_async_io_read+0x62>
		case 2:
			n <<= 1;
			break;
		default:
			break;
    1950:	e007      	b.n	1962 <_spi_s_async_io_read+0x72>
			n <<= 1;
    1952:	231a      	movs	r3, #26
    1954:	18fa      	adds	r2, r7, r3
    1956:	231a      	movs	r3, #26
    1958:	18fb      	adds	r3, r7, r3
    195a:	881b      	ldrh	r3, [r3, #0]
    195c:	18db      	adds	r3, r3, r3
    195e:	8013      	strh	r3, [r2, #0]
			break;
    1960:	46c0      	nop			; (mov r8, r8)
		}
		if (n_bytes > n) {
    1962:	231a      	movs	r3, #26
    1964:	18fb      	adds	r3, r7, r3
    1966:	881a      	ldrh	r2, [r3, #0]
    1968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    196a:	429a      	cmp	r2, r3
    196c:	d203      	bcs.n	1976 <_spi_s_async_io_read+0x86>
			n_bytes = n;
    196e:	231a      	movs	r3, #26
    1970:	18fb      	adds	r3, r7, r3
    1972:	881b      	ldrh	r3, [r3, #0]
    1974:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	if (p == NULL) {
    1976:	69fb      	ldr	r3, [r7, #28]
    1978:	2b00      	cmp	r3, #0
    197a:	d112      	bne.n	19a2 <_spi_s_async_io_read+0xb2>
		uint8_t tmp;

		for (i = 0; i < n_bytes; i++) {
    197c:	2300      	movs	r3, #0
    197e:	623b      	str	r3, [r7, #32]
    1980:	e00a      	b.n	1998 <_spi_s_async_io_read+0xa8>
			ringbuffer_get(&spi->rx_rb, &tmp);
    1982:	697b      	ldr	r3, [r7, #20]
    1984:	3344      	adds	r3, #68	; 0x44
    1986:	2213      	movs	r2, #19
    1988:	18ba      	adds	r2, r7, r2
    198a:	0011      	movs	r1, r2
    198c:	0018      	movs	r0, r3
    198e:	4b17      	ldr	r3, [pc, #92]	; (19ec <_spi_s_async_io_read+0xfc>)
    1990:	4798      	blx	r3
		for (i = 0; i < n_bytes; i++) {
    1992:	6a3b      	ldr	r3, [r7, #32]
    1994:	3301      	adds	r3, #1
    1996:	623b      	str	r3, [r7, #32]
    1998:	6a3a      	ldr	r2, [r7, #32]
    199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    199c:	429a      	cmp	r2, r3
    199e:	d3f0      	bcc.n	1982 <_spi_s_async_io_read+0x92>
    19a0:	e012      	b.n	19c8 <_spi_s_async_io_read+0xd8>
		}
	} else {
		for (i = 0; i < n_bytes; i++) {
    19a2:	2300      	movs	r3, #0
    19a4:	623b      	str	r3, [r7, #32]
    19a6:	e00b      	b.n	19c0 <_spi_s_async_io_read+0xd0>
			ringbuffer_get(&spi->rx_rb, p++);
    19a8:	697b      	ldr	r3, [r7, #20]
    19aa:	3344      	adds	r3, #68	; 0x44
    19ac:	0018      	movs	r0, r3
    19ae:	69fb      	ldr	r3, [r7, #28]
    19b0:	1c5a      	adds	r2, r3, #1
    19b2:	61fa      	str	r2, [r7, #28]
    19b4:	0019      	movs	r1, r3
    19b6:	4b0d      	ldr	r3, [pc, #52]	; (19ec <_spi_s_async_io_read+0xfc>)
    19b8:	4798      	blx	r3
		for (i = 0; i < n_bytes; i++) {
    19ba:	6a3b      	ldr	r3, [r7, #32]
    19bc:	3301      	adds	r3, #1
    19be:	623b      	str	r3, [r7, #32]
    19c0:	6a3a      	ldr	r2, [r7, #32]
    19c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19c4:	429a      	cmp	r2, r3
    19c6:	d3ef      	bcc.n	19a8 <_spi_s_async_io_read+0xb8>
		}
	}

	switch (spi->dev.char_size) {
    19c8:	697b      	ldr	r3, [r7, #20]
    19ca:	7a1b      	ldrb	r3, [r3, #8]
    19cc:	2b02      	cmp	r3, #2
    19ce:	d102      	bne.n	19d6 <_spi_s_async_io_read+0xe6>
	case 2:
		return (int32_t)(n_bytes >> 1);
    19d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19d2:	085b      	lsrs	r3, r3, #1
    19d4:	e000      	b.n	19d8 <_spi_s_async_io_read+0xe8>
	default:
		return (int32_t)n_bytes;
    19d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
}
    19d8:	0018      	movs	r0, r3
    19da:	46bd      	mov	sp, r7
    19dc:	b00a      	add	sp, #40	; 0x28
    19de:	bd80      	pop	{r7, pc}
    19e0:	00004634 	.word	0x00004634
    19e4:	00001ec1 	.word	0x00001ec1
    19e8:	00002125 	.word	0x00002125
    19ec:	0000203d 	.word	0x0000203d

000019f0 <spi_s_async_dummy_func>:
 * \brief A dummy function to be called when SPI callbacks are not registered
 * \param[in,out] spi Pointer to the HAL SPI instance.
 * \param[in] param Parameter.
 */
static void spi_s_async_dummy_func(struct spi_s_async_descriptor *spi, uint32_t param)
{
    19f0:	b580      	push	{r7, lr}
    19f2:	b082      	sub	sp, #8
    19f4:	af00      	add	r7, sp, #0
    19f6:	6078      	str	r0, [r7, #4]
    19f8:	6039      	str	r1, [r7, #0]
	(void)spi;
	(void)param;
}
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	46bd      	mov	sp, r7
    19fe:	b002      	add	sp, #8
    1a00:	bd80      	pop	{r7, pc}
	...

00001a04 <spi_s_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_s_async_hpl_interface *)func;
}

int32_t spi_s_async_init(struct spi_s_async_descriptor *spi, void *const hw, uint8_t *const rxbuf, int16_t bufsize)
{
    1a04:	b580      	push	{r7, lr}
    1a06:	b086      	sub	sp, #24
    1a08:	af00      	add	r7, sp, #0
    1a0a:	60f8      	str	r0, [r7, #12]
    1a0c:	60b9      	str	r1, [r7, #8]
    1a0e:	607a      	str	r2, [r7, #4]
    1a10:	001a      	movs	r2, r3
    1a12:	1cbb      	adds	r3, r7, #2
    1a14:	801a      	strh	r2, [r3, #0]
	int32_t rc;
	ASSERT(spi && hw && rxbuf && bufsize);
    1a16:	68fb      	ldr	r3, [r7, #12]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d00c      	beq.n	1a36 <spi_s_async_init+0x32>
    1a1c:	68bb      	ldr	r3, [r7, #8]
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d009      	beq.n	1a36 <spi_s_async_init+0x32>
    1a22:	687b      	ldr	r3, [r7, #4]
    1a24:	2b00      	cmp	r3, #0
    1a26:	d006      	beq.n	1a36 <spi_s_async_init+0x32>
    1a28:	1cbb      	adds	r3, r7, #2
    1a2a:	2200      	movs	r2, #0
    1a2c:	5e9b      	ldrsh	r3, [r3, r2]
    1a2e:	2b00      	cmp	r3, #0
    1a30:	d001      	beq.n	1a36 <spi_s_async_init+0x32>
    1a32:	2301      	movs	r3, #1
    1a34:	e000      	b.n	1a38 <spi_s_async_init+0x34>
    1a36:	2300      	movs	r3, #0
    1a38:	1c1a      	adds	r2, r3, #0
    1a3a:	2301      	movs	r3, #1
    1a3c:	4013      	ands	r3, r2
    1a3e:	b2db      	uxtb	r3, r3
    1a40:	4931      	ldr	r1, [pc, #196]	; (1b08 <spi_s_async_init+0x104>)
    1a42:	22fb      	movs	r2, #251	; 0xfb
    1a44:	0018      	movs	r0, r3
    1a46:	4b31      	ldr	r3, [pc, #196]	; (1b0c <spi_s_async_init+0x108>)
    1a48:	4798      	blx	r3

	rc = ringbuffer_init(&spi->rx_rb, rxbuf, bufsize);
    1a4a:	68fb      	ldr	r3, [r7, #12]
    1a4c:	3344      	adds	r3, #68	; 0x44
    1a4e:	0018      	movs	r0, r3
    1a50:	1cbb      	adds	r3, r7, #2
    1a52:	2200      	movs	r2, #0
    1a54:	5e9a      	ldrsh	r2, [r3, r2]
    1a56:	687b      	ldr	r3, [r7, #4]
    1a58:	0019      	movs	r1, r3
    1a5a:	4b2d      	ldr	r3, [pc, #180]	; (1b10 <spi_s_async_init+0x10c>)
    1a5c:	4798      	blx	r3
    1a5e:	0003      	movs	r3, r0
    1a60:	617b      	str	r3, [r7, #20]
	if (rc < 0) {
    1a62:	697b      	ldr	r3, [r7, #20]
    1a64:	2b00      	cmp	r3, #0
    1a66:	da01      	bge.n	1a6c <spi_s_async_init+0x68>
		return rc;
    1a68:	697b      	ldr	r3, [r7, #20]
    1a6a:	e048      	b.n	1afe <spi_s_async_init+0xfa>
	}
	rc = _spi_s_async_init(&spi->dev, hw);
    1a6c:	68fb      	ldr	r3, [r7, #12]
    1a6e:	3304      	adds	r3, #4
    1a70:	68ba      	ldr	r2, [r7, #8]
    1a72:	0011      	movs	r1, r2
    1a74:	0018      	movs	r0, r3
    1a76:	4b27      	ldr	r3, [pc, #156]	; (1b14 <spi_s_async_init+0x110>)
    1a78:	4798      	blx	r3
    1a7a:	0003      	movs	r3, r0
    1a7c:	617b      	str	r3, [r7, #20]

	if (rc < 0) {
    1a7e:	697b      	ldr	r3, [r7, #20]
    1a80:	2b00      	cmp	r3, #0
    1a82:	da01      	bge.n	1a88 <spi_s_async_init+0x84>
		return rc;
    1a84:	697b      	ldr	r3, [r7, #20]
    1a86:	e03a      	b.n	1afe <spi_s_async_init+0xfa>
	}
	_spi_s_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (const FUNC_PTR)spi_s_async_dev_tx);
    1a88:	68fb      	ldr	r3, [r7, #12]
    1a8a:	3304      	adds	r3, #4
    1a8c:	4a22      	ldr	r2, [pc, #136]	; (1b18 <spi_s_async_init+0x114>)
    1a8e:	2100      	movs	r1, #0
    1a90:	0018      	movs	r0, r3
    1a92:	4b22      	ldr	r3, [pc, #136]	; (1b1c <spi_s_async_init+0x118>)
    1a94:	4798      	blx	r3
	_spi_s_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (const FUNC_PTR)spi_s_async_dev_rx);
    1a96:	68fb      	ldr	r3, [r7, #12]
    1a98:	3304      	adds	r3, #4
    1a9a:	4a21      	ldr	r2, [pc, #132]	; (1b20 <spi_s_async_init+0x11c>)
    1a9c:	2101      	movs	r1, #1
    1a9e:	0018      	movs	r0, r3
    1aa0:	4b1e      	ldr	r3, [pc, #120]	; (1b1c <spi_s_async_init+0x118>)
    1aa2:	4798      	blx	r3
	_spi_s_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (const FUNC_PTR)spi_s_async_dev_complete);
    1aa4:	68fb      	ldr	r3, [r7, #12]
    1aa6:	3304      	adds	r3, #4
    1aa8:	4a1e      	ldr	r2, [pc, #120]	; (1b24 <spi_s_async_init+0x120>)
    1aaa:	2102      	movs	r1, #2
    1aac:	0018      	movs	r0, r3
    1aae:	4b1b      	ldr	r3, [pc, #108]	; (1b1c <spi_s_async_init+0x118>)
    1ab0:	4798      	blx	r3
	_spi_s_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (const FUNC_PTR)spi_s_async_dev_error);
    1ab2:	68fb      	ldr	r3, [r7, #12]
    1ab4:	3304      	adds	r3, #4
    1ab6:	4a1c      	ldr	r2, [pc, #112]	; (1b28 <spi_s_async_init+0x124>)
    1ab8:	2103      	movs	r1, #3
    1aba:	0018      	movs	r0, r3
    1abc:	4b17      	ldr	r3, [pc, #92]	; (1b1c <spi_s_async_init+0x118>)
    1abe:	4798      	blx	r3

	spi->enabled = 0;
    1ac0:	68fb      	ldr	r3, [r7, #12]
    1ac2:	2255      	movs	r2, #85	; 0x55
    1ac4:	5c99      	ldrb	r1, [r3, r2]
    1ac6:	2002      	movs	r0, #2
    1ac8:	4381      	bics	r1, r0
    1aca:	5499      	strb	r1, [r3, r2]
	spi->busy    = 0;
    1acc:	68fb      	ldr	r3, [r7, #12]
    1ace:	2255      	movs	r2, #85	; 0x55
    1ad0:	5c99      	ldrb	r1, [r3, r2]
    1ad2:	2001      	movs	r0, #1
    1ad4:	4381      	bics	r1, r0
    1ad6:	5499      	strb	r1, [r3, r2]

	spi->callbacks.err      = (spi_s_async_cb_error_t)spi_s_async_dummy_func;
    1ad8:	68fb      	ldr	r3, [r7, #12]
    1ada:	4a14      	ldr	r2, [pc, #80]	; (1b2c <spi_s_async_init+0x128>)
    1adc:	639a      	str	r2, [r3, #56]	; 0x38
	spi->callbacks.complete = (spi_s_async_cb_xfer_t)spi_s_async_dummy_func;
    1ade:	68fb      	ldr	r3, [r7, #12]
    1ae0:	4a12      	ldr	r2, [pc, #72]	; (1b2c <spi_s_async_init+0x128>)
    1ae2:	62da      	str	r2, [r3, #44]	; 0x2c
	spi->callbacks.tx       = (spi_s_async_cb_xfer_t)spi_s_async_dummy_func;
    1ae4:	68fb      	ldr	r3, [r7, #12]
    1ae6:	4a11      	ldr	r2, [pc, #68]	; (1b2c <spi_s_async_init+0x128>)
    1ae8:	631a      	str	r2, [r3, #48]	; 0x30
	spi->callbacks.rx       = (spi_s_async_cb_xfer_t)spi_s_async_dummy_func;
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	4a0f      	ldr	r2, [pc, #60]	; (1b2c <spi_s_async_init+0x128>)
    1aee:	635a      	str	r2, [r3, #52]	; 0x34

	spi->io.read  = _spi_s_async_io_read;
    1af0:	68fb      	ldr	r3, [r7, #12]
    1af2:	4a0f      	ldr	r2, [pc, #60]	; (1b30 <spi_s_async_init+0x12c>)
    1af4:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_s_async_io_write;
    1af6:	68fb      	ldr	r3, [r7, #12]
    1af8:	4a0e      	ldr	r2, [pc, #56]	; (1b34 <spi_s_async_init+0x130>)
    1afa:	625a      	str	r2, [r3, #36]	; 0x24

	return ERR_NONE;
    1afc:	2300      	movs	r3, #0
}
    1afe:	0018      	movs	r0, r3
    1b00:	46bd      	mov	sp, r7
    1b02:	b006      	add	sp, #24
    1b04:	bd80      	pop	{r7, pc}
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	00004634 	.word	0x00004634
    1b0c:	00001ec1 	.word	0x00001ec1
    1b10:	00001fc9 	.word	0x00001fc9
    1b14:	00003709 	.word	0x00003709
    1b18:	000016b5 	.word	0x000016b5
    1b1c:	00003b7d 	.word	0x00003b7d
    1b20:	00001755 	.word	0x00001755
    1b24:	000017c1 	.word	0x000017c1
    1b28:	000017e1 	.word	0x000017e1
    1b2c:	000019f1 	.word	0x000019f1
    1b30:	000018f1 	.word	0x000018f1
    1b34:	0000183d 	.word	0x0000183d

00001b38 <spi_s_async_enable>:
	_spi_s_async_enable_tx(&spi->dev, false);
	_spi_s_async_deinit(&spi->dev);
}

void spi_s_async_enable(struct spi_s_async_descriptor *spi)
{
    1b38:	b580      	push	{r7, lr}
    1b3a:	b082      	sub	sp, #8
    1b3c:	af00      	add	r7, sp, #0
    1b3e:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    1b40:	687b      	ldr	r3, [r7, #4]
    1b42:	1e5a      	subs	r2, r3, #1
    1b44:	4193      	sbcs	r3, r2
    1b46:	b2d8      	uxtb	r0, r3
    1b48:	2392      	movs	r3, #146	; 0x92
    1b4a:	005a      	lsls	r2, r3, #1
    1b4c:	4b15      	ldr	r3, [pc, #84]	; (1ba4 <spi_s_async_enable+0x6c>)
    1b4e:	0019      	movs	r1, r3
    1b50:	4b15      	ldr	r3, [pc, #84]	; (1ba8 <spi_s_async_enable+0x70>)
    1b52:	4798      	blx	r3

	if (spi->enabled) {
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	2255      	movs	r2, #85	; 0x55
    1b58:	5c9b      	ldrb	r3, [r3, r2]
    1b5a:	2202      	movs	r2, #2
    1b5c:	4013      	ands	r3, r2
    1b5e:	b2db      	uxtb	r3, r3
    1b60:	2b00      	cmp	r3, #0
    1b62:	d119      	bne.n	1b98 <spi_s_async_enable+0x60>
		return;
	}
	if (_spi_s_async_enable(&spi->dev) != 0) {
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	3304      	adds	r3, #4
    1b68:	0018      	movs	r0, r3
    1b6a:	4b10      	ldr	r3, [pc, #64]	; (1bac <spi_s_async_enable+0x74>)
    1b6c:	4798      	blx	r3
    1b6e:	1e03      	subs	r3, r0, #0
    1b70:	d114      	bne.n	1b9c <spi_s_async_enable+0x64>
		return;
	}

	spi->enabled = 1;
    1b72:	687b      	ldr	r3, [r7, #4]
    1b74:	2255      	movs	r2, #85	; 0x55
    1b76:	5c99      	ldrb	r1, [r3, r2]
    1b78:	2002      	movs	r0, #2
    1b7a:	4301      	orrs	r1, r0
    1b7c:	5499      	strb	r1, [r3, r2]
	_spi_s_async_enable_rx(&spi->dev, true);
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	3304      	adds	r3, #4
    1b82:	2101      	movs	r1, #1
    1b84:	0018      	movs	r0, r3
    1b86:	4b0a      	ldr	r3, [pc, #40]	; (1bb0 <spi_s_async_enable+0x78>)
    1b88:	4798      	blx	r3
	_spi_s_async_enable_ss_detect(&spi->dev, true);
    1b8a:	687b      	ldr	r3, [r7, #4]
    1b8c:	3304      	adds	r3, #4
    1b8e:	2101      	movs	r1, #1
    1b90:	0018      	movs	r0, r3
    1b92:	4b08      	ldr	r3, [pc, #32]	; (1bb4 <spi_s_async_enable+0x7c>)
    1b94:	4798      	blx	r3
    1b96:	e002      	b.n	1b9e <spi_s_async_enable+0x66>
		return;
    1b98:	46c0      	nop			; (mov r8, r8)
    1b9a:	e000      	b.n	1b9e <spi_s_async_enable+0x66>
		return;
    1b9c:	46c0      	nop			; (mov r8, r8)
}
    1b9e:	46bd      	mov	sp, r7
    1ba0:	b002      	add	sp, #8
    1ba2:	bd80      	pop	{r7, pc}
    1ba4:	00004634 	.word	0x00004634
    1ba8:	00001ec1 	.word	0x00001ec1
    1bac:	00003781 	.word	0x00003781
    1bb0:	000038e5 	.word	0x000038e5
    1bb4:	00003981 	.word	0x00003981

00001bb8 <spi_s_async_register_callback>:
	return spi->busy ? ERR_BUSY : spi->error;
}

void spi_s_async_register_callback(struct spi_s_async_descriptor *spi, const enum spi_s_async_cb_type type,
                                   const FUNC_PTR func)
{
    1bb8:	b580      	push	{r7, lr}
    1bba:	b086      	sub	sp, #24
    1bbc:	af00      	add	r7, sp, #0
    1bbe:	60f8      	str	r0, [r7, #12]
    1bc0:	607a      	str	r2, [r7, #4]
    1bc2:	230b      	movs	r3, #11
    1bc4:	18fb      	adds	r3, r7, r3
    1bc6:	1c0a      	adds	r2, r1, #0
    1bc8:	701a      	strb	r2, [r3, #0]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)spi_s_async_dummy_func : (FUNC_PTR)func;
    1bca:	687b      	ldr	r3, [r7, #4]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d001      	beq.n	1bd4 <spi_s_async_register_callback+0x1c>
    1bd0:	687b      	ldr	r3, [r7, #4]
    1bd2:	e000      	b.n	1bd6 <spi_s_async_register_callback+0x1e>
    1bd4:	4b1b      	ldr	r3, [pc, #108]	; (1c44 <spi_s_async_register_callback+0x8c>)
    1bd6:	617b      	str	r3, [r7, #20]

	ASSERT(spi);
    1bd8:	68fb      	ldr	r3, [r7, #12]
    1bda:	1e5a      	subs	r2, r3, #1
    1bdc:	4193      	sbcs	r3, r2
    1bde:	b2d8      	uxtb	r0, r3
    1be0:	23ba      	movs	r3, #186	; 0xba
    1be2:	005a      	lsls	r2, r3, #1
    1be4:	4b18      	ldr	r3, [pc, #96]	; (1c48 <spi_s_async_register_callback+0x90>)
    1be6:	0019      	movs	r1, r3
    1be8:	4b18      	ldr	r3, [pc, #96]	; (1c4c <spi_s_async_register_callback+0x94>)
    1bea:	4798      	blx	r3

	switch (type) {
    1bec:	230b      	movs	r3, #11
    1bee:	18fb      	adds	r3, r7, r3
    1bf0:	781b      	ldrb	r3, [r3, #0]
    1bf2:	2b01      	cmp	r3, #1
    1bf4:	d00c      	beq.n	1c10 <spi_s_async_register_callback+0x58>
    1bf6:	dc02      	bgt.n	1bfe <spi_s_async_register_callback+0x46>
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d005      	beq.n	1c08 <spi_s_async_register_callback+0x50>
	case SPI_S_CB_ERROR:
		spi->callbacks.err = (spi_s_async_cb_error_t)f;
		_spi_s_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
		break;
	default:
		break;
    1bfc:	e01e      	b.n	1c3c <spi_s_async_register_callback+0x84>
	switch (type) {
    1bfe:	2b02      	cmp	r3, #2
    1c00:	d00a      	beq.n	1c18 <spi_s_async_register_callback+0x60>
    1c02:	2b03      	cmp	r3, #3
    1c04:	d00c      	beq.n	1c20 <spi_s_async_register_callback+0x68>
		break;
    1c06:	e019      	b.n	1c3c <spi_s_async_register_callback+0x84>
		spi->callbacks.tx = (spi_s_async_cb_xfer_t)f;
    1c08:	68fb      	ldr	r3, [r7, #12]
    1c0a:	697a      	ldr	r2, [r7, #20]
    1c0c:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    1c0e:	e015      	b.n	1c3c <spi_s_async_register_callback+0x84>
		spi->callbacks.rx = (spi_s_async_cb_xfer_t)f;
    1c10:	68fb      	ldr	r3, [r7, #12]
    1c12:	697a      	ldr	r2, [r7, #20]
    1c14:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    1c16:	e011      	b.n	1c3c <spi_s_async_register_callback+0x84>
		spi->callbacks.complete = (spi_s_async_cb_xfer_t)f;
    1c18:	68fb      	ldr	r3, [r7, #12]
    1c1a:	697a      	ldr	r2, [r7, #20]
    1c1c:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
    1c1e:	e00d      	b.n	1c3c <spi_s_async_register_callback+0x84>
		spi->callbacks.err = (spi_s_async_cb_error_t)f;
    1c20:	68fb      	ldr	r3, [r7, #12]
    1c22:	697a      	ldr	r2, [r7, #20]
    1c24:	639a      	str	r2, [r3, #56]	; 0x38
		_spi_s_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    1c26:	68fb      	ldr	r3, [r7, #12]
    1c28:	1d18      	adds	r0, r3, #4
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	1e5a      	subs	r2, r3, #1
    1c2e:	4193      	sbcs	r3, r2
    1c30:	b2db      	uxtb	r3, r3
    1c32:	001a      	movs	r2, r3
    1c34:	2103      	movs	r1, #3
    1c36:	4b06      	ldr	r3, [pc, #24]	; (1c50 <spi_s_async_register_callback+0x98>)
    1c38:	4798      	blx	r3
		break;
    1c3a:	46c0      	nop			; (mov r8, r8)
	}
}
    1c3c:	46c0      	nop			; (mov r8, r8)
    1c3e:	46bd      	mov	sp, r7
    1c40:	b006      	add	sp, #24
    1c42:	bd80      	pop	{r7, pc}
    1c44:	000019f1 	.word	0x000019f1
    1c48:	00004634 	.word	0x00004634
    1c4c:	00001ec1 	.word	0x00001ec1
    1c50:	00003c09 	.word	0x00003c09

00001c54 <spi_s_async_get_io_descriptor>:

	spi->busy = 0;
}

int32_t spi_s_async_get_io_descriptor(struct spi_s_async_descriptor *spi, struct io_descriptor **io)
{
    1c54:	b580      	push	{r7, lr}
    1c56:	b082      	sub	sp, #8
    1c58:	af00      	add	r7, sp, #0
    1c5a:	6078      	str	r0, [r7, #4]
    1c5c:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d004      	beq.n	1c6e <spi_s_async_get_io_descriptor+0x1a>
    1c64:	683b      	ldr	r3, [r7, #0]
    1c66:	2b00      	cmp	r3, #0
    1c68:	d001      	beq.n	1c6e <spi_s_async_get_io_descriptor+0x1a>
    1c6a:	2301      	movs	r3, #1
    1c6c:	e000      	b.n	1c70 <spi_s_async_get_io_descriptor+0x1c>
    1c6e:	2300      	movs	r3, #0
    1c70:	1c1a      	adds	r2, r3, #0
    1c72:	2301      	movs	r3, #1
    1c74:	4013      	ands	r3, r2
    1c76:	b2d8      	uxtb	r0, r3
    1c78:	23cf      	movs	r3, #207	; 0xcf
    1c7a:	005a      	lsls	r2, r3, #1
    1c7c:	4b06      	ldr	r3, [pc, #24]	; (1c98 <spi_s_async_get_io_descriptor+0x44>)
    1c7e:	0019      	movs	r1, r3
    1c80:	4b06      	ldr	r3, [pc, #24]	; (1c9c <spi_s_async_get_io_descriptor+0x48>)
    1c82:	4798      	blx	r3
	*io = &spi->io;
    1c84:	687b      	ldr	r3, [r7, #4]
    1c86:	3324      	adds	r3, #36	; 0x24
    1c88:	001a      	movs	r2, r3
    1c8a:	683b      	ldr	r3, [r7, #0]
    1c8c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    1c8e:	2300      	movs	r3, #0
}
    1c90:	0018      	movs	r0, r3
    1c92:	46bd      	mov	sp, r7
    1c94:	b002      	add	sp, #8
    1c96:	bd80      	pop	{r7, pc}
    1c98:	00004634 	.word	0x00004634
    1c9c:	00001ec1 	.word	0x00001ec1

00001ca0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    1ca0:	b580      	push	{r7, lr}
    1ca2:	b082      	sub	sp, #8
    1ca4:	af00      	add	r7, sp, #0
    1ca6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	681b      	ldr	r3, [r3, #0]
}
    1cac:	0018      	movs	r0, r3
    1cae:	46bd      	mov	sp, r7
    1cb0:	b002      	add	sp, #8
    1cb2:	bd80      	pop	{r7, pc}

00001cb4 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    1cb4:	b580      	push	{r7, lr}
    1cb6:	b082      	sub	sp, #8
    1cb8:	af00      	add	r7, sp, #0
    1cba:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    1cbc:	687b      	ldr	r3, [r7, #4]
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d002      	beq.n	1cc8 <list_get_next_element+0x14>
    1cc2:	687b      	ldr	r3, [r7, #4]
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	e000      	b.n	1cca <list_get_next_element+0x16>
    1cc8:	2300      	movs	r3, #0
}
    1cca:	0018      	movs	r0, r3
    1ccc:	46bd      	mov	sp, r7
    1cce:	b002      	add	sp, #8
    1cd0:	bd80      	pop	{r7, pc}
	...

00001cd4 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    1cd4:	b580      	push	{r7, lr}
    1cd6:	b084      	sub	sp, #16
    1cd8:	af00      	add	r7, sp, #0
    1cda:	60f8      	str	r0, [r7, #12]
    1cdc:	60b9      	str	r1, [r7, #8]
    1cde:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1ce0:	68fb      	ldr	r3, [r7, #12]
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d004      	beq.n	1cf0 <timer_init+0x1c>
    1ce6:	68bb      	ldr	r3, [r7, #8]
    1ce8:	2b00      	cmp	r3, #0
    1cea:	d001      	beq.n	1cf0 <timer_init+0x1c>
    1cec:	2301      	movs	r3, #1
    1cee:	e000      	b.n	1cf2 <timer_init+0x1e>
    1cf0:	2300      	movs	r3, #0
    1cf2:	1c1a      	adds	r2, r3, #0
    1cf4:	2301      	movs	r3, #1
    1cf6:	4013      	ands	r3, r2
    1cf8:	b2db      	uxtb	r3, r3
    1cfa:	490b      	ldr	r1, [pc, #44]	; (1d28 <timer_init+0x54>)
    1cfc:	223b      	movs	r2, #59	; 0x3b
    1cfe:	0018      	movs	r0, r3
    1d00:	4b0a      	ldr	r3, [pc, #40]	; (1d2c <timer_init+0x58>)
    1d02:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1d04:	68fb      	ldr	r3, [r7, #12]
    1d06:	68ba      	ldr	r2, [r7, #8]
    1d08:	0011      	movs	r1, r2
    1d0a:	0018      	movs	r0, r3
    1d0c:	4b08      	ldr	r3, [pc, #32]	; (1d30 <timer_init+0x5c>)
    1d0e:	4798      	blx	r3
	descr->time                           = 0;
    1d10:	68fb      	ldr	r3, [r7, #12]
    1d12:	2200      	movs	r2, #0
    1d14:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1d16:	68fb      	ldr	r3, [r7, #12]
    1d18:	4a06      	ldr	r2, [pc, #24]	; (1d34 <timer_init+0x60>)
    1d1a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1d1c:	2300      	movs	r3, #0
}
    1d1e:	0018      	movs	r0, r3
    1d20:	46bd      	mov	sp, r7
    1d22:	b004      	add	sp, #16
    1d24:	bd80      	pop	{r7, pc}
    1d26:	46c0      	nop			; (mov r8, r8)
    1d28:	00004654 	.word	0x00004654
    1d2c:	00001ec1 	.word	0x00001ec1
    1d30:	00002c71 	.word	0x00002c71
    1d34:	00001dfd 	.word	0x00001dfd

00001d38 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1d38:	b580      	push	{r7, lr}
    1d3a:	b088      	sub	sp, #32
    1d3c:	af00      	add	r7, sp, #0
    1d3e:	60f8      	str	r0, [r7, #12]
    1d40:	60b9      	str	r1, [r7, #8]
    1d42:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    1d44:	2300      	movs	r3, #0
    1d46:	61bb      	str	r3, [r7, #24]
    1d48:	68fb      	ldr	r3, [r7, #12]
    1d4a:	0018      	movs	r0, r3
    1d4c:	4b27      	ldr	r3, [pc, #156]	; (1dec <timer_add_timer_task+0xb4>)
    1d4e:	4798      	blx	r3
    1d50:	0003      	movs	r3, r0
    1d52:	613b      	str	r3, [r7, #16]

	if (!head) {
    1d54:	693b      	ldr	r3, [r7, #16]
    1d56:	2b00      	cmp	r3, #0
    1d58:	d106      	bne.n	1d68 <timer_add_timer_task+0x30>
		list_insert_as_head(list, new_task);
    1d5a:	68ba      	ldr	r2, [r7, #8]
    1d5c:	68fb      	ldr	r3, [r7, #12]
    1d5e:	0011      	movs	r1, r2
    1d60:	0018      	movs	r0, r3
    1d62:	4b23      	ldr	r3, [pc, #140]	; (1df0 <timer_add_timer_task+0xb8>)
    1d64:	4798      	blx	r3
		return;
    1d66:	e03d      	b.n	1de4 <timer_add_timer_task+0xac>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1d68:	693b      	ldr	r3, [r7, #16]
    1d6a:	61fb      	str	r3, [r7, #28]
    1d6c:	e024      	b.n	1db8 <timer_add_timer_task+0x80>
		uint32_t time_left;

		if (it->time_label <= time) {
    1d6e:	69fb      	ldr	r3, [r7, #28]
    1d70:	685a      	ldr	r2, [r3, #4]
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	429a      	cmp	r2, r3
    1d76:	d808      	bhi.n	1d8a <timer_add_timer_task+0x52>
			time_left = it->interval - (time - it->time_label);
    1d78:	69fb      	ldr	r3, [r7, #28]
    1d7a:	689a      	ldr	r2, [r3, #8]
    1d7c:	69fb      	ldr	r3, [r7, #28]
    1d7e:	6859      	ldr	r1, [r3, #4]
    1d80:	687b      	ldr	r3, [r7, #4]
    1d82:	1acb      	subs	r3, r1, r3
    1d84:	18d3      	adds	r3, r2, r3
    1d86:	617b      	str	r3, [r7, #20]
    1d88:	e009      	b.n	1d9e <timer_add_timer_task+0x66>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1d8a:	69fb      	ldr	r3, [r7, #28]
    1d8c:	689a      	ldr	r2, [r3, #8]
    1d8e:	69fb      	ldr	r3, [r7, #28]
    1d90:	685b      	ldr	r3, [r3, #4]
    1d92:	18d2      	adds	r2, r2, r3
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	425b      	negs	r3, r3
    1d98:	18d3      	adds	r3, r2, r3
    1d9a:	3301      	adds	r3, #1
    1d9c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    1d9e:	68bb      	ldr	r3, [r7, #8]
    1da0:	689a      	ldr	r2, [r3, #8]
    1da2:	697b      	ldr	r3, [r7, #20]
    1da4:	429a      	cmp	r2, r3
    1da6:	d90b      	bls.n	1dc0 <timer_add_timer_task+0x88>
			break;
		prev = it;
    1da8:	69fb      	ldr	r3, [r7, #28]
    1daa:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1dac:	69fb      	ldr	r3, [r7, #28]
    1dae:	0018      	movs	r0, r3
    1db0:	4b10      	ldr	r3, [pc, #64]	; (1df4 <timer_add_timer_task+0xbc>)
    1db2:	4798      	blx	r3
    1db4:	0003      	movs	r3, r0
    1db6:	61fb      	str	r3, [r7, #28]
    1db8:	69fb      	ldr	r3, [r7, #28]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d1d7      	bne.n	1d6e <timer_add_timer_task+0x36>
    1dbe:	e000      	b.n	1dc2 <timer_add_timer_task+0x8a>
			break;
    1dc0:	46c0      	nop			; (mov r8, r8)
	}

	if (it == head) {
    1dc2:	69fa      	ldr	r2, [r7, #28]
    1dc4:	693b      	ldr	r3, [r7, #16]
    1dc6:	429a      	cmp	r2, r3
    1dc8:	d106      	bne.n	1dd8 <timer_add_timer_task+0xa0>
		list_insert_as_head(list, new_task);
    1dca:	68ba      	ldr	r2, [r7, #8]
    1dcc:	68fb      	ldr	r3, [r7, #12]
    1dce:	0011      	movs	r1, r2
    1dd0:	0018      	movs	r0, r3
    1dd2:	4b07      	ldr	r3, [pc, #28]	; (1df0 <timer_add_timer_task+0xb8>)
    1dd4:	4798      	blx	r3
    1dd6:	e005      	b.n	1de4 <timer_add_timer_task+0xac>
	} else {
		list_insert_after(prev, new_task);
    1dd8:	68ba      	ldr	r2, [r7, #8]
    1dda:	69bb      	ldr	r3, [r7, #24]
    1ddc:	0011      	movs	r1, r2
    1dde:	0018      	movs	r0, r3
    1de0:	4b05      	ldr	r3, [pc, #20]	; (1df8 <timer_add_timer_task+0xc0>)
    1de2:	4798      	blx	r3
	}
}
    1de4:	46bd      	mov	sp, r7
    1de6:	b008      	add	sp, #32
    1de8:	bd80      	pop	{r7, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	00001ca1 	.word	0x00001ca1
    1df0:	00001f21 	.word	0x00001f21
    1df4:	00001cb5 	.word	0x00001cb5
    1df8:	00001f79 	.word	0x00001f79

00001dfc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1dfc:	b580      	push	{r7, lr}
    1dfe:	b086      	sub	sp, #24
    1e00:	af00      	add	r7, sp, #0
    1e02:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    1e04:	687b      	ldr	r3, [r7, #4]
    1e06:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    1e08:	693b      	ldr	r3, [r7, #16]
    1e0a:	3314      	adds	r3, #20
    1e0c:	0018      	movs	r0, r3
    1e0e:	4b29      	ldr	r3, [pc, #164]	; (1eb4 <timer_process_counted+0xb8>)
    1e10:	4798      	blx	r3
    1e12:	0003      	movs	r3, r0
    1e14:	617b      	str	r3, [r7, #20]
	uint32_t                 time  = ++timer->time;
    1e16:	693b      	ldr	r3, [r7, #16]
    1e18:	691b      	ldr	r3, [r3, #16]
    1e1a:	1c5a      	adds	r2, r3, #1
    1e1c:	693b      	ldr	r3, [r7, #16]
    1e1e:	611a      	str	r2, [r3, #16]
    1e20:	693b      	ldr	r3, [r7, #16]
    1e22:	691b      	ldr	r3, [r3, #16]
    1e24:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1e26:	693b      	ldr	r3, [r7, #16]
    1e28:	7e1b      	ldrb	r3, [r3, #24]
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	001a      	movs	r2, r3
    1e2e:	2301      	movs	r3, #1
    1e30:	4013      	ands	r3, r2
    1e32:	d106      	bne.n	1e42 <timer_process_counted+0x46>
    1e34:	693b      	ldr	r3, [r7, #16]
    1e36:	7e1b      	ldrb	r3, [r3, #24]
    1e38:	b2db      	uxtb	r3, r3
    1e3a:	001a      	movs	r2, r3
    1e3c:	2302      	movs	r3, #2
    1e3e:	4013      	ands	r3, r2
    1e40:	d029      	beq.n	1e96 <timer_process_counted+0x9a>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1e42:	693b      	ldr	r3, [r7, #16]
    1e44:	7e1b      	ldrb	r3, [r3, #24]
    1e46:	b2db      	uxtb	r3, r3
    1e48:	2202      	movs	r2, #2
    1e4a:	4313      	orrs	r3, r2
    1e4c:	b2da      	uxtb	r2, r3
    1e4e:	693b      	ldr	r3, [r7, #16]
    1e50:	761a      	strb	r2, [r3, #24]
		return;
    1e52:	e02b      	b.n	1eac <timer_process_counted+0xb0>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    1e54:	697b      	ldr	r3, [r7, #20]
    1e56:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    1e58:	693b      	ldr	r3, [r7, #16]
    1e5a:	3314      	adds	r3, #20
    1e5c:	0018      	movs	r0, r3
    1e5e:	4b16      	ldr	r3, [pc, #88]	; (1eb8 <timer_process_counted+0xbc>)
    1e60:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1e62:	68bb      	ldr	r3, [r7, #8]
    1e64:	7c1b      	ldrb	r3, [r3, #16]
    1e66:	2b01      	cmp	r3, #1
    1e68:	d109      	bne.n	1e7e <timer_process_counted+0x82>
			tmp->time_label = time;
    1e6a:	68bb      	ldr	r3, [r7, #8]
    1e6c:	68fa      	ldr	r2, [r7, #12]
    1e6e:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1e70:	693b      	ldr	r3, [r7, #16]
    1e72:	3314      	adds	r3, #20
    1e74:	68fa      	ldr	r2, [r7, #12]
    1e76:	68b9      	ldr	r1, [r7, #8]
    1e78:	0018      	movs	r0, r3
    1e7a:	4b10      	ldr	r3, [pc, #64]	; (1ebc <timer_process_counted+0xc0>)
    1e7c:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1e7e:	693b      	ldr	r3, [r7, #16]
    1e80:	3314      	adds	r3, #20
    1e82:	0018      	movs	r0, r3
    1e84:	4b0b      	ldr	r3, [pc, #44]	; (1eb4 <timer_process_counted+0xb8>)
    1e86:	4798      	blx	r3
    1e88:	0003      	movs	r3, r0
    1e8a:	617b      	str	r3, [r7, #20]

		tmp->cb(tmp);
    1e8c:	68bb      	ldr	r3, [r7, #8]
    1e8e:	68db      	ldr	r3, [r3, #12]
    1e90:	68ba      	ldr	r2, [r7, #8]
    1e92:	0010      	movs	r0, r2
    1e94:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1e96:	697b      	ldr	r3, [r7, #20]
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d007      	beq.n	1eac <timer_process_counted+0xb0>
    1e9c:	697b      	ldr	r3, [r7, #20]
    1e9e:	685b      	ldr	r3, [r3, #4]
    1ea0:	68fa      	ldr	r2, [r7, #12]
    1ea2:	1ad2      	subs	r2, r2, r3
    1ea4:	697b      	ldr	r3, [r7, #20]
    1ea6:	689b      	ldr	r3, [r3, #8]
    1ea8:	429a      	cmp	r2, r3
    1eaa:	d2d3      	bcs.n	1e54 <timer_process_counted+0x58>
	}
}
    1eac:	46bd      	mov	sp, r7
    1eae:	b006      	add	sp, #24
    1eb0:	bd80      	pop	{r7, pc}
    1eb2:	46c0      	nop			; (mov r8, r8)
    1eb4:	00001ca1 	.word	0x00001ca1
    1eb8:	00001f99 	.word	0x00001f99
    1ebc:	00001d39 	.word	0x00001d39

00001ec0 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    1ec0:	b580      	push	{r7, lr}
    1ec2:	b084      	sub	sp, #16
    1ec4:	af00      	add	r7, sp, #0
    1ec6:	60b9      	str	r1, [r7, #8]
    1ec8:	607a      	str	r2, [r7, #4]
    1eca:	230f      	movs	r3, #15
    1ecc:	18fb      	adds	r3, r7, r3
    1ece:	1c02      	adds	r2, r0, #0
    1ed0:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    1ed2:	230f      	movs	r3, #15
    1ed4:	18fb      	adds	r3, r7, r3
    1ed6:	781b      	ldrb	r3, [r3, #0]
    1ed8:	2201      	movs	r2, #1
    1eda:	4053      	eors	r3, r2
    1edc:	b2db      	uxtb	r3, r3
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d000      	beq.n	1ee4 <assert+0x24>
		__asm("BKPT #0");
    1ee2:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1ee4:	46c0      	nop			; (mov r8, r8)
    1ee6:	46bd      	mov	sp, r7
    1ee8:	b004      	add	sp, #16
    1eea:	bd80      	pop	{r7, pc}

00001eec <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    1eec:	b580      	push	{r7, lr}
    1eee:	b084      	sub	sp, #16
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	6078      	str	r0, [r7, #4]
    1ef4:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	681b      	ldr	r3, [r3, #0]
    1efa:	60fb      	str	r3, [r7, #12]
    1efc:	e008      	b.n	1f10 <is_list_element+0x24>
		if (it == element) {
    1efe:	68fa      	ldr	r2, [r7, #12]
    1f00:	683b      	ldr	r3, [r7, #0]
    1f02:	429a      	cmp	r2, r3
    1f04:	d101      	bne.n	1f0a <is_list_element+0x1e>
			return true;
    1f06:	2301      	movs	r3, #1
    1f08:	e006      	b.n	1f18 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    1f0a:	68fb      	ldr	r3, [r7, #12]
    1f0c:	681b      	ldr	r3, [r3, #0]
    1f0e:	60fb      	str	r3, [r7, #12]
    1f10:	68fb      	ldr	r3, [r7, #12]
    1f12:	2b00      	cmp	r3, #0
    1f14:	d1f3      	bne.n	1efe <is_list_element+0x12>
		}
	}

	return false;
    1f16:	2300      	movs	r3, #0
}
    1f18:	0018      	movs	r0, r3
    1f1a:	46bd      	mov	sp, r7
    1f1c:	b004      	add	sp, #16
    1f1e:	bd80      	pop	{r7, pc}

00001f20 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1f20:	b580      	push	{r7, lr}
    1f22:	b082      	sub	sp, #8
    1f24:	af00      	add	r7, sp, #0
    1f26:	6078      	str	r0, [r7, #4]
    1f28:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    1f2a:	683a      	ldr	r2, [r7, #0]
    1f2c:	687b      	ldr	r3, [r7, #4]
    1f2e:	0011      	movs	r1, r2
    1f30:	0018      	movs	r0, r3
    1f32:	4b0e      	ldr	r3, [pc, #56]	; (1f6c <list_insert_as_head+0x4c>)
    1f34:	4798      	blx	r3
    1f36:	0003      	movs	r3, r0
    1f38:	1e5a      	subs	r2, r3, #1
    1f3a:	4193      	sbcs	r3, r2
    1f3c:	b2db      	uxtb	r3, r3
    1f3e:	2201      	movs	r2, #1
    1f40:	4053      	eors	r3, r2
    1f42:	b2db      	uxtb	r3, r3
    1f44:	1c1a      	adds	r2, r3, #0
    1f46:	2301      	movs	r3, #1
    1f48:	4013      	ands	r3, r2
    1f4a:	b2db      	uxtb	r3, r3
    1f4c:	4908      	ldr	r1, [pc, #32]	; (1f70 <list_insert_as_head+0x50>)
    1f4e:	2239      	movs	r2, #57	; 0x39
    1f50:	0018      	movs	r0, r3
    1f52:	4b08      	ldr	r3, [pc, #32]	; (1f74 <list_insert_as_head+0x54>)
    1f54:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1f56:	687b      	ldr	r3, [r7, #4]
    1f58:	681a      	ldr	r2, [r3, #0]
    1f5a:	683b      	ldr	r3, [r7, #0]
    1f5c:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    1f5e:	687b      	ldr	r3, [r7, #4]
    1f60:	683a      	ldr	r2, [r7, #0]
    1f62:	601a      	str	r2, [r3, #0]
}
    1f64:	46c0      	nop			; (mov r8, r8)
    1f66:	46bd      	mov	sp, r7
    1f68:	b002      	add	sp, #8
    1f6a:	bd80      	pop	{r7, pc}
    1f6c:	00001eed 	.word	0x00001eed
    1f70:	0000466c 	.word	0x0000466c
    1f74:	00001ec1 	.word	0x00001ec1

00001f78 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    1f78:	b580      	push	{r7, lr}
    1f7a:	b082      	sub	sp, #8
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	6078      	str	r0, [r7, #4]
    1f80:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1f82:	687b      	ldr	r3, [r7, #4]
    1f84:	681a      	ldr	r2, [r3, #0]
    1f86:	683b      	ldr	r3, [r7, #0]
    1f88:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1f8a:	687b      	ldr	r3, [r7, #4]
    1f8c:	683a      	ldr	r2, [r7, #0]
    1f8e:	601a      	str	r2, [r3, #0]
}
    1f90:	46c0      	nop			; (mov r8, r8)
    1f92:	46bd      	mov	sp, r7
    1f94:	b002      	add	sp, #8
    1f96:	bd80      	pop	{r7, pc}

00001f98 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    1f98:	b580      	push	{r7, lr}
    1f9a:	b084      	sub	sp, #16
    1f9c:	af00      	add	r7, sp, #0
    1f9e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    1fa0:	687b      	ldr	r3, [r7, #4]
    1fa2:	681b      	ldr	r3, [r3, #0]
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d009      	beq.n	1fbc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    1fa8:	687b      	ldr	r3, [r7, #4]
    1faa:	681b      	ldr	r3, [r3, #0]
    1fac:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    1fae:	687b      	ldr	r3, [r7, #4]
    1fb0:	681b      	ldr	r3, [r3, #0]
    1fb2:	681a      	ldr	r2, [r3, #0]
    1fb4:	687b      	ldr	r3, [r7, #4]
    1fb6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    1fb8:	68fb      	ldr	r3, [r7, #12]
    1fba:	e000      	b.n	1fbe <list_remove_head+0x26>
	}

	return NULL;
    1fbc:	2300      	movs	r3, #0
}
    1fbe:	0018      	movs	r0, r3
    1fc0:	46bd      	mov	sp, r7
    1fc2:	b004      	add	sp, #16
    1fc4:	bd80      	pop	{r7, pc}
	...

00001fc8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1fc8:	b580      	push	{r7, lr}
    1fca:	b084      	sub	sp, #16
    1fcc:	af00      	add	r7, sp, #0
    1fce:	60f8      	str	r0, [r7, #12]
    1fd0:	60b9      	str	r1, [r7, #8]
    1fd2:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
    1fd4:	68fb      	ldr	r3, [r7, #12]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d007      	beq.n	1fea <ringbuffer_init+0x22>
    1fda:	68bb      	ldr	r3, [r7, #8]
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d004      	beq.n	1fea <ringbuffer_init+0x22>
    1fe0:	687b      	ldr	r3, [r7, #4]
    1fe2:	2b00      	cmp	r3, #0
    1fe4:	d001      	beq.n	1fea <ringbuffer_init+0x22>
    1fe6:	2301      	movs	r3, #1
    1fe8:	e000      	b.n	1fec <ringbuffer_init+0x24>
    1fea:	2300      	movs	r3, #0
    1fec:	1c1a      	adds	r2, r3, #0
    1fee:	2301      	movs	r3, #1
    1ff0:	4013      	ands	r3, r2
    1ff2:	b2db      	uxtb	r3, r3
    1ff4:	490f      	ldr	r1, [pc, #60]	; (2034 <ringbuffer_init+0x6c>)
    1ff6:	2228      	movs	r2, #40	; 0x28
    1ff8:	0018      	movs	r0, r3
    1ffa:	4b0f      	ldr	r3, [pc, #60]	; (2038 <ringbuffer_init+0x70>)
    1ffc:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1ffe:	687b      	ldr	r3, [r7, #4]
    2000:	3b01      	subs	r3, #1
    2002:	687a      	ldr	r2, [r7, #4]
    2004:	4013      	ands	r3, r2
    2006:	d002      	beq.n	200e <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
    2008:	230d      	movs	r3, #13
    200a:	425b      	negs	r3, r3
    200c:	e00e      	b.n	202c <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    200e:	687b      	ldr	r3, [r7, #4]
    2010:	1e5a      	subs	r2, r3, #1
    2012:	68fb      	ldr	r3, [r7, #12]
    2014:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
    2016:	68fb      	ldr	r3, [r7, #12]
    2018:	2200      	movs	r2, #0
    201a:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
    201c:	68fb      	ldr	r3, [r7, #12]
    201e:	689a      	ldr	r2, [r3, #8]
    2020:	68fb      	ldr	r3, [r7, #12]
    2022:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
    2024:	68fb      	ldr	r3, [r7, #12]
    2026:	68ba      	ldr	r2, [r7, #8]
    2028:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    202a:	2300      	movs	r3, #0
}
    202c:	0018      	movs	r0, r3
    202e:	46bd      	mov	sp, r7
    2030:	b004      	add	sp, #16
    2032:	bd80      	pop	{r7, pc}
    2034:	0000468c 	.word	0x0000468c
    2038:	00001ec1 	.word	0x00001ec1

0000203c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    203c:	b580      	push	{r7, lr}
    203e:	b082      	sub	sp, #8
    2040:	af00      	add	r7, sp, #0
    2042:	6078      	str	r0, [r7, #4]
    2044:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
    2046:	687b      	ldr	r3, [r7, #4]
    2048:	2b00      	cmp	r3, #0
    204a:	d004      	beq.n	2056 <ringbuffer_get+0x1a>
    204c:	683b      	ldr	r3, [r7, #0]
    204e:	2b00      	cmp	r3, #0
    2050:	d001      	beq.n	2056 <ringbuffer_get+0x1a>
    2052:	2301      	movs	r3, #1
    2054:	e000      	b.n	2058 <ringbuffer_get+0x1c>
    2056:	2300      	movs	r3, #0
    2058:	1c1a      	adds	r2, r3, #0
    205a:	2301      	movs	r3, #1
    205c:	4013      	ands	r3, r2
    205e:	b2db      	uxtb	r3, r3
    2060:	4911      	ldr	r1, [pc, #68]	; (20a8 <ringbuffer_get+0x6c>)
    2062:	2240      	movs	r2, #64	; 0x40
    2064:	0018      	movs	r0, r3
    2066:	4b11      	ldr	r3, [pc, #68]	; (20ac <ringbuffer_get+0x70>)
    2068:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    206a:	687b      	ldr	r3, [r7, #4]
    206c:	68da      	ldr	r2, [r3, #12]
    206e:	687b      	ldr	r3, [r7, #4]
    2070:	689b      	ldr	r3, [r3, #8]
    2072:	429a      	cmp	r2, r3
    2074:	d011      	beq.n	209a <ringbuffer_get+0x5e>
		*data = rb->buf[rb->read_index & rb->size];
    2076:	687b      	ldr	r3, [r7, #4]
    2078:	681a      	ldr	r2, [r3, #0]
    207a:	687b      	ldr	r3, [r7, #4]
    207c:	6899      	ldr	r1, [r3, #8]
    207e:	687b      	ldr	r3, [r7, #4]
    2080:	685b      	ldr	r3, [r3, #4]
    2082:	400b      	ands	r3, r1
    2084:	18d3      	adds	r3, r2, r3
    2086:	781a      	ldrb	r2, [r3, #0]
    2088:	683b      	ldr	r3, [r7, #0]
    208a:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
    208c:	687b      	ldr	r3, [r7, #4]
    208e:	689b      	ldr	r3, [r3, #8]
    2090:	1c5a      	adds	r2, r3, #1
    2092:	687b      	ldr	r3, [r7, #4]
    2094:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
    2096:	2300      	movs	r3, #0
    2098:	e001      	b.n	209e <ringbuffer_get+0x62>
	}

	return ERR_NOT_FOUND;
    209a:	230a      	movs	r3, #10
    209c:	425b      	negs	r3, r3
}
    209e:	0018      	movs	r0, r3
    20a0:	46bd      	mov	sp, r7
    20a2:	b002      	add	sp, #8
    20a4:	bd80      	pop	{r7, pc}
    20a6:	46c0      	nop			; (mov r8, r8)
    20a8:	0000468c 	.word	0x0000468c
    20ac:	00001ec1 	.word	0x00001ec1

000020b0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    20b0:	b580      	push	{r7, lr}
    20b2:	b082      	sub	sp, #8
    20b4:	af00      	add	r7, sp, #0
    20b6:	6078      	str	r0, [r7, #4]
    20b8:	000a      	movs	r2, r1
    20ba:	1cfb      	adds	r3, r7, #3
    20bc:	701a      	strb	r2, [r3, #0]
	ASSERT(rb);
    20be:	687b      	ldr	r3, [r7, #4]
    20c0:	1e5a      	subs	r2, r3, #1
    20c2:	4193      	sbcs	r3, r2
    20c4:	b2db      	uxtb	r3, r3
    20c6:	4915      	ldr	r1, [pc, #84]	; (211c <ringbuffer_put+0x6c>)
    20c8:	2251      	movs	r2, #81	; 0x51
    20ca:	0018      	movs	r0, r3
    20cc:	4b14      	ldr	r3, [pc, #80]	; (2120 <ringbuffer_put+0x70>)
    20ce:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    20d0:	687b      	ldr	r3, [r7, #4]
    20d2:	681a      	ldr	r2, [r3, #0]
    20d4:	687b      	ldr	r3, [r7, #4]
    20d6:	68d9      	ldr	r1, [r3, #12]
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	685b      	ldr	r3, [r3, #4]
    20dc:	400b      	ands	r3, r1
    20de:	18d3      	adds	r3, r2, r3
    20e0:	1cfa      	adds	r2, r7, #3
    20e2:	7812      	ldrb	r2, [r2, #0]
    20e4:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	68da      	ldr	r2, [r3, #12]
    20ea:	687b      	ldr	r3, [r7, #4]
    20ec:	689b      	ldr	r3, [r3, #8]
    20ee:	1ad2      	subs	r2, r2, r3
    20f0:	687b      	ldr	r3, [r7, #4]
    20f2:	685b      	ldr	r3, [r3, #4]
    20f4:	429a      	cmp	r2, r3
    20f6:	d906      	bls.n	2106 <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
    20f8:	687b      	ldr	r3, [r7, #4]
    20fa:	68da      	ldr	r2, [r3, #12]
    20fc:	687b      	ldr	r3, [r7, #4]
    20fe:	685b      	ldr	r3, [r3, #4]
    2100:	1ad2      	subs	r2, r2, r3
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
    2106:	687b      	ldr	r3, [r7, #4]
    2108:	68db      	ldr	r3, [r3, #12]
    210a:	1c5a      	adds	r2, r3, #1
    210c:	687b      	ldr	r3, [r7, #4]
    210e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2110:	2300      	movs	r3, #0
}
    2112:	0018      	movs	r0, r3
    2114:	46bd      	mov	sp, r7
    2116:	b002      	add	sp, #8
    2118:	bd80      	pop	{r7, pc}
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	0000468c 	.word	0x0000468c
    2120:	00001ec1 	.word	0x00001ec1

00002124 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2124:	b580      	push	{r7, lr}
    2126:	b082      	sub	sp, #8
    2128:	af00      	add	r7, sp, #0
    212a:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
    212c:	687b      	ldr	r3, [r7, #4]
    212e:	1e5a      	subs	r2, r3, #1
    2130:	4193      	sbcs	r3, r2
    2132:	b2db      	uxtb	r3, r3
    2134:	4906      	ldr	r1, [pc, #24]	; (2150 <ringbuffer_num+0x2c>)
    2136:	2267      	movs	r2, #103	; 0x67
    2138:	0018      	movs	r0, r3
    213a:	4b06      	ldr	r3, [pc, #24]	; (2154 <ringbuffer_num+0x30>)
    213c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    213e:	687b      	ldr	r3, [r7, #4]
    2140:	68da      	ldr	r2, [r3, #12]
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	689b      	ldr	r3, [r3, #8]
    2146:	1ad3      	subs	r3, r2, r3
}
    2148:	0018      	movs	r0, r3
    214a:	46bd      	mov	sp, r7
    214c:	b002      	add	sp, #8
    214e:	bd80      	pop	{r7, pc}
    2150:	0000468c 	.word	0x0000468c
    2154:	00001ec1 	.word	0x00001ec1

00002158 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_MANW;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    2158:	b580      	push	{r7, lr}
    215a:	b082      	sub	sp, #8
    215c:	af00      	add	r7, sp, #0
    215e:	6078      	str	r0, [r7, #4]
    2160:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2162:	687b      	ldr	r3, [r7, #4]
    2164:	685a      	ldr	r2, [r3, #4]
    2166:	683b      	ldr	r3, [r7, #0]
    2168:	005b      	lsls	r3, r3, #1
    216a:	211e      	movs	r1, #30
    216c:	400b      	ands	r3, r1
    216e:	431a      	orrs	r2, r3
    2170:	687b      	ldr	r3, [r7, #4]
    2172:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    2174:	46c0      	nop			; (mov r8, r8)
    2176:	46bd      	mov	sp, r7
    2178:	b002      	add	sp, #8
    217a:	bd80      	pop	{r7, pc}

0000217c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    217c:	b580      	push	{r7, lr}
    217e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    2180:	4b0a      	ldr	r3, [pc, #40]	; (21ac <_init_chip+0x30>)
    2182:	2102      	movs	r1, #2
    2184:	0018      	movs	r0, r3
    2186:	4b0a      	ldr	r3, [pc, #40]	; (21b0 <_init_chip+0x34>)
    2188:	4798      	blx	r3

	_osc32kctrl_init_sources();
    218a:	4b0a      	ldr	r3, [pc, #40]	; (21b4 <_init_chip+0x38>)
    218c:	4798      	blx	r3
	_oscctrl_init_sources();
    218e:	4b0a      	ldr	r3, [pc, #40]	; (21b8 <_init_chip+0x3c>)
    2190:	4798      	blx	r3
	_mclk_init();
    2192:	4b0a      	ldr	r3, [pc, #40]	; (21bc <_init_chip+0x40>)
    2194:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    2196:	4b0a      	ldr	r3, [pc, #40]	; (21c0 <_init_chip+0x44>)
    2198:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    219a:	20ff      	movs	r0, #255	; 0xff
    219c:	4b09      	ldr	r3, [pc, #36]	; (21c4 <_init_chip+0x48>)
    219e:	4798      	blx	r3

	_div_init();
    21a0:	4b09      	ldr	r3, [pc, #36]	; (21c8 <_init_chip+0x4c>)
    21a2:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    21a4:	46c0      	nop			; (mov r8, r8)
    21a6:	46bd      	mov	sp, r7
    21a8:	bd80      	pop	{r7, pc}
    21aa:	46c0      	nop			; (mov r8, r8)
    21ac:	41004000 	.word	0x41004000
    21b0:	00002159 	.word	0x00002159
    21b4:	000029c9 	.word	0x000029c9
    21b8:	00002b0d 	.word	0x00002b0d
    21bc:	00002951 	.word	0x00002951
    21c0:	00002b89 	.word	0x00002b89
    21c4:	00002901 	.word	0x00002901
    21c8:	00002221 	.word	0x00002221

000021cc <hri_divas_write_CTRLA_DLZ_bit>:
	tmp = (tmp & DIVAS_CTRLA_DLZ) >> DIVAS_CTRLA_DLZ_Pos;
	return (bool)tmp;
}

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
    21cc:	b580      	push	{r7, lr}
    21ce:	b084      	sub	sp, #16
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
    21d4:	000a      	movs	r2, r1
    21d6:	1cfb      	adds	r3, r7, #3
    21d8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
    21da:	230f      	movs	r3, #15
    21dc:	18fb      	adds	r3, r7, r3
    21de:	687a      	ldr	r2, [r7, #4]
    21e0:	7812      	ldrb	r2, [r2, #0]
    21e2:	701a      	strb	r2, [r3, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
    21e4:	230f      	movs	r3, #15
    21e6:	18fb      	adds	r3, r7, r3
    21e8:	220f      	movs	r2, #15
    21ea:	18ba      	adds	r2, r7, r2
    21ec:	7812      	ldrb	r2, [r2, #0]
    21ee:	2102      	movs	r1, #2
    21f0:	438a      	bics	r2, r1
    21f2:	701a      	strb	r2, [r3, #0]
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
    21f4:	1cfb      	adds	r3, r7, #3
    21f6:	781b      	ldrb	r3, [r3, #0]
    21f8:	005b      	lsls	r3, r3, #1
    21fa:	b25a      	sxtb	r2, r3
    21fc:	230f      	movs	r3, #15
    21fe:	18fb      	adds	r3, r7, r3
    2200:	781b      	ldrb	r3, [r3, #0]
    2202:	b25b      	sxtb	r3, r3
    2204:	4313      	orrs	r3, r2
    2206:	b25a      	sxtb	r2, r3
    2208:	230f      	movs	r3, #15
    220a:	18fb      	adds	r3, r7, r3
    220c:	701a      	strb	r2, [r3, #0]
	((Divas *)hw)->CTRLA.reg = tmp;
    220e:	687b      	ldr	r3, [r7, #4]
    2210:	220f      	movs	r2, #15
    2212:	18ba      	adds	r2, r7, r2
    2214:	7812      	ldrb	r2, [r2, #0]
    2216:	701a      	strb	r2, [r3, #0]
	DIVAS_CRITICAL_SECTION_LEAVE();
}
    2218:	46c0      	nop			; (mov r8, r8)
    221a:	46bd      	mov	sp, r7
    221c:	b004      	add	sp, #16
    221e:	bd80      	pop	{r7, pc}

00002220 <_div_init>:

/**
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
    2220:	b580      	push	{r7, lr}
    2222:	af00      	add	r7, sp, #0
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
    2224:	2390      	movs	r3, #144	; 0x90
    2226:	05db      	lsls	r3, r3, #23
    2228:	2100      	movs	r1, #0
    222a:	0018      	movs	r0, r3
    222c:	4b02      	ldr	r3, [pc, #8]	; (2238 <_div_init+0x18>)
    222e:	4798      	blx	r3
}
    2230:	46c0      	nop			; (mov r8, r8)
    2232:	46bd      	mov	sp, r7
    2234:	bd80      	pop	{r7, pc}
    2236:	46c0      	nop			; (mov r8, r8)
    2238:	000021cd 	.word	0x000021cd

0000223c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    223c:	b580      	push	{r7, lr}
    223e:	b082      	sub	sp, #8
    2240:	af00      	add	r7, sp, #0
    2242:	0002      	movs	r2, r0
    2244:	1dfb      	adds	r3, r7, #7
    2246:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2248:	1dfb      	adds	r3, r7, #7
    224a:	781b      	ldrb	r3, [r3, #0]
    224c:	2b7f      	cmp	r3, #127	; 0x7f
    224e:	d809      	bhi.n	2264 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2250:	4b06      	ldr	r3, [pc, #24]	; (226c <__NVIC_EnableIRQ+0x30>)
    2252:	1dfa      	adds	r2, r7, #7
    2254:	7812      	ldrb	r2, [r2, #0]
    2256:	0011      	movs	r1, r2
    2258:	221f      	movs	r2, #31
    225a:	400a      	ands	r2, r1
    225c:	2101      	movs	r1, #1
    225e:	4091      	lsls	r1, r2
    2260:	000a      	movs	r2, r1
    2262:	601a      	str	r2, [r3, #0]
  }
}
    2264:	46c0      	nop			; (mov r8, r8)
    2266:	46bd      	mov	sp, r7
    2268:	b002      	add	sp, #8
    226a:	bd80      	pop	{r7, pc}
    226c:	e000e100 	.word	0xe000e100

00002270 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    2270:	b580      	push	{r7, lr}
    2272:	b082      	sub	sp, #8
    2274:	af00      	add	r7, sp, #0
    2276:	0002      	movs	r2, r0
    2278:	1dfb      	adds	r3, r7, #7
    227a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    227c:	1dfb      	adds	r3, r7, #7
    227e:	781b      	ldrb	r3, [r3, #0]
    2280:	2b7f      	cmp	r3, #127	; 0x7f
    2282:	d80e      	bhi.n	22a2 <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2284:	4909      	ldr	r1, [pc, #36]	; (22ac <__NVIC_DisableIRQ+0x3c>)
    2286:	1dfb      	adds	r3, r7, #7
    2288:	781b      	ldrb	r3, [r3, #0]
    228a:	001a      	movs	r2, r3
    228c:	231f      	movs	r3, #31
    228e:	4013      	ands	r3, r2
    2290:	2201      	movs	r2, #1
    2292:	409a      	lsls	r2, r3
    2294:	0013      	movs	r3, r2
    2296:	2280      	movs	r2, #128	; 0x80
    2298:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    229a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    229e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    22a2:	46c0      	nop			; (mov r8, r8)
    22a4:	46bd      	mov	sp, r7
    22a6:	b002      	add	sp, #8
    22a8:	bd80      	pop	{r7, pc}
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	e000e100 	.word	0xe000e100

000022b0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    22b0:	b580      	push	{r7, lr}
    22b2:	b082      	sub	sp, #8
    22b4:	af00      	add	r7, sp, #0
    22b6:	0002      	movs	r2, r0
    22b8:	1dfb      	adds	r3, r7, #7
    22ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    22bc:	1dfb      	adds	r3, r7, #7
    22be:	781b      	ldrb	r3, [r3, #0]
    22c0:	2b7f      	cmp	r3, #127	; 0x7f
    22c2:	d80a      	bhi.n	22da <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22c4:	4907      	ldr	r1, [pc, #28]	; (22e4 <__NVIC_ClearPendingIRQ+0x34>)
    22c6:	1dfb      	adds	r3, r7, #7
    22c8:	781b      	ldrb	r3, [r3, #0]
    22ca:	001a      	movs	r2, r3
    22cc:	231f      	movs	r3, #31
    22ce:	4013      	ands	r3, r2
    22d0:	2201      	movs	r2, #1
    22d2:	409a      	lsls	r2, r3
    22d4:	23c0      	movs	r3, #192	; 0xc0
    22d6:	005b      	lsls	r3, r3, #1
    22d8:	50ca      	str	r2, [r1, r3]
  }
}
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	46bd      	mov	sp, r7
    22de:	b002      	add	sp, #8
    22e0:	bd80      	pop	{r7, pc}
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	e000e100 	.word	0xe000e100

000022e8 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    22e8:	b580      	push	{r7, lr}
    22ea:	b082      	sub	sp, #8
    22ec:	af00      	add	r7, sp, #0
    22ee:	6078      	str	r0, [r7, #4]
    22f0:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    22f2:	46c0      	nop			; (mov r8, r8)
    22f4:	687b      	ldr	r3, [r7, #4]
    22f6:	685b      	ldr	r3, [r3, #4]
    22f8:	683a      	ldr	r2, [r7, #0]
    22fa:	4013      	ands	r3, r2
    22fc:	d1fa      	bne.n	22f4 <hri_eic_wait_for_sync+0xc>
	};
}
    22fe:	46c0      	nop			; (mov r8, r8)
    2300:	46bd      	mov	sp, r7
    2302:	b002      	add	sp, #8
    2304:	bd80      	pop	{r7, pc}

00002306 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    2306:	b580      	push	{r7, lr}
    2308:	b082      	sub	sp, #8
    230a:	af00      	add	r7, sp, #0
    230c:	6078      	str	r0, [r7, #4]
    230e:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    2310:	687b      	ldr	r3, [r7, #4]
    2312:	685b      	ldr	r3, [r3, #4]
    2314:	683a      	ldr	r2, [r7, #0]
    2316:	4013      	ands	r3, r2
    2318:	1e5a      	subs	r2, r3, #1
    231a:	4193      	sbcs	r3, r2
    231c:	b2db      	uxtb	r3, r3
}
    231e:	0018      	movs	r0, r3
    2320:	46bd      	mov	sp, r7
    2322:	b002      	add	sp, #8
    2324:	bd80      	pop	{r7, pc}

00002326 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    2326:	b580      	push	{r7, lr}
    2328:	b082      	sub	sp, #8
    232a:	af00      	add	r7, sp, #0
    232c:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	695b      	ldr	r3, [r3, #20]
}
    2332:	0018      	movs	r0, r3
    2334:	46bd      	mov	sp, r7
    2336:	b002      	add	sp, #8
    2338:	bd80      	pop	{r7, pc}

0000233a <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    233a:	b580      	push	{r7, lr}
    233c:	b082      	sub	sp, #8
    233e:	af00      	add	r7, sp, #0
    2340:	6078      	str	r0, [r7, #4]
    2342:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    2344:	687b      	ldr	r3, [r7, #4]
    2346:	683a      	ldr	r2, [r7, #0]
    2348:	615a      	str	r2, [r3, #20]
}
    234a:	46c0      	nop			; (mov r8, r8)
    234c:	46bd      	mov	sp, r7
    234e:	b002      	add	sp, #8
    2350:	bd80      	pop	{r7, pc}

00002352 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    2352:	b580      	push	{r7, lr}
    2354:	b082      	sub	sp, #8
    2356:	af00      	add	r7, sp, #0
    2358:	6078      	str	r0, [r7, #4]
    235a:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    235c:	687b      	ldr	r3, [r7, #4]
    235e:	683a      	ldr	r2, [r7, #0]
    2360:	611a      	str	r2, [r3, #16]
}
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	46bd      	mov	sp, r7
    2366:	b002      	add	sp, #8
    2368:	bd80      	pop	{r7, pc}

0000236a <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    236a:	b580      	push	{r7, lr}
    236c:	b082      	sub	sp, #8
    236e:	af00      	add	r7, sp, #0
    2370:	6078      	str	r0, [r7, #4]
    2372:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    2374:	687b      	ldr	r3, [r7, #4]
    2376:	683a      	ldr	r2, [r7, #0]
    2378:	60da      	str	r2, [r3, #12]
}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	46bd      	mov	sp, r7
    237e:	b002      	add	sp, #8
    2380:	bd80      	pop	{r7, pc}
	...

00002384 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    2384:	b580      	push	{r7, lr}
    2386:	b082      	sub	sp, #8
    2388:	af00      	add	r7, sp, #0
    238a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    238c:	687b      	ldr	r3, [r7, #4]
    238e:	781b      	ldrb	r3, [r3, #0]
    2390:	b2db      	uxtb	r3, r3
    2392:	2202      	movs	r2, #2
    2394:	4313      	orrs	r3, r2
    2396:	b2da      	uxtb	r2, r3
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	2103      	movs	r1, #3
    23a0:	0018      	movs	r0, r3
    23a2:	4b03      	ldr	r3, [pc, #12]	; (23b0 <hri_eic_set_CTRLA_ENABLE_bit+0x2c>)
    23a4:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    23a6:	46c0      	nop			; (mov r8, r8)
    23a8:	46bd      	mov	sp, r7
    23aa:	b002      	add	sp, #8
    23ac:	bd80      	pop	{r7, pc}
    23ae:	46c0      	nop			; (mov r8, r8)
    23b0:	000022e9 	.word	0x000022e9

000023b4 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    23b4:	b580      	push	{r7, lr}
    23b6:	b082      	sub	sp, #8
    23b8:	af00      	add	r7, sp, #0
    23ba:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	781b      	ldrb	r3, [r3, #0]
    23c0:	b2db      	uxtb	r3, r3
    23c2:	2202      	movs	r2, #2
    23c4:	4393      	bics	r3, r2
    23c6:	b2da      	uxtb	r2, r3
    23c8:	687b      	ldr	r3, [r7, #4]
    23ca:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	2103      	movs	r1, #3
    23d0:	0018      	movs	r0, r3
    23d2:	4b03      	ldr	r3, [pc, #12]	; (23e0 <hri_eic_clear_CTRLA_ENABLE_bit+0x2c>)
    23d4:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	46bd      	mov	sp, r7
    23da:	b002      	add	sp, #8
    23dc:	bd80      	pop	{r7, pc}
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	000022e9 	.word	0x000022e9

000023e4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    23e4:	b580      	push	{r7, lr}
    23e6:	b084      	sub	sp, #16
    23e8:	af00      	add	r7, sp, #0
    23ea:	6078      	str	r0, [r7, #4]
    23ec:	000a      	movs	r2, r1
    23ee:	1cfb      	adds	r3, r7, #3
    23f0:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    23f2:	230f      	movs	r3, #15
    23f4:	18fb      	adds	r3, r7, r3
    23f6:	687a      	ldr	r2, [r7, #4]
    23f8:	7812      	ldrb	r2, [r2, #0]
    23fa:	701a      	strb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    23fc:	230f      	movs	r3, #15
    23fe:	18fb      	adds	r3, r7, r3
    2400:	220f      	movs	r2, #15
    2402:	18ba      	adds	r2, r7, r2
    2404:	7812      	ldrb	r2, [r2, #0]
    2406:	2110      	movs	r1, #16
    2408:	438a      	bics	r2, r1
    240a:	701a      	strb	r2, [r3, #0]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    240c:	1cfb      	adds	r3, r7, #3
    240e:	781b      	ldrb	r3, [r3, #0]
    2410:	011b      	lsls	r3, r3, #4
    2412:	b25a      	sxtb	r2, r3
    2414:	230f      	movs	r3, #15
    2416:	18fb      	adds	r3, r7, r3
    2418:	781b      	ldrb	r3, [r3, #0]
    241a:	b25b      	sxtb	r3, r3
    241c:	4313      	orrs	r3, r2
    241e:	b25a      	sxtb	r2, r3
    2420:	230f      	movs	r3, #15
    2422:	18fb      	adds	r3, r7, r3
    2424:	701a      	strb	r2, [r3, #0]
	((Eic *)hw)->CTRLA.reg = tmp;
    2426:	687b      	ldr	r3, [r7, #4]
    2428:	220f      	movs	r2, #15
    242a:	18ba      	adds	r2, r7, r2
    242c:	7812      	ldrb	r2, [r2, #0]
    242e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    2430:	687b      	ldr	r3, [r7, #4]
    2432:	2103      	movs	r1, #3
    2434:	0018      	movs	r0, r3
    2436:	4b03      	ldr	r3, [pc, #12]	; (2444 <hri_eic_write_CTRLA_CKSEL_bit+0x60>)
    2438:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	46bd      	mov	sp, r7
    243e:	b004      	add	sp, #16
    2440:	bd80      	pop	{r7, pc}
    2442:	46c0      	nop			; (mov r8, r8)
    2444:	000022e9 	.word	0x000022e9

00002448 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    2448:	b580      	push	{r7, lr}
    244a:	b084      	sub	sp, #16
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
    2450:	000a      	movs	r2, r1
    2452:	1cfb      	adds	r3, r7, #3
    2454:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    2456:	687b      	ldr	r3, [r7, #4]
    2458:	2103      	movs	r1, #3
    245a:	0018      	movs	r0, r3
    245c:	4b0b      	ldr	r3, [pc, #44]	; (248c <hri_eic_get_CTRLA_reg+0x44>)
    245e:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    2460:	230f      	movs	r3, #15
    2462:	18fb      	adds	r3, r7, r3
    2464:	687a      	ldr	r2, [r7, #4]
    2466:	7812      	ldrb	r2, [r2, #0]
    2468:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    246a:	230f      	movs	r3, #15
    246c:	18fb      	adds	r3, r7, r3
    246e:	220f      	movs	r2, #15
    2470:	18ba      	adds	r2, r7, r2
    2472:	1cf9      	adds	r1, r7, #3
    2474:	7812      	ldrb	r2, [r2, #0]
    2476:	7809      	ldrb	r1, [r1, #0]
    2478:	400a      	ands	r2, r1
    247a:	701a      	strb	r2, [r3, #0]
	return tmp;
    247c:	230f      	movs	r3, #15
    247e:	18fb      	adds	r3, r7, r3
    2480:	781b      	ldrb	r3, [r3, #0]
}
    2482:	0018      	movs	r0, r3
    2484:	46bd      	mov	sp, r7
    2486:	b004      	add	sp, #16
    2488:	bd80      	pop	{r7, pc}
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	000022e9 	.word	0x000022e9

00002490 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    2490:	b580      	push	{r7, lr}
    2492:	b082      	sub	sp, #8
    2494:	af00      	add	r7, sp, #0
    2496:	6078      	str	r0, [r7, #4]
    2498:	000a      	movs	r2, r1
    249a:	1cfb      	adds	r3, r7, #3
    249c:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    249e:	687b      	ldr	r3, [r7, #4]
    24a0:	1cfa      	adds	r2, r7, #3
    24a2:	7812      	ldrb	r2, [r2, #0]
    24a4:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    24a6:	687b      	ldr	r3, [r7, #4]
    24a8:	2103      	movs	r1, #3
    24aa:	0018      	movs	r0, r3
    24ac:	4b02      	ldr	r3, [pc, #8]	; (24b8 <hri_eic_write_CTRLA_reg+0x28>)
    24ae:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    24b0:	46c0      	nop			; (mov r8, r8)
    24b2:	46bd      	mov	sp, r7
    24b4:	b002      	add	sp, #8
    24b6:	bd80      	pop	{r7, pc}
    24b8:	000022e9 	.word	0x000022e9

000024bc <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    24bc:	b580      	push	{r7, lr}
    24be:	b082      	sub	sp, #8
    24c0:	af00      	add	r7, sp, #0
    24c2:	6078      	str	r0, [r7, #4]
    24c4:	000a      	movs	r2, r1
    24c6:	1cfb      	adds	r3, r7, #3
    24c8:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    24ca:	687b      	ldr	r3, [r7, #4]
    24cc:	1cfa      	adds	r2, r7, #3
    24ce:	7812      	ldrb	r2, [r2, #0]
    24d0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	46bd      	mov	sp, r7
    24d6:	b002      	add	sp, #8
    24d8:	bd80      	pop	{r7, pc}

000024da <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    24da:	b580      	push	{r7, lr}
    24dc:	b082      	sub	sp, #8
    24de:	af00      	add	r7, sp, #0
    24e0:	6078      	str	r0, [r7, #4]
    24e2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    24e4:	687b      	ldr	r3, [r7, #4]
    24e6:	683a      	ldr	r2, [r7, #0]
    24e8:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	46bd      	mov	sp, r7
    24ee:	b002      	add	sp, #8
    24f0:	bd80      	pop	{r7, pc}

000024f2 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    24f2:	b580      	push	{r7, lr}
    24f4:	b082      	sub	sp, #8
    24f6:	af00      	add	r7, sp, #0
    24f8:	6078      	str	r0, [r7, #4]
    24fa:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	683a      	ldr	r2, [r7, #0]
    2500:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	46bd      	mov	sp, r7
    2506:	b002      	add	sp, #8
    2508:	bd80      	pop	{r7, pc}

0000250a <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    250a:	b580      	push	{r7, lr}
    250c:	b084      	sub	sp, #16
    250e:	af00      	add	r7, sp, #0
    2510:	60f8      	str	r0, [r7, #12]
    2512:	607a      	str	r2, [r7, #4]
    2514:	230b      	movs	r3, #11
    2516:	18fb      	adds	r3, r7, r3
    2518:	1c0a      	adds	r2, r1, #0
    251a:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    251c:	230b      	movs	r3, #11
    251e:	18fb      	adds	r3, r7, r3
    2520:	781b      	ldrb	r3, [r3, #0]
    2522:	68fa      	ldr	r2, [r7, #12]
    2524:	3306      	adds	r3, #6
    2526:	009b      	lsls	r3, r3, #2
    2528:	18d3      	adds	r3, r2, r3
    252a:	3304      	adds	r3, #4
    252c:	687a      	ldr	r2, [r7, #4]
    252e:	601a      	str	r2, [r3, #0]
	EIC_CRITICAL_SECTION_LEAVE();
}
    2530:	46c0      	nop			; (mov r8, r8)
    2532:	46bd      	mov	sp, r7
    2534:	b004      	add	sp, #16
    2536:	bd80      	pop	{r7, pc}

00002538 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    2538:	b580      	push	{r7, lr}
    253a:	b082      	sub	sp, #8
    253c:	af00      	add	r7, sp, #0
    253e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    2540:	4b2e      	ldr	r3, [pc, #184]	; (25fc <_ext_irq_init+0xc4>)
    2542:	2101      	movs	r1, #1
    2544:	0018      	movs	r0, r3
    2546:	4b2e      	ldr	r3, [pc, #184]	; (2600 <_ext_irq_init+0xc8>)
    2548:	4798      	blx	r3
    254a:	0003      	movs	r3, r0
    254c:	001a      	movs	r2, r3
    254e:	2301      	movs	r3, #1
    2550:	4053      	eors	r3, r2
    2552:	b2db      	uxtb	r3, r3
    2554:	2b00      	cmp	r3, #0
    2556:	d014      	beq.n	2582 <_ext_irq_init+0x4a>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    2558:	4b28      	ldr	r3, [pc, #160]	; (25fc <_ext_irq_init+0xc4>)
    255a:	2102      	movs	r1, #2
    255c:	0018      	movs	r0, r3
    255e:	4b29      	ldr	r3, [pc, #164]	; (2604 <_ext_irq_init+0xcc>)
    2560:	4798      	blx	r3
    2562:	1e03      	subs	r3, r0, #0
    2564:	d008      	beq.n	2578 <_ext_irq_init+0x40>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    2566:	4b25      	ldr	r3, [pc, #148]	; (25fc <_ext_irq_init+0xc4>)
    2568:	0018      	movs	r0, r3
    256a:	4b27      	ldr	r3, [pc, #156]	; (2608 <_ext_irq_init+0xd0>)
    256c:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    256e:	4b23      	ldr	r3, [pc, #140]	; (25fc <_ext_irq_init+0xc4>)
    2570:	2102      	movs	r1, #2
    2572:	0018      	movs	r0, r3
    2574:	4b25      	ldr	r3, [pc, #148]	; (260c <_ext_irq_init+0xd4>)
    2576:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    2578:	4b20      	ldr	r3, [pc, #128]	; (25fc <_ext_irq_init+0xc4>)
    257a:	2101      	movs	r1, #1
    257c:	0018      	movs	r0, r3
    257e:	4b24      	ldr	r3, [pc, #144]	; (2610 <_ext_irq_init+0xd8>)
    2580:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    2582:	4b1e      	ldr	r3, [pc, #120]	; (25fc <_ext_irq_init+0xc4>)
    2584:	2101      	movs	r1, #1
    2586:	0018      	movs	r0, r3
    2588:	4b20      	ldr	r3, [pc, #128]	; (260c <_ext_irq_init+0xd4>)
    258a:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    258c:	4b1b      	ldr	r3, [pc, #108]	; (25fc <_ext_irq_init+0xc4>)
    258e:	2100      	movs	r1, #0
    2590:	0018      	movs	r0, r3
    2592:	4b20      	ldr	r3, [pc, #128]	; (2614 <_ext_irq_init+0xdc>)
    2594:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    2596:	4b19      	ldr	r3, [pc, #100]	; (25fc <_ext_irq_init+0xc4>)
    2598:	2100      	movs	r1, #0
    259a:	0018      	movs	r0, r3
    259c:	4b1e      	ldr	r3, [pc, #120]	; (2618 <_ext_irq_init+0xe0>)
    259e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    25a0:	4b16      	ldr	r3, [pc, #88]	; (25fc <_ext_irq_init+0xc4>)
    25a2:	2100      	movs	r1, #0
    25a4:	0018      	movs	r0, r3
    25a6:	4b1d      	ldr	r3, [pc, #116]	; (261c <_ext_irq_init+0xe4>)
    25a8:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    25aa:	4b14      	ldr	r3, [pc, #80]	; (25fc <_ext_irq_init+0xc4>)
    25ac:	2100      	movs	r1, #0
    25ae:	0018      	movs	r0, r3
    25b0:	4b1b      	ldr	r3, [pc, #108]	; (2620 <_ext_irq_init+0xe8>)
    25b2:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);

	hri_eic_write_CONFIG_reg(EIC,
    25b4:	2388      	movs	r3, #136	; 0x88
    25b6:	055b      	lsls	r3, r3, #21
    25b8:	4810      	ldr	r0, [pc, #64]	; (25fc <_ext_irq_init+0xc4>)
    25ba:	001a      	movs	r2, r3
    25bc:	2100      	movs	r1, #0
    25be:	4b19      	ldr	r3, [pc, #100]	; (2624 <_ext_irq_init+0xec>)
    25c0:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    25c2:	23c0      	movs	r3, #192	; 0xc0
    25c4:	059b      	lsls	r3, r3, #22
    25c6:	480d      	ldr	r0, [pc, #52]	; (25fc <_ext_irq_init+0xc4>)
    25c8:	001a      	movs	r2, r3
    25ca:	2101      	movs	r1, #1
    25cc:	4b15      	ldr	r3, [pc, #84]	; (2624 <_ext_irq_init+0xec>)
    25ce:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    25d0:	4b0a      	ldr	r3, [pc, #40]	; (25fc <_ext_irq_init+0xc4>)
    25d2:	0018      	movs	r0, r3
    25d4:	4b14      	ldr	r3, [pc, #80]	; (2628 <_ext_irq_init+0xf0>)
    25d6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_IRQn);
    25d8:	2003      	movs	r0, #3
    25da:	4b14      	ldr	r3, [pc, #80]	; (262c <_ext_irq_init+0xf4>)
    25dc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_IRQn);
    25de:	2003      	movs	r0, #3
    25e0:	4b13      	ldr	r3, [pc, #76]	; (2630 <_ext_irq_init+0xf8>)
    25e2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_IRQn);
    25e4:	2003      	movs	r0, #3
    25e6:	4b13      	ldr	r3, [pc, #76]	; (2634 <_ext_irq_init+0xfc>)
    25e8:	4798      	blx	r3

	callback = cb;
    25ea:	4b13      	ldr	r3, [pc, #76]	; (2638 <_ext_irq_init+0x100>)
    25ec:	687a      	ldr	r2, [r7, #4]
    25ee:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    25f0:	2300      	movs	r3, #0
}
    25f2:	0018      	movs	r0, r3
    25f4:	46bd      	mov	sp, r7
    25f6:	b002      	add	sp, #8
    25f8:	bd80      	pop	{r7, pc}
    25fa:	46c0      	nop			; (mov r8, r8)
    25fc:	40002800 	.word	0x40002800
    2600:	00002307 	.word	0x00002307
    2604:	00002449 	.word	0x00002449
    2608:	000023b5 	.word	0x000023b5
    260c:	000022e9 	.word	0x000022e9
    2610:	00002491 	.word	0x00002491
    2614:	000023e5 	.word	0x000023e5
    2618:	000024bd 	.word	0x000024bd
    261c:	000024db 	.word	0x000024db
    2620:	000024f3 	.word	0x000024f3
    2624:	0000250b 	.word	0x0000250b
    2628:	00002385 	.word	0x00002385
    262c:	00002271 	.word	0x00002271
    2630:	000022b1 	.word	0x000022b1
    2634:	0000223d 	.word	0x0000223d
    2638:	20000058 	.word	0x20000058

0000263c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    263c:	b580      	push	{r7, lr}
    263e:	b084      	sub	sp, #16
    2640:	af00      	add	r7, sp, #0
    2642:	6078      	str	r0, [r7, #4]
    2644:	000a      	movs	r2, r1
    2646:	1cfb      	adds	r3, r7, #3
    2648:	701a      	strb	r2, [r3, #0]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    264a:	230f      	movs	r3, #15
    264c:	18fb      	adds	r3, r7, r3
    264e:	22ff      	movs	r2, #255	; 0xff
    2650:	701a      	strb	r2, [r3, #0]
	uint8_t i      = 0;
    2652:	230e      	movs	r3, #14
    2654:	18fb      	adds	r3, r7, r3
    2656:	2200      	movs	r2, #0
    2658:	701a      	strb	r2, [r3, #0]

	for (; i < ARRAY_SIZE(_map); i++) {
    265a:	e01b      	b.n	2694 <_ext_irq_enable+0x58>
		if (_map[i].pin == pin) {
    265c:	230e      	movs	r3, #14
    265e:	18fb      	adds	r3, r7, r3
    2660:	781b      	ldrb	r3, [r3, #0]
    2662:	4a28      	ldr	r2, [pc, #160]	; (2704 <_ext_irq_enable+0xc8>)
    2664:	00db      	lsls	r3, r3, #3
    2666:	18d3      	adds	r3, r2, r3
    2668:	3304      	adds	r3, #4
    266a:	681a      	ldr	r2, [r3, #0]
    266c:	687b      	ldr	r3, [r7, #4]
    266e:	429a      	cmp	r2, r3
    2670:	d109      	bne.n	2686 <_ext_irq_enable+0x4a>
			extint = _map[i].extint;
    2672:	230e      	movs	r3, #14
    2674:	18fb      	adds	r3, r7, r3
    2676:	7819      	ldrb	r1, [r3, #0]
    2678:	230f      	movs	r3, #15
    267a:	18fb      	adds	r3, r7, r3
    267c:	4a21      	ldr	r2, [pc, #132]	; (2704 <_ext_irq_enable+0xc8>)
    267e:	00c9      	lsls	r1, r1, #3
    2680:	5c8a      	ldrb	r2, [r1, r2]
    2682:	701a      	strb	r2, [r3, #0]
			break;
    2684:	e00b      	b.n	269e <_ext_irq_enable+0x62>
	for (; i < ARRAY_SIZE(_map); i++) {
    2686:	230e      	movs	r3, #14
    2688:	18fb      	adds	r3, r7, r3
    268a:	781a      	ldrb	r2, [r3, #0]
    268c:	230e      	movs	r3, #14
    268e:	18fb      	adds	r3, r7, r3
    2690:	3201      	adds	r2, #1
    2692:	701a      	strb	r2, [r3, #0]
    2694:	230e      	movs	r3, #14
    2696:	18fb      	adds	r3, r7, r3
    2698:	781b      	ldrb	r3, [r3, #0]
    269a:	2b02      	cmp	r3, #2
    269c:	d9de      	bls.n	265c <_ext_irq_enable+0x20>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    269e:	230f      	movs	r3, #15
    26a0:	18fb      	adds	r3, r7, r3
    26a2:	781b      	ldrb	r3, [r3, #0]
    26a4:	2bff      	cmp	r3, #255	; 0xff
    26a6:	d102      	bne.n	26ae <_ext_irq_enable+0x72>
		return -1;
    26a8:	2301      	movs	r3, #1
    26aa:	425b      	negs	r3, r3
    26ac:	e026      	b.n	26fc <_ext_irq_enable+0xc0>
	}

	if (enable) {
    26ae:	1cfb      	adds	r3, r7, #3
    26b0:	781b      	ldrb	r3, [r3, #0]
    26b2:	2b00      	cmp	r3, #0
    26b4:	d00b      	beq.n	26ce <_ext_irq_enable+0x92>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    26b6:	230f      	movs	r3, #15
    26b8:	18fb      	adds	r3, r7, r3
    26ba:	781b      	ldrb	r3, [r3, #0]
    26bc:	2201      	movs	r2, #1
    26be:	409a      	lsls	r2, r3
    26c0:	0013      	movs	r3, r2
    26c2:	4a11      	ldr	r2, [pc, #68]	; (2708 <_ext_irq_enable+0xcc>)
    26c4:	0019      	movs	r1, r3
    26c6:	0010      	movs	r0, r2
    26c8:	4b10      	ldr	r3, [pc, #64]	; (270c <_ext_irq_enable+0xd0>)
    26ca:	4798      	blx	r3
    26cc:	e015      	b.n	26fa <_ext_irq_enable+0xbe>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    26ce:	230f      	movs	r3, #15
    26d0:	18fb      	adds	r3, r7, r3
    26d2:	781b      	ldrb	r3, [r3, #0]
    26d4:	2201      	movs	r2, #1
    26d6:	409a      	lsls	r2, r3
    26d8:	0013      	movs	r3, r2
    26da:	4a0b      	ldr	r2, [pc, #44]	; (2708 <_ext_irq_enable+0xcc>)
    26dc:	0019      	movs	r1, r3
    26de:	0010      	movs	r0, r2
    26e0:	4b0b      	ldr	r3, [pc, #44]	; (2710 <_ext_irq_enable+0xd4>)
    26e2:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    26e4:	230f      	movs	r3, #15
    26e6:	18fb      	adds	r3, r7, r3
    26e8:	781b      	ldrb	r3, [r3, #0]
    26ea:	2201      	movs	r2, #1
    26ec:	409a      	lsls	r2, r3
    26ee:	0013      	movs	r3, r2
    26f0:	4a05      	ldr	r2, [pc, #20]	; (2708 <_ext_irq_enable+0xcc>)
    26f2:	0019      	movs	r1, r3
    26f4:	0010      	movs	r0, r2
    26f6:	4b07      	ldr	r3, [pc, #28]	; (2714 <_ext_irq_enable+0xd8>)
    26f8:	4798      	blx	r3
	}

	return ERR_NONE;
    26fa:	2300      	movs	r3, #0
}
    26fc:	0018      	movs	r0, r3
    26fe:	46bd      	mov	sp, r7
    2700:	b004      	add	sp, #16
    2702:	bd80      	pop	{r7, pc}
    2704:	000046b0 	.word	0x000046b0
    2708:	40002800 	.word	0x40002800
    270c:	00002353 	.word	0x00002353
    2710:	0000236b 	.word	0x0000236b
    2714:	0000233b 	.word	0x0000233b

00002718 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    2718:	b580      	push	{r7, lr}
    271a:	b084      	sub	sp, #16
    271c:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    271e:	4b53      	ldr	r3, [pc, #332]	; (286c <_ext_irq_handler+0x154>)
    2720:	0018      	movs	r0, r3
    2722:	4b53      	ldr	r3, [pc, #332]	; (2870 <_ext_irq_handler+0x158>)
    2724:	4798      	blx	r3
    2726:	0003      	movs	r3, r0
    2728:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    272a:	2301      	movs	r3, #1
    272c:	425b      	negs	r3, r3
    272e:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    2730:	683b      	ldr	r3, [r7, #0]
    2732:	4a4e      	ldr	r2, [pc, #312]	; (286c <_ext_irq_handler+0x154>)
    2734:	0019      	movs	r1, r3
    2736:	0010      	movs	r0, r2
    2738:	4b4e      	ldr	r3, [pc, #312]	; (2874 <_ext_irq_handler+0x15c>)
    273a:	4798      	blx	r3

	ASSERT(callback);
    273c:	4b4e      	ldr	r3, [pc, #312]	; (2878 <_ext_irq_handler+0x160>)
    273e:	681b      	ldr	r3, [r3, #0]
    2740:	1e5a      	subs	r2, r3, #1
    2742:	4193      	sbcs	r3, r2
    2744:	b2db      	uxtb	r3, r3
    2746:	494d      	ldr	r1, [pc, #308]	; (287c <_ext_irq_handler+0x164>)
    2748:	22da      	movs	r2, #218	; 0xda
    274a:	0018      	movs	r0, r3
    274c:	4b4c      	ldr	r3, [pc, #304]	; (2880 <_ext_irq_handler+0x168>)
    274e:	4798      	blx	r3

	while (flags) {
    2750:	e084      	b.n	285c <_ext_irq_handler+0x144>
		pos = ffs(flags) - 1;
    2752:	683b      	ldr	r3, [r7, #0]
    2754:	0018      	movs	r0, r3
    2756:	4b4b      	ldr	r3, [pc, #300]	; (2884 <_ext_irq_handler+0x16c>)
    2758:	4798      	blx	r3
    275a:	0003      	movs	r3, r0
    275c:	b2db      	uxtb	r3, r3
    275e:	3b01      	subs	r3, #1
    2760:	b2da      	uxtb	r2, r3
    2762:	230f      	movs	r3, #15
    2764:	18fb      	adds	r3, r7, r3
    2766:	701a      	strb	r2, [r3, #0]
		while (-1 != pos) {
    2768:	e066      	b.n	2838 <_ext_irq_handler+0x120>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    276a:	1dfb      	adds	r3, r7, #7
    276c:	2200      	movs	r2, #0
    276e:	701a      	strb	r2, [r3, #0]
    2770:	1dbb      	adds	r3, r7, #6
    2772:	2203      	movs	r2, #3
    2774:	701a      	strb	r2, [r3, #0]

			while (upper >= lower) {
    2776:	e03b      	b.n	27f0 <_ext_irq_handler+0xd8>
				middle = (upper + lower) >> 1;
    2778:	1dbb      	adds	r3, r7, #6
    277a:	781a      	ldrb	r2, [r3, #0]
    277c:	1dfb      	adds	r3, r7, #7
    277e:	781b      	ldrb	r3, [r3, #0]
    2780:	18d3      	adds	r3, r2, r3
    2782:	105a      	asrs	r2, r3, #1
    2784:	1d7b      	adds	r3, r7, #5
    2786:	701a      	strb	r2, [r3, #0]
				if (_map[middle].extint == pos) {
    2788:	1d7b      	adds	r3, r7, #5
    278a:	781a      	ldrb	r2, [r3, #0]
    278c:	4b3e      	ldr	r3, [pc, #248]	; (2888 <_ext_irq_handler+0x170>)
    278e:	00d2      	lsls	r2, r2, #3
    2790:	5cd3      	ldrb	r3, [r2, r3]
    2792:	001a      	movs	r2, r3
    2794:	230f      	movs	r3, #15
    2796:	18fb      	adds	r3, r7, r3
    2798:	781b      	ldrb	r3, [r3, #0]
    279a:	b25b      	sxtb	r3, r3
    279c:	429a      	cmp	r2, r3
    279e:	d108      	bne.n	27b2 <_ext_irq_handler+0x9a>
					pin = _map[middle].pin;
    27a0:	1d7b      	adds	r3, r7, #5
    27a2:	781b      	ldrb	r3, [r3, #0]
    27a4:	4a38      	ldr	r2, [pc, #224]	; (2888 <_ext_irq_handler+0x170>)
    27a6:	00db      	lsls	r3, r3, #3
    27a8:	18d3      	adds	r3, r2, r3
    27aa:	3304      	adds	r3, #4
    27ac:	681b      	ldr	r3, [r3, #0]
    27ae:	60bb      	str	r3, [r7, #8]
					break;
    27b0:	e024      	b.n	27fc <_ext_irq_handler+0xe4>
				}
				if (_map[middle].extint < pos) {
    27b2:	1d7b      	adds	r3, r7, #5
    27b4:	781a      	ldrb	r2, [r3, #0]
    27b6:	4b34      	ldr	r3, [pc, #208]	; (2888 <_ext_irq_handler+0x170>)
    27b8:	00d2      	lsls	r2, r2, #3
    27ba:	5cd3      	ldrb	r3, [r2, r3]
    27bc:	001a      	movs	r2, r3
    27be:	230f      	movs	r3, #15
    27c0:	18fb      	adds	r3, r7, r3
    27c2:	781b      	ldrb	r3, [r3, #0]
    27c4:	b25b      	sxtb	r3, r3
    27c6:	429a      	cmp	r2, r3
    27c8:	da09      	bge.n	27de <_ext_irq_handler+0xc6>
					lower = middle + 1;
    27ca:	1dfb      	adds	r3, r7, #7
    27cc:	1d7a      	adds	r2, r7, #5
    27ce:	7812      	ldrb	r2, [r2, #0]
    27d0:	3201      	adds	r2, #1
    27d2:	701a      	strb	r2, [r3, #0]
    27d4:	1dbb      	adds	r3, r7, #6
    27d6:	1dba      	adds	r2, r7, #6
    27d8:	7812      	ldrb	r2, [r2, #0]
    27da:	701a      	strb	r2, [r3, #0]
    27dc:	e008      	b.n	27f0 <_ext_irq_handler+0xd8>
				} else {
					upper = middle - 1;
    27de:	1dbb      	adds	r3, r7, #6
    27e0:	1d7a      	adds	r2, r7, #5
    27e2:	7812      	ldrb	r2, [r2, #0]
    27e4:	3a01      	subs	r2, #1
    27e6:	701a      	strb	r2, [r3, #0]
    27e8:	1dfb      	adds	r3, r7, #7
    27ea:	1dfa      	adds	r2, r7, #7
    27ec:	7812      	ldrb	r2, [r2, #0]
    27ee:	701a      	strb	r2, [r3, #0]
			while (upper >= lower) {
    27f0:	1dba      	adds	r2, r7, #6
    27f2:	1dfb      	adds	r3, r7, #7
    27f4:	7812      	ldrb	r2, [r2, #0]
    27f6:	781b      	ldrb	r3, [r3, #0]
    27f8:	429a      	cmp	r2, r3
    27fa:	d2bd      	bcs.n	2778 <_ext_irq_handler+0x60>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    27fc:	68bb      	ldr	r3, [r7, #8]
    27fe:	3301      	adds	r3, #1
    2800:	d004      	beq.n	280c <_ext_irq_handler+0xf4>
				callback(pin);
    2802:	4b1d      	ldr	r3, [pc, #116]	; (2878 <_ext_irq_handler+0x160>)
    2804:	681b      	ldr	r3, [r3, #0]
    2806:	68ba      	ldr	r2, [r7, #8]
    2808:	0010      	movs	r0, r2
    280a:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    280c:	230f      	movs	r3, #15
    280e:	18fb      	adds	r3, r7, r3
    2810:	781b      	ldrb	r3, [r3, #0]
    2812:	b25b      	sxtb	r3, r3
    2814:	2201      	movs	r2, #1
    2816:	409a      	lsls	r2, r3
    2818:	0013      	movs	r3, r2
    281a:	43db      	mvns	r3, r3
    281c:	683a      	ldr	r2, [r7, #0]
    281e:	4013      	ands	r3, r2
    2820:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    2822:	683b      	ldr	r3, [r7, #0]
    2824:	0018      	movs	r0, r3
    2826:	4b17      	ldr	r3, [pc, #92]	; (2884 <_ext_irq_handler+0x16c>)
    2828:	4798      	blx	r3
    282a:	0003      	movs	r3, r0
    282c:	b2db      	uxtb	r3, r3
    282e:	3b01      	subs	r3, #1
    2830:	b2da      	uxtb	r2, r3
    2832:	230f      	movs	r3, #15
    2834:	18fb      	adds	r3, r7, r3
    2836:	701a      	strb	r2, [r3, #0]
		while (-1 != pos) {
    2838:	230f      	movs	r3, #15
    283a:	18fb      	adds	r3, r7, r3
    283c:	781b      	ldrb	r3, [r3, #0]
    283e:	b25b      	sxtb	r3, r3
    2840:	3301      	adds	r3, #1
    2842:	d192      	bne.n	276a <_ext_irq_handler+0x52>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    2844:	4b09      	ldr	r3, [pc, #36]	; (286c <_ext_irq_handler+0x154>)
    2846:	0018      	movs	r0, r3
    2848:	4b09      	ldr	r3, [pc, #36]	; (2870 <_ext_irq_handler+0x158>)
    284a:	4798      	blx	r3
    284c:	0003      	movs	r3, r0
    284e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    2850:	683b      	ldr	r3, [r7, #0]
    2852:	4a06      	ldr	r2, [pc, #24]	; (286c <_ext_irq_handler+0x154>)
    2854:	0019      	movs	r1, r3
    2856:	0010      	movs	r0, r2
    2858:	4b06      	ldr	r3, [pc, #24]	; (2874 <_ext_irq_handler+0x15c>)
    285a:	4798      	blx	r3
	while (flags) {
    285c:	683b      	ldr	r3, [r7, #0]
    285e:	2b00      	cmp	r3, #0
    2860:	d000      	beq.n	2864 <_ext_irq_handler+0x14c>
    2862:	e776      	b.n	2752 <_ext_irq_handler+0x3a>
	}
}
    2864:	46c0      	nop			; (mov r8, r8)
    2866:	46bd      	mov	sp, r7
    2868:	b004      	add	sp, #16
    286a:	bd80      	pop	{r7, pc}
    286c:	40002800 	.word	0x40002800
    2870:	00002327 	.word	0x00002327
    2874:	0000233b 	.word	0x0000233b
    2878:	20000058 	.word	0x20000058
    287c:	000046c8 	.word	0x000046c8
    2880:	00001ec1 	.word	0x00001ec1
    2884:	0000455d 	.word	0x0000455d
    2888:	000046b0 	.word	0x000046b0

0000288c <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    288c:	b580      	push	{r7, lr}
    288e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    2890:	4b02      	ldr	r3, [pc, #8]	; (289c <EIC_Handler+0x10>)
    2892:	4798      	blx	r3
}
    2894:	46c0      	nop			; (mov r8, r8)
    2896:	46bd      	mov	sp, r7
    2898:	bd80      	pop	{r7, pc}
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	00002719 	.word	0x00002719

000028a0 <hri_gclk_wait_for_sync>:
{
    28a0:	b580      	push	{r7, lr}
    28a2:	b082      	sub	sp, #8
    28a4:	af00      	add	r7, sp, #0
    28a6:	6078      	str	r0, [r7, #4]
    28a8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    28aa:	46c0      	nop			; (mov r8, r8)
    28ac:	687b      	ldr	r3, [r7, #4]
    28ae:	685b      	ldr	r3, [r3, #4]
    28b0:	683a      	ldr	r2, [r7, #0]
    28b2:	4013      	ands	r3, r2
    28b4:	d1fa      	bne.n	28ac <hri_gclk_wait_for_sync+0xc>
}
    28b6:	46c0      	nop			; (mov r8, r8)
    28b8:	46bd      	mov	sp, r7
    28ba:	b002      	add	sp, #8
    28bc:	bd80      	pop	{r7, pc}
	...

000028c0 <hri_gclk_write_GENCTRL_reg>:
{
    28c0:	b580      	push	{r7, lr}
    28c2:	b084      	sub	sp, #16
    28c4:	af00      	add	r7, sp, #0
    28c6:	60f8      	str	r0, [r7, #12]
    28c8:	607a      	str	r2, [r7, #4]
    28ca:	230b      	movs	r3, #11
    28cc:	18fb      	adds	r3, r7, r3
    28ce:	1c0a      	adds	r2, r1, #0
    28d0:	701a      	strb	r2, [r3, #0]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    28d2:	230b      	movs	r3, #11
    28d4:	18fb      	adds	r3, r7, r3
    28d6:	781a      	ldrb	r2, [r3, #0]
    28d8:	68fb      	ldr	r3, [r7, #12]
    28da:	3208      	adds	r2, #8
    28dc:	0092      	lsls	r2, r2, #2
    28de:	6879      	ldr	r1, [r7, #4]
    28e0:	50d1      	str	r1, [r2, r3]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    28e2:	4a05      	ldr	r2, [pc, #20]	; (28f8 <hri_gclk_write_GENCTRL_reg+0x38>)
    28e4:	68fb      	ldr	r3, [r7, #12]
    28e6:	0011      	movs	r1, r2
    28e8:	0018      	movs	r0, r3
    28ea:	4b04      	ldr	r3, [pc, #16]	; (28fc <hri_gclk_write_GENCTRL_reg+0x3c>)
    28ec:	4798      	blx	r3
}
    28ee:	46c0      	nop			; (mov r8, r8)
    28f0:	46bd      	mov	sp, r7
    28f2:	b004      	add	sp, #16
    28f4:	bd80      	pop	{r7, pc}
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	000007fd 	.word	0x000007fd
    28fc:	000028a1 	.word	0x000028a1

00002900 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    2900:	b580      	push	{r7, lr}
    2902:	b082      	sub	sp, #8
    2904:	af00      	add	r7, sp, #0
    2906:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	2201      	movs	r2, #1
    290c:	4013      	ands	r3, r2
    290e:	d005      	beq.n	291c <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    2910:	4a04      	ldr	r2, [pc, #16]	; (2924 <_gclk_init_generators_by_fref+0x24>)
    2912:	4b05      	ldr	r3, [pc, #20]	; (2928 <_gclk_init_generators_by_fref+0x28>)
    2914:	2100      	movs	r1, #0
    2916:	0018      	movs	r0, r3
    2918:	4b04      	ldr	r3, [pc, #16]	; (292c <_gclk_init_generators_by_fref+0x2c>)
    291a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    291c:	46c0      	nop			; (mov r8, r8)
    291e:	46bd      	mov	sp, r7
    2920:	b002      	add	sp, #8
    2922:	bd80      	pop	{r7, pc}
    2924:	00010106 	.word	0x00010106
    2928:	40001c00 	.word	0x40001c00
    292c:	000028c1 	.word	0x000028c1

00002930 <hri_mclk_write_CPUDIV_reg>:
{
    2930:	b580      	push	{r7, lr}
    2932:	b082      	sub	sp, #8
    2934:	af00      	add	r7, sp, #0
    2936:	6078      	str	r0, [r7, #4]
    2938:	000a      	movs	r2, r1
    293a:	1cfb      	adds	r3, r7, #3
    293c:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->CPUDIV.reg = data;
    293e:	687b      	ldr	r3, [r7, #4]
    2940:	1cfa      	adds	r2, r7, #3
    2942:	7812      	ldrb	r2, [r2, #0]
    2944:	711a      	strb	r2, [r3, #4]
}
    2946:	46c0      	nop			; (mov r8, r8)
    2948:	46bd      	mov	sp, r7
    294a:	b002      	add	sp, #8
    294c:	bd80      	pop	{r7, pc}
	...

00002950 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    2950:	b580      	push	{r7, lr}
    2952:	b082      	sub	sp, #8
    2954:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    2956:	4b05      	ldr	r3, [pc, #20]	; (296c <_mclk_init+0x1c>)
    2958:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
    295a:	687b      	ldr	r3, [r7, #4]
    295c:	2101      	movs	r1, #1
    295e:	0018      	movs	r0, r3
    2960:	4b03      	ldr	r3, [pc, #12]	; (2970 <_mclk_init+0x20>)
    2962:	4798      	blx	r3
}
    2964:	46c0      	nop			; (mov r8, r8)
    2966:	46bd      	mov	sp, r7
    2968:	b002      	add	sp, #8
    296a:	bd80      	pop	{r7, pc}
    296c:	40000800 	.word	0x40000800
    2970:	00002931 	.word	0x00002931

00002974 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    2974:	b580      	push	{r7, lr}
    2976:	b082      	sub	sp, #8
    2978:	af00      	add	r7, sp, #0
    297a:	6078      	str	r0, [r7, #4]
    297c:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    297e:	687b      	ldr	r3, [r7, #4]
    2980:	683a      	ldr	r2, [r7, #0]
    2982:	611a      	str	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    2984:	46c0      	nop			; (mov r8, r8)
    2986:	46bd      	mov	sp, r7
    2988:	b002      	add	sp, #8
    298a:	bd80      	pop	{r7, pc}

0000298c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    298c:	b580      	push	{r7, lr}
    298e:	b084      	sub	sp, #16
    2990:	af00      	add	r7, sp, #0
    2992:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	69db      	ldr	r3, [r3, #28]
    2998:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    299a:	68fb      	ldr	r3, [r7, #12]
    299c:	0a1b      	lsrs	r3, r3, #8
    299e:	221f      	movs	r2, #31
    29a0:	4013      	ands	r3, r2
    29a2:	60fb      	str	r3, [r7, #12]
	return tmp;
    29a4:	68fb      	ldr	r3, [r7, #12]
}
    29a6:	0018      	movs	r0, r3
    29a8:	46bd      	mov	sp, r7
    29aa:	b004      	add	sp, #16
    29ac:	bd80      	pop	{r7, pc}

000029ae <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    29ae:	b580      	push	{r7, lr}
    29b0:	b082      	sub	sp, #8
    29b2:	af00      	add	r7, sp, #0
    29b4:	6078      	str	r0, [r7, #4]
    29b6:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	683a      	ldr	r2, [r7, #0]
    29bc:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    29be:	46c0      	nop			; (mov r8, r8)
    29c0:	46bd      	mov	sp, r7
    29c2:	b002      	add	sp, #8
    29c4:	bd80      	pop	{r7, pc}
	...

000029c8 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    29c8:	b580      	push	{r7, lr}
    29ca:	b082      	sub	sp, #8
    29cc:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    29ce:	4b10      	ldr	r3, [pc, #64]	; (2a10 <_osc32kctrl_init_sources+0x48>)
    29d0:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    29d2:	1cbb      	adds	r3, r7, #2
    29d4:	2200      	movs	r2, #0
    29d6:	801a      	strh	r2, [r3, #0]
	        | (CONF_OSC32K_RUNSTDBY << OSC32KCTRL_OSC32K_RUNSTDBY_Pos)
	        | (CONF_OSC32K_EN1K << OSC32KCTRL_OSC32K_EN1K_Pos) | (CONF_OSC32K_EN32K << OSC32KCTRL_OSC32K_EN32K_Pos)
	        | (CONF_OSC32K_ENABLE << OSC32KCTRL_OSC32K_ENABLE_Pos));
#endif
#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    29d8:	687b      	ldr	r3, [r7, #4]
    29da:	0018      	movs	r0, r3
    29dc:	4b0d      	ldr	r3, [pc, #52]	; (2a14 <_osc32kctrl_init_sources+0x4c>)
    29de:	4798      	blx	r3
    29e0:	0002      	movs	r2, r0
    29e2:	1cbb      	adds	r3, r7, #2
    29e4:	801a      	strh	r2, [r3, #0]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    29e6:	1cbb      	adds	r3, r7, #2
    29e8:	881b      	ldrh	r3, [r3, #0]
    29ea:	021b      	lsls	r3, r3, #8
    29ec:	001a      	movs	r2, r3
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    29ee:	23f8      	movs	r3, #248	; 0xf8
    29f0:	015b      	lsls	r3, r3, #5
    29f2:	401a      	ands	r2, r3
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	0011      	movs	r1, r2
    29f8:	0018      	movs	r0, r3
    29fa:	4b07      	ldr	r3, [pc, #28]	; (2a18 <_osc32kctrl_init_sources+0x50>)
    29fc:	4798      	blx	r3
#if CONF_OSC32K_ENABLE == 1 && CONF_OSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_OSC32KRDY_bit(hw))
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	2101      	movs	r1, #1
    2a02:	0018      	movs	r0, r3
    2a04:	4b05      	ldr	r3, [pc, #20]	; (2a1c <_osc32kctrl_init_sources+0x54>)
    2a06:	4798      	blx	r3
	(void)calib;
}
    2a08:	46c0      	nop			; (mov r8, r8)
    2a0a:	46bd      	mov	sp, r7
    2a0c:	b002      	add	sp, #8
    2a0e:	bd80      	pop	{r7, pc}
    2a10:	40001400 	.word	0x40001400
    2a14:	0000298d 	.word	0x0000298d
    2a18:	000029af 	.word	0x000029af
    2a1c:	00002975 	.word	0x00002975

00002a20 <hri_oscctrl_osc48msyncbusy_wait_for_sync>:
typedef uint8_t  hri_oscctrl_osc48mctrl_reg_t;
typedef uint8_t  hri_oscctrl_osc48mdiv_reg_t;
typedef uint8_t  hri_oscctrl_osc48mstup_reg_t;

static inline void hri_oscctrl_osc48msyncbusy_wait_for_sync(const void *const hw, hri_oscctrl_osc48msyncbusy_reg_t reg)
{
    2a20:	b580      	push	{r7, lr}
    2a22:	b082      	sub	sp, #8
    2a24:	af00      	add	r7, sp, #0
    2a26:	6078      	str	r0, [r7, #4]
    2a28:	6039      	str	r1, [r7, #0]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	687b      	ldr	r3, [r7, #4]
    2a2e:	699b      	ldr	r3, [r3, #24]
    2a30:	683a      	ldr	r2, [r7, #0]
    2a32:	4013      	ands	r3, r2
    2a34:	d1fa      	bne.n	2a2c <hri_oscctrl_osc48msyncbusy_wait_for_sync+0xc>
	};
}
    2a36:	46c0      	nop			; (mov r8, r8)
    2a38:	46bd      	mov	sp, r7
    2a3a:	b002      	add	sp, #8
    2a3c:	bd80      	pop	{r7, pc}

00002a3e <hri_oscctrl_get_STATUS_OSC48MRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW) >> OSCCTRL_STATUS_XOSCCKSW_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC48MRDY_bit(const void *const hw)
{
    2a3e:	b580      	push	{r7, lr}
    2a40:	b082      	sub	sp, #8
    2a42:	af00      	add	r7, sp, #0
    2a44:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	68db      	ldr	r3, [r3, #12]
    2a4a:	091b      	lsrs	r3, r3, #4
    2a4c:	2201      	movs	r2, #1
    2a4e:	4013      	ands	r3, r2
    2a50:	1e5a      	subs	r2, r3, #1
    2a52:	4193      	sbcs	r3, r2
    2a54:	b2db      	uxtb	r3, r3
}
    2a56:	0018      	movs	r0, r3
    2a58:	46bd      	mov	sp, r7
    2a5a:	b002      	add	sp, #8
    2a5c:	bd80      	pop	{r7, pc}

00002a5e <hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit>:
{
	return ((Oscctrl *)hw)->STATUS.reg;
}

static inline bool hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(const void *const hw)
{
    2a5e:	b580      	push	{r7, lr}
    2a60:	b082      	sub	sp, #8
    2a62:	af00      	add	r7, sp, #0
    2a64:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
    2a66:	687b      	ldr	r3, [r7, #4]
    2a68:	699b      	ldr	r3, [r3, #24]
	       >> OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV_Pos;
    2a6a:	089b      	lsrs	r3, r3, #2
    2a6c:	2201      	movs	r2, #1
    2a6e:	4013      	ands	r3, r2
    2a70:	1e5a      	subs	r2, r3, #1
    2a72:	4193      	sbcs	r3, r2
    2a74:	b2db      	uxtb	r3, r3
}
    2a76:	0018      	movs	r0, r3
    2a78:	46bd      	mov	sp, r7
    2a7a:	b002      	add	sp, #8
    2a7c:	bd80      	pop	{r7, pc}

00002a7e <hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit>:
	((Oscctrl *)hw)->OSC48MCTRL.reg ^= OSCCTRL_OSC48MCTRL_RUNSTDBY;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(const void *const hw)
{
    2a7e:	b580      	push	{r7, lr}
    2a80:	b082      	sub	sp, #8
    2a82:	af00      	add	r7, sp, #0
    2a84:	6078      	str	r0, [r7, #4]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
    2a86:	687b      	ldr	r3, [r7, #4]
    2a88:	7d1b      	ldrb	r3, [r3, #20]
    2a8a:	b2db      	uxtb	r3, r3
    2a8c:	2280      	movs	r2, #128	; 0x80
    2a8e:	4252      	negs	r2, r2
    2a90:	4313      	orrs	r3, r2
    2a92:	b2da      	uxtb	r2, r3
    2a94:	687b      	ldr	r3, [r7, #4]
    2a96:	751a      	strb	r2, [r3, #20]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2a98:	46c0      	nop			; (mov r8, r8)
    2a9a:	46bd      	mov	sp, r7
    2a9c:	b002      	add	sp, #8
    2a9e:	bd80      	pop	{r7, pc}

00002aa0 <hri_oscctrl_write_OSC48MCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
    2aa0:	b580      	push	{r7, lr}
    2aa2:	b082      	sub	sp, #8
    2aa4:	af00      	add	r7, sp, #0
    2aa6:	6078      	str	r0, [r7, #4]
    2aa8:	000a      	movs	r2, r1
    2aaa:	1cfb      	adds	r3, r7, #3
    2aac:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
    2aae:	687b      	ldr	r3, [r7, #4]
    2ab0:	1cfa      	adds	r2, r7, #3
    2ab2:	7812      	ldrb	r2, [r2, #0]
    2ab4:	751a      	strb	r2, [r3, #20]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2ab6:	46c0      	nop			; (mov r8, r8)
    2ab8:	46bd      	mov	sp, r7
    2aba:	b002      	add	sp, #8
    2abc:	bd80      	pop	{r7, pc}
	...

00002ac0 <hri_oscctrl_write_OSC48MDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	b082      	sub	sp, #8
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	6078      	str	r0, [r7, #4]
    2ac8:	000a      	movs	r2, r1
    2aca:	1cfb      	adds	r3, r7, #3
    2acc:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
    2ace:	687b      	ldr	r3, [r7, #4]
    2ad0:	1cfa      	adds	r2, r7, #3
    2ad2:	7812      	ldrb	r2, [r2, #0]
    2ad4:	755a      	strb	r2, [r3, #21]
	hri_oscctrl_osc48msyncbusy_wait_for_sync(hw, OSCCTRL_OSC48MSYNCBUSY_MASK);
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	2104      	movs	r1, #4
    2ada:	0018      	movs	r0, r3
    2adc:	4b02      	ldr	r3, [pc, #8]	; (2ae8 <hri_oscctrl_write_OSC48MDIV_reg+0x28>)
    2ade:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2ae0:	46c0      	nop			; (mov r8, r8)
    2ae2:	46bd      	mov	sp, r7
    2ae4:	b002      	add	sp, #8
    2ae6:	bd80      	pop	{r7, pc}
    2ae8:	00002a21 	.word	0x00002a21

00002aec <hri_oscctrl_write_OSC48MSTUP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
    2aec:	b580      	push	{r7, lr}
    2aee:	b082      	sub	sp, #8
    2af0:	af00      	add	r7, sp, #0
    2af2:	6078      	str	r0, [r7, #4]
    2af4:	000a      	movs	r2, r1
    2af6:	1cfb      	adds	r3, r7, #3
    2af8:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
    2afa:	687b      	ldr	r3, [r7, #4]
    2afc:	1cfa      	adds	r2, r7, #3
    2afe:	7812      	ldrb	r2, [r2, #0]
    2b00:	759a      	strb	r2, [r3, #22]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	46bd      	mov	sp, r7
    2b06:	b002      	add	sp, #8
    2b08:	bd80      	pop	{r7, pc}
	...

00002b0c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	b082      	sub	sp, #8
    2b10:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    2b12:	4b16      	ldr	r3, [pc, #88]	; (2b6c <_oscctrl_init_sources+0x60>)
    2b14:	607b      	str	r3, [r7, #4]
	        | (CONF_XOSC_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));

	hri_oscctrl_write_EVCTRL_reg(hw, (CONF_XOSC_CFDEO << OSCCTRL_EVCTRL_CFDEO_Pos));
#endif
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	2102      	movs	r1, #2
    2b1a:	0018      	movs	r0, r3
    2b1c:	4b14      	ldr	r3, [pc, #80]	; (2b70 <_oscctrl_init_sources+0x64>)
    2b1e:	4798      	blx	r3
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
    2b20:	687b      	ldr	r3, [r7, #4]
    2b22:	2100      	movs	r1, #0
    2b24:	0018      	movs	r0, r3
    2b26:	4b13      	ldr	r3, [pc, #76]	; (2b74 <_oscctrl_init_sources+0x68>)
    2b28:	4798      	blx	r3
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	687b      	ldr	r3, [r7, #4]
    2b2e:	0018      	movs	r0, r3
    2b30:	4b11      	ldr	r3, [pc, #68]	; (2b78 <_oscctrl_init_sources+0x6c>)
    2b32:	4798      	blx	r3
    2b34:	1e03      	subs	r3, r0, #0
    2b36:	d1f9      	bne.n	2b2c <_oscctrl_init_sources+0x20>
		;
	hri_oscctrl_write_OSC48MSTUP_reg(hw, OSCCTRL_OSC48MSTUP_STARTUP(CONF_OSC48M_STARTUP));
    2b38:	687b      	ldr	r3, [r7, #4]
    2b3a:	2107      	movs	r1, #7
    2b3c:	0018      	movs	r0, r3
    2b3e:	4b0f      	ldr	r3, [pc, #60]	; (2b7c <_oscctrl_init_sources+0x70>)
    2b40:	4798      	blx	r3
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	687b      	ldr	r3, [r7, #4]
    2b46:	0018      	movs	r0, r3
    2b48:	4b0d      	ldr	r3, [pc, #52]	; (2b80 <_oscctrl_init_sources+0x74>)
    2b4a:	4798      	blx	r3
    2b4c:	0003      	movs	r3, r0
    2b4e:	001a      	movs	r2, r3
    2b50:	2301      	movs	r3, #1
    2b52:	4053      	eors	r3, r2
    2b54:	b2db      	uxtb	r3, r3
    2b56:	2b00      	cmp	r3, #0
    2b58:	d1f4      	bne.n	2b44 <_oscctrl_init_sources+0x38>
		;
#endif
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	0018      	movs	r0, r3
    2b5e:	4b09      	ldr	r3, [pc, #36]	; (2b84 <_oscctrl_init_sources+0x78>)
    2b60:	4798      	blx	r3
#endif
#endif
	(void)hw;
}
    2b62:	46c0      	nop			; (mov r8, r8)
    2b64:	46bd      	mov	sp, r7
    2b66:	b002      	add	sp, #8
    2b68:	bd80      	pop	{r7, pc}
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	40001000 	.word	0x40001000
    2b70:	00002aa1 	.word	0x00002aa1
    2b74:	00002ac1 	.word	0x00002ac1
    2b78:	00002a5f 	.word	0x00002a5f
    2b7c:	00002aed 	.word	0x00002aed
    2b80:	00002a3f 	.word	0x00002a3f
    2b84:	00002a7f 	.word	0x00002a7f

00002b88 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    2b88:	b580      	push	{r7, lr}
    2b8a:	b082      	sub	sp, #8
    2b8c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    2b8e:	4b03      	ldr	r3, [pc, #12]	; (2b9c <_oscctrl_init_referenced_generators+0x14>)
    2b90:	607b      	str	r3, [r7, #4]
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	46bd      	mov	sp, r7
    2b96:	b002      	add	sp, #8
    2b98:	bd80      	pop	{r7, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	40001000 	.word	0x40001000

00002ba0 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    2ba0:	b580      	push	{r7, lr}
    2ba2:	b082      	sub	sp, #8
    2ba4:	af00      	add	r7, sp, #0
    2ba6:	6078      	str	r0, [r7, #4]
    2ba8:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	691b      	ldr	r3, [r3, #16]
    2bb0:	683a      	ldr	r2, [r7, #0]
    2bb2:	4013      	ands	r3, r2
    2bb4:	d1fa      	bne.n	2bac <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	46bd      	mov	sp, r7
    2bba:	b002      	add	sp, #8
    2bbc:	bd80      	pop	{r7, pc}

00002bbe <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    2bbe:	b580      	push	{r7, lr}
    2bc0:	b082      	sub	sp, #8
    2bc2:	af00      	add	r7, sp, #0
    2bc4:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2bc6:	687b      	ldr	r3, [r7, #4]
    2bc8:	2280      	movs	r2, #128	; 0x80
    2bca:	0052      	lsls	r2, r2, #1
    2bcc:	819a      	strh	r2, [r3, #12]
}
    2bce:	46c0      	nop			; (mov r8, r8)
    2bd0:	46bd      	mov	sp, r7
    2bd2:	b002      	add	sp, #8
    2bd4:	bd80      	pop	{r7, pc}

00002bd6 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    2bd6:	b580      	push	{r7, lr}
    2bd8:	b082      	sub	sp, #8
    2bda:	af00      	add	r7, sp, #0
    2bdc:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	899b      	ldrh	r3, [r3, #12]
    2be2:	b29b      	uxth	r3, r3
}
    2be4:	0018      	movs	r0, r3
    2be6:	46bd      	mov	sp, r7
    2be8:	b002      	add	sp, #8
    2bea:	bd80      	pop	{r7, pc}

00002bec <hri_rtcmode0_set_INTEN_CMP0_bit>:
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_PER7;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
    2bec:	b580      	push	{r7, lr}
    2bee:	b082      	sub	sp, #8
    2bf0:	af00      	add	r7, sp, #0
    2bf2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    2bf4:	687b      	ldr	r3, [r7, #4]
    2bf6:	2280      	movs	r2, #128	; 0x80
    2bf8:	0052      	lsls	r2, r2, #1
    2bfa:	815a      	strh	r2, [r3, #10]
}
    2bfc:	46c0      	nop			; (mov r8, r8)
    2bfe:	46bd      	mov	sp, r7
    2c00:	b002      	add	sp, #8
    2c02:	bd80      	pop	{r7, pc}

00002c04 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    2c04:	b580      	push	{r7, lr}
    2c06:	b082      	sub	sp, #8
    2c08:	af00      	add	r7, sp, #0
    2c0a:	6078      	str	r0, [r7, #4]
    2c0c:	000a      	movs	r2, r1
    2c0e:	1cbb      	adds	r3, r7, #2
    2c10:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2c12:	687b      	ldr	r3, [r7, #4]
    2c14:	1cba      	adds	r2, r7, #2
    2c16:	8812      	ldrh	r2, [r2, #0]
    2c18:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    2c1a:	4a05      	ldr	r2, [pc, #20]	; (2c30 <hri_rtcmode0_write_CTRLA_reg+0x2c>)
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	0011      	movs	r1, r2
    2c20:	0018      	movs	r0, r3
    2c22:	4b04      	ldr	r3, [pc, #16]	; (2c34 <hri_rtcmode0_write_CTRLA_reg+0x30>)
    2c24:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    2c26:	46c0      	nop			; (mov r8, r8)
    2c28:	46bd      	mov	sp, r7
    2c2a:	b002      	add	sp, #8
    2c2c:	bd80      	pop	{r7, pc}
    2c2e:	46c0      	nop			; (mov r8, r8)
    2c30:	00008003 	.word	0x00008003
    2c34:	00002ba1 	.word	0x00002ba1

00002c38 <hri_rtcmode0_write_COMP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
    2c38:	b580      	push	{r7, lr}
    2c3a:	b084      	sub	sp, #16
    2c3c:	af00      	add	r7, sp, #0
    2c3e:	60f8      	str	r0, [r7, #12]
    2c40:	607a      	str	r2, [r7, #4]
    2c42:	230b      	movs	r3, #11
    2c44:	18fb      	adds	r3, r7, r3
    2c46:	1c0a      	adds	r2, r1, #0
    2c48:	701a      	strb	r2, [r3, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    2c4a:	230b      	movs	r3, #11
    2c4c:	18fb      	adds	r3, r7, r3
    2c4e:	781a      	ldrb	r2, [r3, #0]
    2c50:	68fb      	ldr	r3, [r7, #12]
    2c52:	3208      	adds	r2, #8
    2c54:	0092      	lsls	r2, r2, #2
    2c56:	6879      	ldr	r1, [r7, #4]
    2c58:	50d1      	str	r1, [r2, r3]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0);
    2c5a:	68fb      	ldr	r3, [r7, #12]
    2c5c:	2120      	movs	r1, #32
    2c5e:	0018      	movs	r0, r3
    2c60:	4b02      	ldr	r3, [pc, #8]	; (2c6c <hri_rtcmode0_write_COMP_reg+0x34>)
    2c62:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    2c64:	46c0      	nop			; (mov r8, r8)
    2c66:	46bd      	mov	sp, r7
    2c68:	b004      	add	sp, #16
    2c6a:	bd80      	pop	{r7, pc}
    2c6c:	00002ba1 	.word	0x00002ba1

00002c70 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    2c70:	b580      	push	{r7, lr}
    2c72:	b082      	sub	sp, #8
    2c74:	af00      	add	r7, sp, #0
    2c76:	6078      	str	r0, [r7, #4]
    2c78:	6039      	str	r1, [r7, #0]
	ASSERT(dev);
    2c7a:	687b      	ldr	r3, [r7, #4]
    2c7c:	1e5a      	subs	r2, r3, #1
    2c7e:	4193      	sbcs	r3, r2
    2c80:	b2db      	uxtb	r3, r3
    2c82:	4918      	ldr	r1, [pc, #96]	; (2ce4 <_timer_init+0x74>)
    2c84:	2230      	movs	r2, #48	; 0x30
    2c86:	0018      	movs	r0, r3
    2c88:	4b17      	ldr	r3, [pc, #92]	; (2ce8 <_timer_init+0x78>)
    2c8a:	4798      	blx	r3

	dev->hw = hw;
    2c8c:	687b      	ldr	r3, [r7, #4]
    2c8e:	683a      	ldr	r2, [r7, #0]
    2c90:	60da      	str	r2, [r3, #12]

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	68db      	ldr	r3, [r3, #12]
    2c96:	2101      	movs	r1, #1
    2c98:	0018      	movs	r0, r3
    2c9a:	4b14      	ldr	r3, [pc, #80]	; (2cec <_timer_init+0x7c>)
    2c9c:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2c9e:	687b      	ldr	r3, [r7, #4]
    2ca0:	68db      	ldr	r3, [r3, #12]
    2ca2:	2101      	movs	r1, #1
    2ca4:	0018      	movs	r0, r3
    2ca6:	4b12      	ldr	r3, [pc, #72]	; (2cf0 <_timer_init+0x80>)
    2ca8:	4798      	blx	r3
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    2caa:	687b      	ldr	r3, [r7, #4]
    2cac:	68db      	ldr	r3, [r3, #12]
	hri_rtcmode0_write_CTRLA_reg(
    2cae:	4a11      	ldr	r2, [pc, #68]	; (2cf4 <_timer_init+0x84>)
    2cb0:	0011      	movs	r1, r2
    2cb2:	0018      	movs	r0, r3
    2cb4:	4b0d      	ldr	r3, [pc, #52]	; (2cec <_timer_init+0x7c>)
    2cb6:	4798      	blx	r3
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	68d8      	ldr	r0, [r3, #12]
    2cbc:	2348      	movs	r3, #72	; 0x48
    2cbe:	33ff      	adds	r3, #255	; 0xff
    2cc0:	001a      	movs	r2, r3
    2cc2:	2100      	movs	r1, #0
    2cc4:	4b0c      	ldr	r3, [pc, #48]	; (2cf8 <_timer_init+0x88>)
    2cc6:	4798      	blx	r3
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	68db      	ldr	r3, [r3, #12]
    2ccc:	0018      	movs	r0, r3
    2cce:	4b0b      	ldr	r3, [pc, #44]	; (2cfc <_timer_init+0x8c>)
    2cd0:	4798      	blx	r3

	_rtc_dev = dev;
    2cd2:	4b0b      	ldr	r3, [pc, #44]	; (2d00 <_timer_init+0x90>)
    2cd4:	687a      	ldr	r2, [r7, #4]
    2cd6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    2cd8:	2300      	movs	r3, #0
}
    2cda:	0018      	movs	r0, r3
    2cdc:	46bd      	mov	sp, r7
    2cde:	b002      	add	sp, #8
    2ce0:	bd80      	pop	{r7, pc}
    2ce2:	46c0      	nop			; (mov r8, r8)
    2ce4:	000046e0 	.word	0x000046e0
    2ce8:	00001ec1 	.word	0x00001ec1
    2cec:	00002c05 	.word	0x00002c05
    2cf0:	00002ba1 	.word	0x00002ba1
    2cf4:	00008080 	.word	0x00008080
    2cf8:	00002c39 	.word	0x00002c39
    2cfc:	00002bed 	.word	0x00002bed
    2d00:	2000005c 	.word	0x2000005c

00002d04 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
    2d04:	b590      	push	{r4, r7, lr}
    2d06:	b085      	sub	sp, #20
    2d08:	af00      	add	r7, sp, #0
    2d0a:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2d0c:	687b      	ldr	r3, [r7, #4]
    2d0e:	68db      	ldr	r3, [r3, #12]
    2d10:	220e      	movs	r2, #14
    2d12:	18bc      	adds	r4, r7, r2
    2d14:	0018      	movs	r0, r3
    2d16:	4b0e      	ldr	r3, [pc, #56]	; (2d50 <_rtc_timer_interrupt_handler+0x4c>)
    2d18:	4798      	blx	r3
    2d1a:	0003      	movs	r3, r0
    2d1c:	8023      	strh	r3, [r4, #0]

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    2d1e:	230e      	movs	r3, #14
    2d20:	18fb      	adds	r3, r7, r3
    2d22:	881a      	ldrh	r2, [r3, #0]
    2d24:	2380      	movs	r3, #128	; 0x80
    2d26:	005b      	lsls	r3, r3, #1
    2d28:	4013      	ands	r3, r2
    2d2a:	d00d      	beq.n	2d48 <_rtc_timer_interrupt_handler+0x44>
		if (dev->timer_cb.period_expired) {
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	681b      	ldr	r3, [r3, #0]
    2d30:	2b00      	cmp	r3, #0
    2d32:	d004      	beq.n	2d3e <_rtc_timer_interrupt_handler+0x3a>
			dev->timer_cb.period_expired(dev);
    2d34:	687b      	ldr	r3, [r7, #4]
    2d36:	681b      	ldr	r3, [r3, #0]
    2d38:	687a      	ldr	r2, [r7, #4]
    2d3a:	0010      	movs	r0, r2
    2d3c:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2d3e:	687b      	ldr	r3, [r7, #4]
    2d40:	68db      	ldr	r3, [r3, #12]
    2d42:	0018      	movs	r0, r3
    2d44:	4b03      	ldr	r3, [pc, #12]	; (2d54 <_rtc_timer_interrupt_handler+0x50>)
    2d46:	4798      	blx	r3
	}
}
    2d48:	46c0      	nop			; (mov r8, r8)
    2d4a:	46bd      	mov	sp, r7
    2d4c:	b005      	add	sp, #20
    2d4e:	bd90      	pop	{r4, r7, pc}
    2d50:	00002bd7 	.word	0x00002bd7
    2d54:	00002bbf 	.word	0x00002bbf

00002d58 <_rtc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
    2d58:	b580      	push	{r7, lr}
    2d5a:	af00      	add	r7, sp, #0
	return NULL;
    2d5c:	2300      	movs	r3, #0
}
    2d5e:	0018      	movs	r0, r3
    2d60:	46bd      	mov	sp, r7
    2d62:	bd80      	pop	{r7, pc}

00002d64 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2d64:	b580      	push	{r7, lr}
    2d66:	af00      	add	r7, sp, #0
	_rtc_timer_interrupt_handler(_rtc_dev);
    2d68:	4b03      	ldr	r3, [pc, #12]	; (2d78 <RTC_Handler+0x14>)
    2d6a:	681b      	ldr	r3, [r3, #0]
    2d6c:	0018      	movs	r0, r3
    2d6e:	4b03      	ldr	r3, [pc, #12]	; (2d7c <RTC_Handler+0x18>)
    2d70:	4798      	blx	r3
}
    2d72:	46c0      	nop			; (mov r8, r8)
    2d74:	46bd      	mov	sp, r7
    2d76:	bd80      	pop	{r7, pc}
    2d78:	2000005c 	.word	0x2000005c
    2d7c:	00002d05 	.word	0x00002d05

00002d80 <__NVIC_EnableIRQ>:
{
    2d80:	b580      	push	{r7, lr}
    2d82:	b082      	sub	sp, #8
    2d84:	af00      	add	r7, sp, #0
    2d86:	0002      	movs	r2, r0
    2d88:	1dfb      	adds	r3, r7, #7
    2d8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2d8c:	1dfb      	adds	r3, r7, #7
    2d8e:	781b      	ldrb	r3, [r3, #0]
    2d90:	2b7f      	cmp	r3, #127	; 0x7f
    2d92:	d809      	bhi.n	2da8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d94:	4b06      	ldr	r3, [pc, #24]	; (2db0 <__NVIC_EnableIRQ+0x30>)
    2d96:	1dfa      	adds	r2, r7, #7
    2d98:	7812      	ldrb	r2, [r2, #0]
    2d9a:	0011      	movs	r1, r2
    2d9c:	221f      	movs	r2, #31
    2d9e:	400a      	ands	r2, r1
    2da0:	2101      	movs	r1, #1
    2da2:	4091      	lsls	r1, r2
    2da4:	000a      	movs	r2, r1
    2da6:	601a      	str	r2, [r3, #0]
}
    2da8:	46c0      	nop			; (mov r8, r8)
    2daa:	46bd      	mov	sp, r7
    2dac:	b002      	add	sp, #8
    2dae:	bd80      	pop	{r7, pc}
    2db0:	e000e100 	.word	0xe000e100

00002db4 <__NVIC_DisableIRQ>:
{
    2db4:	b580      	push	{r7, lr}
    2db6:	b082      	sub	sp, #8
    2db8:	af00      	add	r7, sp, #0
    2dba:	0002      	movs	r2, r0
    2dbc:	1dfb      	adds	r3, r7, #7
    2dbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2dc0:	1dfb      	adds	r3, r7, #7
    2dc2:	781b      	ldrb	r3, [r3, #0]
    2dc4:	2b7f      	cmp	r3, #127	; 0x7f
    2dc6:	d80e      	bhi.n	2de6 <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2dc8:	4909      	ldr	r1, [pc, #36]	; (2df0 <__NVIC_DisableIRQ+0x3c>)
    2dca:	1dfb      	adds	r3, r7, #7
    2dcc:	781b      	ldrb	r3, [r3, #0]
    2dce:	001a      	movs	r2, r3
    2dd0:	231f      	movs	r3, #31
    2dd2:	4013      	ands	r3, r2
    2dd4:	2201      	movs	r2, #1
    2dd6:	409a      	lsls	r2, r3
    2dd8:	0013      	movs	r3, r2
    2dda:	2280      	movs	r2, #128	; 0x80
    2ddc:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    2dde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2de2:	f3bf 8f6f 	isb	sy
}
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	46bd      	mov	sp, r7
    2dea:	b002      	add	sp, #8
    2dec:	bd80      	pop	{r7, pc}
    2dee:	46c0      	nop			; (mov r8, r8)
    2df0:	e000e100 	.word	0xe000e100

00002df4 <__NVIC_ClearPendingIRQ>:
{
    2df4:	b580      	push	{r7, lr}
    2df6:	b082      	sub	sp, #8
    2df8:	af00      	add	r7, sp, #0
    2dfa:	0002      	movs	r2, r0
    2dfc:	1dfb      	adds	r3, r7, #7
    2dfe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2e00:	1dfb      	adds	r3, r7, #7
    2e02:	781b      	ldrb	r3, [r3, #0]
    2e04:	2b7f      	cmp	r3, #127	; 0x7f
    2e06:	d80a      	bhi.n	2e1e <__NVIC_ClearPendingIRQ+0x2a>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e08:	4907      	ldr	r1, [pc, #28]	; (2e28 <__NVIC_ClearPendingIRQ+0x34>)
    2e0a:	1dfb      	adds	r3, r7, #7
    2e0c:	781b      	ldrb	r3, [r3, #0]
    2e0e:	001a      	movs	r2, r3
    2e10:	231f      	movs	r3, #31
    2e12:	4013      	ands	r3, r2
    2e14:	2201      	movs	r2, #1
    2e16:	409a      	lsls	r2, r3
    2e18:	23c0      	movs	r3, #192	; 0xc0
    2e1a:	005b      	lsls	r3, r3, #1
    2e1c:	50ca      	str	r2, [r1, r3]
}
    2e1e:	46c0      	nop			; (mov r8, r8)
    2e20:	46bd      	mov	sp, r7
    2e22:	b002      	add	sp, #8
    2e24:	bd80      	pop	{r7, pc}
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	e000e100 	.word	0xe000e100

00002e2c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    2e2c:	b580      	push	{r7, lr}
    2e2e:	b082      	sub	sp, #8
    2e30:	af00      	add	r7, sp, #0
    2e32:	6078      	str	r0, [r7, #4]
    2e34:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	687b      	ldr	r3, [r7, #4]
    2e3a:	69db      	ldr	r3, [r3, #28]
    2e3c:	683a      	ldr	r2, [r7, #0]
    2e3e:	4013      	ands	r3, r2
    2e40:	d1fa      	bne.n	2e38 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    2e42:	46c0      	nop			; (mov r8, r8)
    2e44:	46bd      	mov	sp, r7
    2e46:	b002      	add	sp, #8
    2e48:	bd80      	pop	{r7, pc}

00002e4a <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    2e4a:	b580      	push	{r7, lr}
    2e4c:	b082      	sub	sp, #8
    2e4e:	af00      	add	r7, sp, #0
    2e50:	6078      	str	r0, [r7, #4]
    2e52:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2e54:	687b      	ldr	r3, [r7, #4]
    2e56:	69db      	ldr	r3, [r3, #28]
    2e58:	683a      	ldr	r2, [r7, #0]
    2e5a:	4013      	ands	r3, r2
    2e5c:	1e5a      	subs	r2, r3, #1
    2e5e:	4193      	sbcs	r3, r2
    2e60:	b2db      	uxtb	r3, r3
}
    2e62:	0018      	movs	r0, r3
    2e64:	46bd      	mov	sp, r7
    2e66:	b002      	add	sp, #8
    2e68:	bd80      	pop	{r7, pc}

00002e6a <hri_sercomspi_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    2e6a:	b580      	push	{r7, lr}
    2e6c:	b082      	sub	sp, #8
    2e6e:	af00      	add	r7, sp, #0
    2e70:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2e72:	687b      	ldr	r3, [r7, #4]
    2e74:	7e1b      	ldrb	r3, [r3, #24]
    2e76:	b2db      	uxtb	r3, r3
}
    2e78:	0018      	movs	r0, r3
    2e7a:	46bd      	mov	sp, r7
    2e7c:	b002      	add	sp, #8
    2e7e:	bd80      	pop	{r7, pc}

00002e80 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    2e80:	b580      	push	{r7, lr}
    2e82:	b082      	sub	sp, #8
    2e84:	af00      	add	r7, sp, #0
    2e86:	6078      	str	r0, [r7, #4]
    2e88:	000a      	movs	r2, r1
    2e8a:	1cfb      	adds	r3, r7, #3
    2e8c:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2e8e:	687b      	ldr	r3, [r7, #4]
    2e90:	1cfa      	adds	r2, r7, #3
    2e92:	7812      	ldrb	r2, [r2, #0]
    2e94:	761a      	strb	r2, [r3, #24]
}
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	46bd      	mov	sp, r7
    2e9a:	b002      	add	sp, #8
    2e9c:	bd80      	pop	{r7, pc}

00002e9e <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    2e9e:	b580      	push	{r7, lr}
    2ea0:	b082      	sub	sp, #8
    2ea2:	af00      	add	r7, sp, #0
    2ea4:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    2ea6:	687b      	ldr	r3, [r7, #4]
    2ea8:	2201      	movs	r2, #1
    2eaa:	759a      	strb	r2, [r3, #22]
}
    2eac:	46c0      	nop			; (mov r8, r8)
    2eae:	46bd      	mov	sp, r7
    2eb0:	b002      	add	sp, #8
    2eb2:	bd80      	pop	{r7, pc}

00002eb4 <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    2eb4:	b580      	push	{r7, lr}
    2eb6:	b082      	sub	sp, #8
    2eb8:	af00      	add	r7, sp, #0
    2eba:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    2ebc:	687b      	ldr	r3, [r7, #4]
    2ebe:	2201      	movs	r2, #1
    2ec0:	751a      	strb	r2, [r3, #20]
}
    2ec2:	46c0      	nop			; (mov r8, r8)
    2ec4:	46bd      	mov	sp, r7
    2ec6:	b002      	add	sp, #8
    2ec8:	bd80      	pop	{r7, pc}

00002eca <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    2eca:	b580      	push	{r7, lr}
    2ecc:	b082      	sub	sp, #8
    2ece:	af00      	add	r7, sp, #0
    2ed0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    2ed2:	687b      	ldr	r3, [r7, #4]
    2ed4:	2202      	movs	r2, #2
    2ed6:	759a      	strb	r2, [r3, #22]
}
    2ed8:	46c0      	nop			; (mov r8, r8)
    2eda:	46bd      	mov	sp, r7
    2edc:	b002      	add	sp, #8
    2ede:	bd80      	pop	{r7, pc}

00002ee0 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    2ee0:	b580      	push	{r7, lr}
    2ee2:	b082      	sub	sp, #8
    2ee4:	af00      	add	r7, sp, #0
    2ee6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    2ee8:	687b      	ldr	r3, [r7, #4]
    2eea:	2202      	movs	r2, #2
    2eec:	751a      	strb	r2, [r3, #20]
}
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	46bd      	mov	sp, r7
    2ef2:	b002      	add	sp, #8
    2ef4:	bd80      	pop	{r7, pc}

00002ef6 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    2ef6:	b580      	push	{r7, lr}
    2ef8:	b082      	sub	sp, #8
    2efa:	af00      	add	r7, sp, #0
    2efc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    2efe:	687b      	ldr	r3, [r7, #4]
    2f00:	2204      	movs	r2, #4
    2f02:	759a      	strb	r2, [r3, #22]
}
    2f04:	46c0      	nop			; (mov r8, r8)
    2f06:	46bd      	mov	sp, r7
    2f08:	b002      	add	sp, #8
    2f0a:	bd80      	pop	{r7, pc}

00002f0c <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    2f0c:	b580      	push	{r7, lr}
    2f0e:	b082      	sub	sp, #8
    2f10:	af00      	add	r7, sp, #0
    2f12:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    2f14:	687b      	ldr	r3, [r7, #4]
    2f16:	2204      	movs	r2, #4
    2f18:	751a      	strb	r2, [r3, #20]
}
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	46bd      	mov	sp, r7
    2f1e:	b002      	add	sp, #8
    2f20:	bd80      	pop	{r7, pc}

00002f22 <hri_sercomspi_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->SPI.INTENSET.reg & SERCOM_SPI_INTENSET_ERROR) >> SERCOM_SPI_INTENSET_ERROR_Pos;
}

static inline void hri_sercomspi_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    2f22:	b580      	push	{r7, lr}
    2f24:	b082      	sub	sp, #8
    2f26:	af00      	add	r7, sp, #0
    2f28:	6078      	str	r0, [r7, #4]
    2f2a:	000a      	movs	r2, r1
    2f2c:	1cfb      	adds	r3, r7, #3
    2f2e:	701a      	strb	r2, [r3, #0]
	if (value == 0x0) {
    2f30:	1cfb      	adds	r3, r7, #3
    2f32:	781b      	ldrb	r3, [r3, #0]
    2f34:	2201      	movs	r2, #1
    2f36:	4053      	eors	r3, r2
    2f38:	b2db      	uxtb	r3, r3
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d003      	beq.n	2f46 <hri_sercomspi_write_INTEN_ERROR_bit+0x24>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    2f3e:	687b      	ldr	r3, [r7, #4]
    2f40:	2280      	movs	r2, #128	; 0x80
    2f42:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
	}
}
    2f44:	e002      	b.n	2f4c <hri_sercomspi_write_INTEN_ERROR_bit+0x2a>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    2f46:	687b      	ldr	r3, [r7, #4]
    2f48:	2280      	movs	r2, #128	; 0x80
    2f4a:	759a      	strb	r2, [r3, #22]
}
    2f4c:	46c0      	nop			; (mov r8, r8)
    2f4e:	46bd      	mov	sp, r7
    2f50:	b002      	add	sp, #8
    2f52:	bd80      	pop	{r7, pc}

00002f54 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    2f54:	b580      	push	{r7, lr}
    2f56:	b082      	sub	sp, #8
    2f58:	af00      	add	r7, sp, #0
    2f5a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    2f5c:	687b      	ldr	r3, [r7, #4]
    2f5e:	7d9b      	ldrb	r3, [r3, #22]
    2f60:	b2db      	uxtb	r3, r3
}
    2f62:	0018      	movs	r0, r3
    2f64:	46bd      	mov	sp, r7
    2f66:	b002      	add	sp, #8
    2f68:	bd80      	pop	{r7, pc}
	...

00002f6c <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    2f6c:	b580      	push	{r7, lr}
    2f6e:	b082      	sub	sp, #8
    2f70:	af00      	add	r7, sp, #0
    2f72:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	681b      	ldr	r3, [r3, #0]
    2f78:	2202      	movs	r2, #2
    2f7a:	431a      	orrs	r2, r3
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    2f80:	687b      	ldr	r3, [r7, #4]
    2f82:	2103      	movs	r1, #3
    2f84:	0018      	movs	r0, r3
    2f86:	4b03      	ldr	r3, [pc, #12]	; (2f94 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x28>)
    2f88:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2f8a:	46c0      	nop			; (mov r8, r8)
    2f8c:	46bd      	mov	sp, r7
    2f8e:	b002      	add	sp, #8
    2f90:	bd80      	pop	{r7, pc}
    2f92:	46c0      	nop			; (mov r8, r8)
    2f94:	00002e2d 	.word	0x00002e2d

00002f98 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2f98:	b580      	push	{r7, lr}
    2f9a:	b082      	sub	sp, #8
    2f9c:	af00      	add	r7, sp, #0
    2f9e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2fa0:	687b      	ldr	r3, [r7, #4]
    2fa2:	681b      	ldr	r3, [r3, #0]
    2fa4:	2202      	movs	r2, #2
    2fa6:	4393      	bics	r3, r2
    2fa8:	001a      	movs	r2, r3
    2faa:	687b      	ldr	r3, [r7, #4]
    2fac:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    2fae:	687b      	ldr	r3, [r7, #4]
    2fb0:	2103      	movs	r1, #3
    2fb2:	0018      	movs	r0, r3
    2fb4:	4b02      	ldr	r3, [pc, #8]	; (2fc0 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x28>)
    2fb6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2fb8:	46c0      	nop			; (mov r8, r8)
    2fba:	46bd      	mov	sp, r7
    2fbc:	b002      	add	sp, #8
    2fbe:	bd80      	pop	{r7, pc}
    2fc0:	00002e2d 	.word	0x00002e2d

00002fc4 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    2fc4:	b580      	push	{r7, lr}
    2fc6:	b084      	sub	sp, #16
    2fc8:	af00      	add	r7, sp, #0
    2fca:	6078      	str	r0, [r7, #4]
    2fcc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    2fce:	687b      	ldr	r3, [r7, #4]
    2fd0:	2103      	movs	r1, #3
    2fd2:	0018      	movs	r0, r3
    2fd4:	4b06      	ldr	r3, [pc, #24]	; (2ff0 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    2fd6:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2fd8:	687b      	ldr	r3, [r7, #4]
    2fda:	681b      	ldr	r3, [r3, #0]
    2fdc:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2fde:	68fb      	ldr	r3, [r7, #12]
    2fe0:	683a      	ldr	r2, [r7, #0]
    2fe2:	4013      	ands	r3, r2
    2fe4:	60fb      	str	r3, [r7, #12]
	return tmp;
    2fe6:	68fb      	ldr	r3, [r7, #12]
}
    2fe8:	0018      	movs	r0, r3
    2fea:	46bd      	mov	sp, r7
    2fec:	b004      	add	sp, #16
    2fee:	bd80      	pop	{r7, pc}
    2ff0:	00002e2d 	.word	0x00002e2d

00002ff4 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    2ff4:	b580      	push	{r7, lr}
    2ff6:	b082      	sub	sp, #8
    2ff8:	af00      	add	r7, sp, #0
    2ffa:	6078      	str	r0, [r7, #4]
    2ffc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	683a      	ldr	r2, [r7, #0]
    3002:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    3004:	687b      	ldr	r3, [r7, #4]
    3006:	2103      	movs	r1, #3
    3008:	0018      	movs	r0, r3
    300a:	4b03      	ldr	r3, [pc, #12]	; (3018 <hri_sercomspi_write_CTRLA_reg+0x24>)
    300c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    300e:	46c0      	nop			; (mov r8, r8)
    3010:	46bd      	mov	sp, r7
    3012:	b002      	add	sp, #8
    3014:	bd80      	pop	{r7, pc}
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	00002e2d 	.word	0x00002e2d

0000301c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    301c:	b580      	push	{r7, lr}
    301e:	b082      	sub	sp, #8
    3020:	af00      	add	r7, sp, #0
    3022:	6078      	str	r0, [r7, #4]
    3024:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3026:	687b      	ldr	r3, [r7, #4]
    3028:	683a      	ldr	r2, [r7, #0]
    302a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	2107      	movs	r1, #7
    3030:	0018      	movs	r0, r3
    3032:	4b03      	ldr	r3, [pc, #12]	; (3040 <hri_sercomspi_write_CTRLB_reg+0x24>)
    3034:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	46bd      	mov	sp, r7
    303a:	b002      	add	sp, #8
    303c:	bd80      	pop	{r7, pc}
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	00002e2d 	.word	0x00002e2d

00003044 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    3044:	b580      	push	{r7, lr}
    3046:	b082      	sub	sp, #8
    3048:	af00      	add	r7, sp, #0
    304a:	6078      	str	r0, [r7, #4]
    304c:	000a      	movs	r2, r1
    304e:	1cfb      	adds	r3, r7, #3
    3050:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3052:	687b      	ldr	r3, [r7, #4]
    3054:	1cfa      	adds	r2, r7, #3
    3056:	7812      	ldrb	r2, [r2, #0]
    3058:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	46bd      	mov	sp, r7
    305e:	b002      	add	sp, #8
    3060:	bd80      	pop	{r7, pc}

00003062 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    3062:	b580      	push	{r7, lr}
    3064:	b082      	sub	sp, #8
    3066:	af00      	add	r7, sp, #0
    3068:	6078      	str	r0, [r7, #4]
    306a:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    306c:	687b      	ldr	r3, [r7, #4]
    306e:	683a      	ldr	r2, [r7, #0]
    3070:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3072:	46c0      	nop			; (mov r8, r8)
    3074:	46bd      	mov	sp, r7
    3076:	b002      	add	sp, #8
    3078:	bd80      	pop	{r7, pc}

0000307a <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    307a:	b580      	push	{r7, lr}
    307c:	b082      	sub	sp, #8
    307e:	af00      	add	r7, sp, #0
    3080:	6078      	str	r0, [r7, #4]
    3082:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    3084:	687b      	ldr	r3, [r7, #4]
    3086:	683a      	ldr	r2, [r7, #0]
    3088:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    308a:	46c0      	nop			; (mov r8, r8)
    308c:	46bd      	mov	sp, r7
    308e:	b002      	add	sp, #8
    3090:	bd80      	pop	{r7, pc}

00003092 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    3092:	b580      	push	{r7, lr}
    3094:	b082      	sub	sp, #8
    3096:	af00      	add	r7, sp, #0
    3098:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    309a:	687b      	ldr	r3, [r7, #4]
    309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    309e:	0018      	movs	r0, r3
    30a0:	46bd      	mov	sp, r7
    30a2:	b002      	add	sp, #8
    30a4:	bd80      	pop	{r7, pc}

000030a6 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    30a6:	b580      	push	{r7, lr}
    30a8:	b082      	sub	sp, #8
    30aa:	af00      	add	r7, sp, #0
    30ac:	6078      	str	r0, [r7, #4]
    30ae:	000a      	movs	r2, r1
    30b0:	1cfb      	adds	r3, r7, #3
    30b2:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    30b4:	687b      	ldr	r3, [r7, #4]
    30b6:	1cfa      	adds	r2, r7, #3
    30b8:	2130      	movs	r1, #48	; 0x30
    30ba:	7812      	ldrb	r2, [r2, #0]
    30bc:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	46bd      	mov	sp, r7
    30c2:	b002      	add	sp, #8
    30c4:	bd80      	pop	{r7, pc}

000030c6 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    30c6:	b580      	push	{r7, lr}
    30c8:	b082      	sub	sp, #8
    30ca:	af00      	add	r7, sp, #0
    30cc:	6078      	str	r0, [r7, #4]
    30ce:	000a      	movs	r2, r1
    30d0:	1cbb      	adds	r3, r7, #2
    30d2:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    30d4:	687b      	ldr	r3, [r7, #4]
    30d6:	1cba      	adds	r2, r7, #2
    30d8:	8812      	ldrh	r2, [r2, #0]
    30da:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    30dc:	46c0      	nop			; (mov r8, r8)
    30de:	46bd      	mov	sp, r7
    30e0:	b002      	add	sp, #8
    30e2:	bd80      	pop	{r7, pc}

000030e4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    30e4:	b580      	push	{r7, lr}
    30e6:	b082      	sub	sp, #8
    30e8:	af00      	add	r7, sp, #0
    30ea:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    30ec:	687b      	ldr	r3, [r7, #4]
    30ee:	4a04      	ldr	r2, [pc, #16]	; (3100 <_sercom_get_hardware_index+0x1c>)
    30f0:	4694      	mov	ip, r2
    30f2:	4463      	add	r3, ip
    30f4:	0a9b      	lsrs	r3, r3, #10
    30f6:	b2db      	uxtb	r3, r3
}
    30f8:	0018      	movs	r0, r3
    30fa:	46bd      	mov	sp, r7
    30fc:	b002      	add	sp, #8
    30fe:	bd80      	pop	{r7, pc}
    3100:	bdfffc00 	.word	0xbdfffc00

00003104 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    3104:	b580      	push	{r7, lr}
    3106:	b082      	sub	sp, #8
    3108:	af00      	add	r7, sp, #0
    310a:	6078      	str	r0, [r7, #4]
    310c:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM0) {
    310e:	687b      	ldr	r3, [r7, #4]
    3110:	4a08      	ldr	r2, [pc, #32]	; (3134 <_sercom_init_irq_param+0x30>)
    3112:	4293      	cmp	r3, r2
    3114:	d102      	bne.n	311c <_sercom_init_irq_param+0x18>
		_sercom0_dev = (struct _spi_async_dev *)dev;
    3116:	4b08      	ldr	r3, [pc, #32]	; (3138 <_sercom_init_irq_param+0x34>)
    3118:	683a      	ldr	r2, [r7, #0]
    311a:	601a      	str	r2, [r3, #0]
	}

	if (hw == SERCOM2) {
    311c:	687b      	ldr	r3, [r7, #4]
    311e:	4a07      	ldr	r2, [pc, #28]	; (313c <_sercom_init_irq_param+0x38>)
    3120:	4293      	cmp	r3, r2
    3122:	d102      	bne.n	312a <_sercom_init_irq_param+0x26>
		_sercom2_dev = (struct _spi_async_dev *)dev;
    3124:	4b06      	ldr	r3, [pc, #24]	; (3140 <_sercom_init_irq_param+0x3c>)
    3126:	683a      	ldr	r2, [r7, #0]
    3128:	601a      	str	r2, [r3, #0]
	}
}
    312a:	46c0      	nop			; (mov r8, r8)
    312c:	46bd      	mov	sp, r7
    312e:	b002      	add	sp, #8
    3130:	bd80      	pop	{r7, pc}
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	42000400 	.word	0x42000400
    3138:	20000074 	.word	0x20000074
    313c:	42000c00 	.word	0x42000c00
    3140:	20000078 	.word	0x20000078

00003144 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3144:	b580      	push	{r7, lr}
    3146:	b082      	sub	sp, #8
    3148:	af00      	add	r7, sp, #0
    314a:	6078      	str	r0, [r7, #4]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    314c:	687b      	ldr	r3, [r7, #4]
    314e:	0018      	movs	r0, r3
    3150:	4b04      	ldr	r3, [pc, #16]	; (3164 <_sercom_get_irq_num+0x20>)
    3152:	4798      	blx	r3
    3154:	0003      	movs	r3, r0
    3156:	3309      	adds	r3, #9
    3158:	b2db      	uxtb	r3, r3
}
    315a:	0018      	movs	r0, r3
    315c:	46bd      	mov	sp, r7
    315e:	b002      	add	sp, #8
    3160:	bd80      	pop	{r7, pc}
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	000030e5 	.word	0x000030e5

00003168 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    3168:	b580      	push	{r7, lr}
    316a:	b082      	sub	sp, #8
    316c:	af00      	add	r7, sp, #0
    316e:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3170:	687b      	ldr	r3, [r7, #4]
    3172:	2101      	movs	r1, #1
    3174:	0018      	movs	r0, r3
    3176:	4b08      	ldr	r3, [pc, #32]	; (3198 <_spi_sync_enable+0x30>)
    3178:	4798      	blx	r3
    317a:	1e03      	subs	r3, r0, #0
    317c:	d002      	beq.n	3184 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    317e:	2304      	movs	r3, #4
    3180:	425b      	negs	r3, r3
    3182:	e004      	b.n	318e <_spi_sync_enable+0x26>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	0018      	movs	r0, r3
    3188:	4b04      	ldr	r3, [pc, #16]	; (319c <_spi_sync_enable+0x34>)
    318a:	4798      	blx	r3

	return ERR_NONE;
    318c:	2300      	movs	r3, #0
}
    318e:	0018      	movs	r0, r3
    3190:	46bd      	mov	sp, r7
    3192:	b002      	add	sp, #8
    3194:	bd80      	pop	{r7, pc}
    3196:	46c0      	nop			; (mov r8, r8)
    3198:	00002e4b 	.word	0x00002e4b
    319c:	00002f6d 	.word	0x00002f6d

000031a0 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    31a0:	b580      	push	{r7, lr}
    31a2:	b082      	sub	sp, #8
    31a4:	af00      	add	r7, sp, #0
    31a6:	6078      	str	r0, [r7, #4]
	_spi_sync_enable(hw);
    31a8:	687b      	ldr	r3, [r7, #4]
    31aa:	0018      	movs	r0, r3
    31ac:	4b07      	ldr	r3, [pc, #28]	; (31cc <_spi_async_enable+0x2c>)
    31ae:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    31b0:	687b      	ldr	r3, [r7, #4]
    31b2:	0018      	movs	r0, r3
    31b4:	4b06      	ldr	r3, [pc, #24]	; (31d0 <_spi_async_enable+0x30>)
    31b6:	4798      	blx	r3
    31b8:	0003      	movs	r3, r0
    31ba:	b25b      	sxtb	r3, r3
    31bc:	0018      	movs	r0, r3
    31be:	4b05      	ldr	r3, [pc, #20]	; (31d4 <_spi_async_enable+0x34>)
    31c0:	4798      	blx	r3

	return ERR_NONE;
    31c2:	2300      	movs	r3, #0
}
    31c4:	0018      	movs	r0, r3
    31c6:	46bd      	mov	sp, r7
    31c8:	b002      	add	sp, #8
    31ca:	bd80      	pop	{r7, pc}
    31cc:	00003169 	.word	0x00003169
    31d0:	00003145 	.word	0x00003145
    31d4:	00002d81 	.word	0x00002d81

000031d8 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    31d8:	b580      	push	{r7, lr}
    31da:	b082      	sub	sp, #8
    31dc:	af00      	add	r7, sp, #0
    31de:	6078      	str	r0, [r7, #4]
    31e0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    31e2:	687b      	ldr	r3, [r7, #4]
    31e4:	2b00      	cmp	r3, #0
    31e6:	d004      	beq.n	31f2 <_spi_load_regs_master+0x1a>
    31e8:	683b      	ldr	r3, [r7, #0]
    31ea:	2b00      	cmp	r3, #0
    31ec:	d001      	beq.n	31f2 <_spi_load_regs_master+0x1a>
    31ee:	2301      	movs	r3, #1
    31f0:	e000      	b.n	31f4 <_spi_load_regs_master+0x1c>
    31f2:	2300      	movs	r3, #0
    31f4:	1c1a      	adds	r2, r3, #0
    31f6:	2301      	movs	r3, #1
    31f8:	4013      	ands	r3, r2
    31fa:	b2db      	uxtb	r3, r3
    31fc:	4a1f      	ldr	r2, [pc, #124]	; (327c <_spi_load_regs_master+0xa4>)
    31fe:	4920      	ldr	r1, [pc, #128]	; (3280 <_spi_load_regs_master+0xa8>)
    3200:	0018      	movs	r0, r3
    3202:	4b20      	ldr	r3, [pc, #128]	; (3284 <_spi_load_regs_master+0xac>)
    3204:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3206:	683b      	ldr	r3, [r7, #0]
    3208:	781a      	ldrb	r2, [r3, #0]
    320a:	7859      	ldrb	r1, [r3, #1]
    320c:	0209      	lsls	r1, r1, #8
    320e:	430a      	orrs	r2, r1
    3210:	7899      	ldrb	r1, [r3, #2]
    3212:	0409      	lsls	r1, r1, #16
    3214:	430a      	orrs	r2, r1
    3216:	78db      	ldrb	r3, [r3, #3]
    3218:	061b      	lsls	r3, r3, #24
    321a:	4313      	orrs	r3, r2
    321c:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    321e:	4b1a      	ldr	r3, [pc, #104]	; (3288 <_spi_load_regs_master+0xb0>)
    3220:	401a      	ands	r2, r3
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	0011      	movs	r1, r2
    3226:	0018      	movs	r0, r3
    3228:	4b18      	ldr	r3, [pc, #96]	; (328c <_spi_load_regs_master+0xb4>)
    322a:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    322c:	683b      	ldr	r3, [r7, #0]
    322e:	791a      	ldrb	r2, [r3, #4]
    3230:	7959      	ldrb	r1, [r3, #5]
    3232:	0209      	lsls	r1, r1, #8
    3234:	430a      	orrs	r2, r1
    3236:	7999      	ldrb	r1, [r3, #6]
    3238:	0409      	lsls	r1, r1, #16
    323a:	430a      	orrs	r2, r1
    323c:	79db      	ldrb	r3, [r3, #7]
    323e:	061b      	lsls	r3, r3, #24
    3240:	4313      	orrs	r3, r2
    3242:	001a      	movs	r2, r3
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    3244:	4b12      	ldr	r3, [pc, #72]	; (3290 <_spi_load_regs_master+0xb8>)
    3246:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    3248:	2280      	movs	r2, #128	; 0x80
    324a:	0292      	lsls	r2, r2, #10
    324c:	431a      	orrs	r2, r3
    324e:	687b      	ldr	r3, [r7, #4]
    3250:	0011      	movs	r1, r2
    3252:	0018      	movs	r0, r3
    3254:	4b0f      	ldr	r3, [pc, #60]	; (3294 <_spi_load_regs_master+0xbc>)
    3256:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3258:	683b      	ldr	r3, [r7, #0]
    325a:	7b1a      	ldrb	r2, [r3, #12]
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	0011      	movs	r1, r2
    3260:	0018      	movs	r0, r3
    3262:	4b0d      	ldr	r3, [pc, #52]	; (3298 <_spi_load_regs_master+0xc0>)
    3264:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3266:	683b      	ldr	r3, [r7, #0]
    3268:	7b5a      	ldrb	r2, [r3, #13]
    326a:	687b      	ldr	r3, [r7, #4]
    326c:	0011      	movs	r1, r2
    326e:	0018      	movs	r0, r3
    3270:	4b0a      	ldr	r3, [pc, #40]	; (329c <_spi_load_regs_master+0xc4>)
    3272:	4798      	blx	r3
}
    3274:	46c0      	nop			; (mov r8, r8)
    3276:	46bd      	mov	sp, r7
    3278:	b002      	add	sp, #8
    327a:	bd80      	pop	{r7, pc}
    327c:	000008f1 	.word	0x000008f1
    3280:	000046f8 	.word	0x000046f8
    3284:	00001ec1 	.word	0x00001ec1
    3288:	fffffefc 	.word	0xfffffefc
    328c:	00002ff5 	.word	0x00002ff5
    3290:	fffd1dbf 	.word	0xfffd1dbf
    3294:	0000301d 	.word	0x0000301d
    3298:	00003045 	.word	0x00003045
    329c:	000030a7 	.word	0x000030a7

000032a0 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    32a0:	b580      	push	{r7, lr}
    32a2:	b082      	sub	sp, #8
    32a4:	af00      	add	r7, sp, #0
    32a6:	6078      	str	r0, [r7, #4]
    32a8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    32aa:	687b      	ldr	r3, [r7, #4]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d004      	beq.n	32ba <_spi_load_regs_slave+0x1a>
    32b0:	683b      	ldr	r3, [r7, #0]
    32b2:	2b00      	cmp	r3, #0
    32b4:	d001      	beq.n	32ba <_spi_load_regs_slave+0x1a>
    32b6:	2301      	movs	r3, #1
    32b8:	e000      	b.n	32bc <_spi_load_regs_slave+0x1c>
    32ba:	2300      	movs	r3, #0
    32bc:	1c1a      	adds	r2, r3, #0
    32be:	2301      	movs	r3, #1
    32c0:	4013      	ands	r3, r2
    32c2:	b2db      	uxtb	r3, r3
    32c4:	4a29      	ldr	r2, [pc, #164]	; (336c <_spi_load_regs_slave+0xcc>)
    32c6:	492a      	ldr	r1, [pc, #168]	; (3370 <_spi_load_regs_slave+0xd0>)
    32c8:	0018      	movs	r0, r3
    32ca:	4b2a      	ldr	r3, [pc, #168]	; (3374 <_spi_load_regs_slave+0xd4>)
    32cc:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    32ce:	683b      	ldr	r3, [r7, #0]
    32d0:	781a      	ldrb	r2, [r3, #0]
    32d2:	7859      	ldrb	r1, [r3, #1]
    32d4:	0209      	lsls	r1, r1, #8
    32d6:	430a      	orrs	r2, r1
    32d8:	7899      	ldrb	r1, [r3, #2]
    32da:	0409      	lsls	r1, r1, #16
    32dc:	430a      	orrs	r2, r1
    32de:	78db      	ldrb	r3, [r3, #3]
    32e0:	061b      	lsls	r3, r3, #24
    32e2:	4313      	orrs	r3, r2
    32e4:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    32e6:	4b24      	ldr	r3, [pc, #144]	; (3378 <_spi_load_regs_slave+0xd8>)
    32e8:	401a      	ands	r2, r3
    32ea:	687b      	ldr	r3, [r7, #4]
    32ec:	0011      	movs	r1, r2
    32ee:	0018      	movs	r0, r3
    32f0:	4b22      	ldr	r3, [pc, #136]	; (337c <_spi_load_regs_slave+0xdc>)
    32f2:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    32f4:	683b      	ldr	r3, [r7, #0]
    32f6:	791a      	ldrb	r2, [r3, #4]
    32f8:	7959      	ldrb	r1, [r3, #5]
    32fa:	0209      	lsls	r1, r1, #8
    32fc:	430a      	orrs	r2, r1
    32fe:	7999      	ldrb	r1, [r3, #6]
    3300:	0409      	lsls	r1, r1, #16
    3302:	430a      	orrs	r2, r1
    3304:	79db      	ldrb	r3, [r3, #7]
    3306:	061b      	lsls	r3, r3, #24
    3308:	4313      	orrs	r3, r2
    330a:	001a      	movs	r2, r3
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    330c:	4b1c      	ldr	r3, [pc, #112]	; (3380 <_spi_load_regs_slave+0xe0>)
    330e:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    3310:	4a1c      	ldr	r2, [pc, #112]	; (3384 <_spi_load_regs_slave+0xe4>)
    3312:	431a      	orrs	r2, r3
    3314:	687b      	ldr	r3, [r7, #4]
    3316:	0011      	movs	r1, r2
    3318:	0018      	movs	r0, r3
    331a:	4b1b      	ldr	r3, [pc, #108]	; (3388 <_spi_load_regs_slave+0xe8>)
    331c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    331e:	683b      	ldr	r3, [r7, #0]
    3320:	7a1a      	ldrb	r2, [r3, #8]
    3322:	7a59      	ldrb	r1, [r3, #9]
    3324:	0209      	lsls	r1, r1, #8
    3326:	430a      	orrs	r2, r1
    3328:	7a99      	ldrb	r1, [r3, #10]
    332a:	0409      	lsls	r1, r1, #16
    332c:	430a      	orrs	r2, r1
    332e:	7adb      	ldrb	r3, [r3, #11]
    3330:	061b      	lsls	r3, r3, #24
    3332:	4313      	orrs	r3, r2
    3334:	001a      	movs	r2, r3
    3336:	687b      	ldr	r3, [r7, #4]
    3338:	0011      	movs	r1, r2
    333a:	0018      	movs	r0, r3
    333c:	4b13      	ldr	r3, [pc, #76]	; (338c <_spi_load_regs_slave+0xec>)
    333e:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3340:	683b      	ldr	r3, [r7, #0]
    3342:	7b5a      	ldrb	r2, [r3, #13]
    3344:	687b      	ldr	r3, [r7, #4]
    3346:	0011      	movs	r1, r2
    3348:	0018      	movs	r0, r3
    334a:	4b11      	ldr	r3, [pc, #68]	; (3390 <_spi_load_regs_slave+0xf0>)
    334c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    334e:	46c0      	nop			; (mov r8, r8)
    3350:	2301      	movs	r3, #1
    3352:	425a      	negs	r2, r3
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	0011      	movs	r1, r2
    3358:	0018      	movs	r0, r3
    335a:	4b0e      	ldr	r3, [pc, #56]	; (3394 <_spi_load_regs_slave+0xf4>)
    335c:	4798      	blx	r3
    335e:	1e03      	subs	r3, r0, #0
    3360:	d1f6      	bne.n	3350 <_spi_load_regs_slave+0xb0>
		;
}
    3362:	46c0      	nop			; (mov r8, r8)
    3364:	46bd      	mov	sp, r7
    3366:	b002      	add	sp, #8
    3368:	bd80      	pop	{r7, pc}
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	00000905 	.word	0x00000905
    3370:	000046f8 	.word	0x000046f8
    3374:	00001ec1 	.word	0x00001ec1
    3378:	fffffefc 	.word	0xfffffefc
    337c:	00002ff5 	.word	0x00002ff5
    3380:	fffdddbf 	.word	0xfffdddbf
    3384:	00020240 	.word	0x00020240
    3388:	0000301d 	.word	0x0000301d
    338c:	00003063 	.word	0x00003063
    3390:	000030a7 	.word	0x000030a7
    3394:	00002e4b 	.word	0x00002e4b

00003398 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    3398:	b590      	push	{r4, r7, lr}
    339a:	b085      	sub	sp, #20
    339c:	af00      	add	r7, sp, #0
    339e:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	220e      	movs	r2, #14
    33a4:	18bc      	adds	r4, r7, r2
    33a6:	0018      	movs	r0, r3
    33a8:	4b18      	ldr	r3, [pc, #96]	; (340c <_spi_get_regs+0x74>)
    33aa:	4798      	blx	r3
    33ac:	0003      	movs	r3, r0
    33ae:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    33b0:	230f      	movs	r3, #15
    33b2:	18fb      	adds	r3, r7, r3
    33b4:	2200      	movs	r2, #0
    33b6:	701a      	strb	r2, [r3, #0]
    33b8:	e01e      	b.n	33f8 <_spi_get_regs+0x60>
		if (sercomspi_regs[i].n == n) {
    33ba:	230f      	movs	r3, #15
    33bc:	18fb      	adds	r3, r7, r3
    33be:	781a      	ldrb	r2, [r3, #0]
    33c0:	4913      	ldr	r1, [pc, #76]	; (3410 <_spi_get_regs+0x78>)
    33c2:	0013      	movs	r3, r2
    33c4:	011b      	lsls	r3, r3, #4
    33c6:	189b      	adds	r3, r3, r2
    33c8:	18cb      	adds	r3, r1, r3
    33ca:	3310      	adds	r3, #16
    33cc:	781b      	ldrb	r3, [r3, #0]
    33ce:	220e      	movs	r2, #14
    33d0:	18ba      	adds	r2, r7, r2
    33d2:	7812      	ldrb	r2, [r2, #0]
    33d4:	429a      	cmp	r2, r3
    33d6:	d108      	bne.n	33ea <_spi_get_regs+0x52>
			return &sercomspi_regs[i];
    33d8:	230f      	movs	r3, #15
    33da:	18fb      	adds	r3, r7, r3
    33dc:	781a      	ldrb	r2, [r3, #0]
    33de:	0013      	movs	r3, r2
    33e0:	011b      	lsls	r3, r3, #4
    33e2:	189b      	adds	r3, r3, r2
    33e4:	4a0a      	ldr	r2, [pc, #40]	; (3410 <_spi_get_regs+0x78>)
    33e6:	189b      	adds	r3, r3, r2
    33e8:	e00c      	b.n	3404 <_spi_get_regs+0x6c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    33ea:	230f      	movs	r3, #15
    33ec:	18fb      	adds	r3, r7, r3
    33ee:	781a      	ldrb	r2, [r3, #0]
    33f0:	230f      	movs	r3, #15
    33f2:	18fb      	adds	r3, r7, r3
    33f4:	3201      	adds	r2, #1
    33f6:	701a      	strb	r2, [r3, #0]
    33f8:	230f      	movs	r3, #15
    33fa:	18fb      	adds	r3, r7, r3
    33fc:	781b      	ldrb	r3, [r3, #0]
    33fe:	2b01      	cmp	r3, #1
    3400:	d9db      	bls.n	33ba <_spi_get_regs+0x22>
		}
	}

	return NULL;
    3402:	2300      	movs	r3, #0
}
    3404:	0018      	movs	r0, r3
    3406:	46bd      	mov	sp, r7
    3408:	b005      	add	sp, #20
    340a:	bd90      	pop	{r4, r7, pc}
    340c:	000030e5 	.word	0x000030e5
    3410:	00004714 	.word	0x00004714

00003414 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    3414:	b590      	push	{r4, r7, lr}
    3416:	b085      	sub	sp, #20
    3418:	af00      	add	r7, sp, #0
    341a:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    341c:	687b      	ldr	r3, [r7, #4]
    341e:	681b      	ldr	r3, [r3, #0]
    3420:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    3422:	230b      	movs	r3, #11
    3424:	18fc      	adds	r4, r7, r3
    3426:	68fb      	ldr	r3, [r7, #12]
    3428:	0018      	movs	r0, r3
    342a:	4b2a      	ldr	r3, [pc, #168]	; (34d4 <_spi_handler+0xc0>)
    342c:	4798      	blx	r3
    342e:	0003      	movs	r3, r0
    3430:	7023      	strb	r3, [r4, #0]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    3432:	68fb      	ldr	r3, [r7, #12]
    3434:	0018      	movs	r0, r3
    3436:	4b28      	ldr	r3, [pc, #160]	; (34d8 <_spi_handler+0xc4>)
    3438:	4798      	blx	r3
    343a:	0003      	movs	r3, r0
    343c:	0019      	movs	r1, r3
    343e:	230b      	movs	r3, #11
    3440:	18fb      	adds	r3, r7, r3
    3442:	220b      	movs	r2, #11
    3444:	18ba      	adds	r2, r7, r2
    3446:	7812      	ldrb	r2, [r2, #0]
    3448:	400a      	ands	r2, r1
    344a:	701a      	strb	r2, [r3, #0]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    344c:	230b      	movs	r3, #11
    344e:	18fb      	adds	r3, r7, r3
    3450:	781b      	ldrb	r3, [r3, #0]
    3452:	2201      	movs	r2, #1
    3454:	4013      	ands	r3, r2
    3456:	d005      	beq.n	3464 <_spi_handler+0x50>
		dev->callbacks.tx(dev);
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	689b      	ldr	r3, [r3, #8]
    345c:	687a      	ldr	r2, [r7, #4]
    345e:	0010      	movs	r0, r2
    3460:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    3462:	e033      	b.n	34cc <_spi_handler+0xb8>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    3464:	230b      	movs	r3, #11
    3466:	18fb      	adds	r3, r7, r3
    3468:	781b      	ldrb	r3, [r3, #0]
    346a:	2204      	movs	r2, #4
    346c:	4013      	ands	r3, r2
    346e:	d005      	beq.n	347c <_spi_handler+0x68>
		dev->callbacks.rx(dev);
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	68db      	ldr	r3, [r3, #12]
    3474:	687a      	ldr	r2, [r7, #4]
    3476:	0010      	movs	r0, r2
    3478:	4798      	blx	r3
}
    347a:	e027      	b.n	34cc <_spi_handler+0xb8>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    347c:	230b      	movs	r3, #11
    347e:	18fb      	adds	r3, r7, r3
    3480:	781b      	ldrb	r3, [r3, #0]
    3482:	2202      	movs	r2, #2
    3484:	4013      	ands	r3, r2
    3486:	d00a      	beq.n	349e <_spi_handler+0x8a>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    3488:	68fb      	ldr	r3, [r7, #12]
    348a:	2102      	movs	r1, #2
    348c:	0018      	movs	r0, r3
    348e:	4b13      	ldr	r3, [pc, #76]	; (34dc <_spi_handler+0xc8>)
    3490:	4798      	blx	r3
		dev->callbacks.complete(dev);
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	691b      	ldr	r3, [r3, #16]
    3496:	687a      	ldr	r2, [r7, #4]
    3498:	0010      	movs	r0, r2
    349a:	4798      	blx	r3
}
    349c:	e016      	b.n	34cc <_spi_handler+0xb8>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    349e:	230b      	movs	r3, #11
    34a0:	18fb      	adds	r3, r7, r3
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	b25b      	sxtb	r3, r3
    34a6:	2b00      	cmp	r3, #0
    34a8:	da10      	bge.n	34cc <_spi_handler+0xb8>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    34aa:	68fb      	ldr	r3, [r7, #12]
    34ac:	2104      	movs	r1, #4
    34ae:	0018      	movs	r0, r3
    34b0:	4b0b      	ldr	r3, [pc, #44]	; (34e0 <_spi_handler+0xcc>)
    34b2:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    34b4:	68fb      	ldr	r3, [r7, #12]
    34b6:	2180      	movs	r1, #128	; 0x80
    34b8:	0018      	movs	r0, r3
    34ba:	4b08      	ldr	r3, [pc, #32]	; (34dc <_spi_handler+0xc8>)
    34bc:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    34be:	687b      	ldr	r3, [r7, #4]
    34c0:	695b      	ldr	r3, [r3, #20]
    34c2:	2213      	movs	r2, #19
    34c4:	4251      	negs	r1, r2
    34c6:	687a      	ldr	r2, [r7, #4]
    34c8:	0010      	movs	r0, r2
    34ca:	4798      	blx	r3
}
    34cc:	46c0      	nop			; (mov r8, r8)
    34ce:	46bd      	mov	sp, r7
    34d0:	b005      	add	sp, #20
    34d2:	bd90      	pop	{r4, r7, pc}
    34d4:	00002e6b 	.word	0x00002e6b
    34d8:	00002f55 	.word	0x00002f55
    34dc:	00002e81 	.word	0x00002e81
    34e0:	000030c7 	.word	0x000030c7

000034e4 <SERCOM0_Handler>:

void SERCOM0_Handler(void)
{
    34e4:	b580      	push	{r7, lr}
    34e6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom0_dev);
    34e8:	4b03      	ldr	r3, [pc, #12]	; (34f8 <SERCOM0_Handler+0x14>)
    34ea:	681b      	ldr	r3, [r3, #0]
    34ec:	0018      	movs	r0, r3
    34ee:	4b03      	ldr	r3, [pc, #12]	; (34fc <SERCOM0_Handler+0x18>)
    34f0:	4798      	blx	r3
}
    34f2:	46c0      	nop			; (mov r8, r8)
    34f4:	46bd      	mov	sp, r7
    34f6:	bd80      	pop	{r7, pc}
    34f8:	20000074 	.word	0x20000074
    34fc:	00003415 	.word	0x00003415

00003500 <SERCOM2_Handler>:

void SERCOM2_Handler(void)
{
    3500:	b580      	push	{r7, lr}
    3502:	af00      	add	r7, sp, #0
	_spi_handler(_sercom2_dev);
    3504:	4b03      	ldr	r3, [pc, #12]	; (3514 <SERCOM2_Handler+0x14>)
    3506:	681b      	ldr	r3, [r3, #0]
    3508:	0018      	movs	r0, r3
    350a:	4b03      	ldr	r3, [pc, #12]	; (3518 <SERCOM2_Handler+0x18>)
    350c:	4798      	blx	r3
}
    350e:	46c0      	nop			; (mov r8, r8)
    3510:	46bd      	mov	sp, r7
    3512:	bd80      	pop	{r7, pc}
    3514:	20000078 	.word	0x20000078
    3518:	00003415 	.word	0x00003415

0000351c <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    351c:	b580      	push	{r7, lr}
    351e:	b084      	sub	sp, #16
    3520:	af00      	add	r7, sp, #0
    3522:	6078      	str	r0, [r7, #4]
    3524:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    3526:	683b      	ldr	r3, [r7, #0]
    3528:	0018      	movs	r0, r3
    352a:	4b4a      	ldr	r3, [pc, #296]	; (3654 <_spi_m_sync_init+0x138>)
    352c:	4798      	blx	r3
    352e:	0003      	movs	r3, r0
    3530:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    3532:	687b      	ldr	r3, [r7, #4]
    3534:	2b00      	cmp	r3, #0
    3536:	d004      	beq.n	3542 <_spi_m_sync_init+0x26>
    3538:	683b      	ldr	r3, [r7, #0]
    353a:	2b00      	cmp	r3, #0
    353c:	d001      	beq.n	3542 <_spi_m_sync_init+0x26>
    353e:	2301      	movs	r3, #1
    3540:	e000      	b.n	3544 <_spi_m_sync_init+0x28>
    3542:	2300      	movs	r3, #0
    3544:	1c1a      	adds	r2, r3, #0
    3546:	2301      	movs	r3, #1
    3548:	4013      	ands	r3, r2
    354a:	b2db      	uxtb	r3, r3
    354c:	4a42      	ldr	r2, [pc, #264]	; (3658 <_spi_m_sync_init+0x13c>)
    354e:	4943      	ldr	r1, [pc, #268]	; (365c <_spi_m_sync_init+0x140>)
    3550:	0018      	movs	r0, r3
    3552:	4b43      	ldr	r3, [pc, #268]	; (3660 <_spi_m_sync_init+0x144>)
    3554:	4798      	blx	r3

	if (regs == NULL) {
    3556:	68fb      	ldr	r3, [r7, #12]
    3558:	2b00      	cmp	r3, #0
    355a:	d102      	bne.n	3562 <_spi_m_sync_init+0x46>
		return ERR_INVALID_ARG;
    355c:	230d      	movs	r3, #13
    355e:	425b      	negs	r3, r3
    3560:	e074      	b.n	364c <_spi_m_sync_init+0x130>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3562:	683b      	ldr	r3, [r7, #0]
    3564:	2101      	movs	r1, #1
    3566:	0018      	movs	r0, r3
    3568:	4b3e      	ldr	r3, [pc, #248]	; (3664 <_spi_m_sync_init+0x148>)
    356a:	4798      	blx	r3
    356c:	0003      	movs	r3, r0
    356e:	001a      	movs	r2, r3
    3570:	2301      	movs	r3, #1
    3572:	4053      	eors	r3, r2
    3574:	b2db      	uxtb	r3, r3
    3576:	2b00      	cmp	r3, #0
    3578:	d026      	beq.n	35c8 <_spi_m_sync_init+0xac>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    357a:	68fb      	ldr	r3, [r7, #12]
    357c:	781a      	ldrb	r2, [r3, #0]
    357e:	7859      	ldrb	r1, [r3, #1]
    3580:	0209      	lsls	r1, r1, #8
    3582:	430a      	orrs	r2, r1
    3584:	7899      	ldrb	r1, [r3, #2]
    3586:	0409      	lsls	r1, r1, #16
    3588:	430a      	orrs	r2, r1
    358a:	78db      	ldrb	r3, [r3, #3]
    358c:	061b      	lsls	r3, r3, #24
    358e:	4313      	orrs	r3, r2
    3590:	001a      	movs	r2, r3
    3592:	231c      	movs	r3, #28
    3594:	4013      	ands	r3, r2
    3596:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3598:	683b      	ldr	r3, [r7, #0]
    359a:	2102      	movs	r1, #2
    359c:	0018      	movs	r0, r3
    359e:	4b32      	ldr	r3, [pc, #200]	; (3668 <_spi_m_sync_init+0x14c>)
    35a0:	4798      	blx	r3
    35a2:	1e03      	subs	r3, r0, #0
    35a4:	d008      	beq.n	35b8 <_spi_m_sync_init+0x9c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    35a6:	683b      	ldr	r3, [r7, #0]
    35a8:	0018      	movs	r0, r3
    35aa:	4b30      	ldr	r3, [pc, #192]	; (366c <_spi_m_sync_init+0x150>)
    35ac:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    35ae:	683b      	ldr	r3, [r7, #0]
    35b0:	2102      	movs	r1, #2
    35b2:	0018      	movs	r0, r3
    35b4:	4b2e      	ldr	r3, [pc, #184]	; (3670 <_spi_m_sync_init+0x154>)
    35b6:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    35b8:	68bb      	ldr	r3, [r7, #8]
    35ba:	2201      	movs	r2, #1
    35bc:	431a      	orrs	r2, r3
    35be:	683b      	ldr	r3, [r7, #0]
    35c0:	0011      	movs	r1, r2
    35c2:	0018      	movs	r0, r3
    35c4:	4b2b      	ldr	r3, [pc, #172]	; (3674 <_spi_m_sync_init+0x158>)
    35c6:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    35c8:	683b      	ldr	r3, [r7, #0]
    35ca:	2101      	movs	r1, #1
    35cc:	0018      	movs	r0, r3
    35ce:	4b28      	ldr	r3, [pc, #160]	; (3670 <_spi_m_sync_init+0x154>)
    35d0:	4798      	blx	r3

	dev->prvt = hw;
    35d2:	687b      	ldr	r3, [r7, #4]
    35d4:	683a      	ldr	r2, [r7, #0]
    35d6:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    35d8:	68fb      	ldr	r3, [r7, #12]
    35da:	781a      	ldrb	r2, [r3, #0]
    35dc:	7859      	ldrb	r1, [r3, #1]
    35de:	0209      	lsls	r1, r1, #8
    35e0:	430a      	orrs	r2, r1
    35e2:	7899      	ldrb	r1, [r3, #2]
    35e4:	0409      	lsls	r1, r1, #16
    35e6:	430a      	orrs	r2, r1
    35e8:	78db      	ldrb	r3, [r3, #3]
    35ea:	061b      	lsls	r3, r3, #24
    35ec:	4313      	orrs	r3, r2
    35ee:	001a      	movs	r2, r3
    35f0:	231c      	movs	r3, #28
    35f2:	4013      	ands	r3, r2
    35f4:	2b08      	cmp	r3, #8
    35f6:	d106      	bne.n	3606 <_spi_m_sync_init+0xea>
		_spi_load_regs_slave(hw, regs);
    35f8:	68fa      	ldr	r2, [r7, #12]
    35fa:	683b      	ldr	r3, [r7, #0]
    35fc:	0011      	movs	r1, r2
    35fe:	0018      	movs	r0, r3
    3600:	4b1d      	ldr	r3, [pc, #116]	; (3678 <_spi_m_sync_init+0x15c>)
    3602:	4798      	blx	r3
    3604:	e005      	b.n	3612 <_spi_m_sync_init+0xf6>
	} else {
		_spi_load_regs_master(hw, regs);
    3606:	68fa      	ldr	r2, [r7, #12]
    3608:	683b      	ldr	r3, [r7, #0]
    360a:	0011      	movs	r1, r2
    360c:	0018      	movs	r0, r3
    360e:	4b1b      	ldr	r3, [pc, #108]	; (367c <_spi_m_sync_init+0x160>)
    3610:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3612:	68fb      	ldr	r3, [r7, #12]
    3614:	791a      	ldrb	r2, [r3, #4]
    3616:	7959      	ldrb	r1, [r3, #5]
    3618:	0209      	lsls	r1, r1, #8
    361a:	430a      	orrs	r2, r1
    361c:	7999      	ldrb	r1, [r3, #6]
    361e:	0409      	lsls	r1, r1, #16
    3620:	430a      	orrs	r2, r1
    3622:	79db      	ldrb	r3, [r3, #7]
    3624:	061b      	lsls	r3, r3, #24
    3626:	4313      	orrs	r3, r2
    3628:	001a      	movs	r2, r3
    362a:	2307      	movs	r3, #7
    362c:	4013      	ands	r3, r2
    362e:	d101      	bne.n	3634 <_spi_m_sync_init+0x118>
    3630:	2201      	movs	r2, #1
    3632:	e000      	b.n	3636 <_spi_m_sync_init+0x11a>
    3634:	2202      	movs	r2, #2
    3636:	687b      	ldr	r3, [r7, #4]
    3638:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    363a:	68fb      	ldr	r3, [r7, #12]
    363c:	7b9a      	ldrb	r2, [r3, #14]
    363e:	7bdb      	ldrb	r3, [r3, #15]
    3640:	021b      	lsls	r3, r3, #8
    3642:	4313      	orrs	r3, r2
    3644:	b29a      	uxth	r2, r3
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    364a:	2300      	movs	r3, #0
}
    364c:	0018      	movs	r0, r3
    364e:	46bd      	mov	sp, r7
    3650:	b004      	add	sp, #16
    3652:	bd80      	pop	{r7, pc}
    3654:	00003399 	.word	0x00003399
    3658:	0000094b 	.word	0x0000094b
    365c:	000046f8 	.word	0x000046f8
    3660:	00001ec1 	.word	0x00001ec1
    3664:	00002e4b 	.word	0x00002e4b
    3668:	00002fc5 	.word	0x00002fc5
    366c:	00002f99 	.word	0x00002f99
    3670:	00002e2d 	.word	0x00002e2d
    3674:	00002ff5 	.word	0x00002ff5
    3678:	000032a1 	.word	0x000032a1
    367c:	000031d9 	.word	0x000031d9

00003680 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    3680:	b580      	push	{r7, lr}
    3682:	b084      	sub	sp, #16
    3684:	af00      	add	r7, sp, #0
    3686:	6078      	str	r0, [r7, #4]
    3688:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    368a:	687b      	ldr	r3, [r7, #4]
    368c:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    368e:	683a      	ldr	r2, [r7, #0]
    3690:	687b      	ldr	r3, [r7, #4]
    3692:	0011      	movs	r1, r2
    3694:	0018      	movs	r0, r3
    3696:	4b17      	ldr	r3, [pc, #92]	; (36f4 <_spi_m_async_init+0x74>)
    3698:	4798      	blx	r3
    369a:	0003      	movs	r3, r0
    369c:	60bb      	str	r3, [r7, #8]

	if (rc < 0) {
    369e:	68bb      	ldr	r3, [r7, #8]
    36a0:	2b00      	cmp	r3, #0
    36a2:	da01      	bge.n	36a8 <_spi_m_async_init+0x28>
		return rc;
    36a4:	68bb      	ldr	r3, [r7, #8]
    36a6:	e021      	b.n	36ec <_spi_m_async_init+0x6c>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    36a8:	687a      	ldr	r2, [r7, #4]
    36aa:	683b      	ldr	r3, [r7, #0]
    36ac:	0011      	movs	r1, r2
    36ae:	0018      	movs	r0, r3
    36b0:	4b11      	ldr	r3, [pc, #68]	; (36f8 <_spi_m_async_init+0x78>)
    36b2:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    36b4:	68fb      	ldr	r3, [r7, #12]
    36b6:	2200      	movs	r2, #0
    36b8:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    36ba:	68fb      	ldr	r3, [r7, #12]
    36bc:	2200      	movs	r2, #0
    36be:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    36c0:	68fb      	ldr	r3, [r7, #12]
    36c2:	2200      	movs	r2, #0
    36c4:	609a      	str	r2, [r3, #8]
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    36c6:	683b      	ldr	r3, [r7, #0]
    36c8:	0018      	movs	r0, r3
    36ca:	4b0c      	ldr	r3, [pc, #48]	; (36fc <_spi_m_async_init+0x7c>)
    36cc:	4798      	blx	r3
    36ce:	0003      	movs	r3, r0
    36d0:	b25b      	sxtb	r3, r3
    36d2:	0018      	movs	r0, r3
    36d4:	4b0a      	ldr	r3, [pc, #40]	; (3700 <_spi_m_async_init+0x80>)
    36d6:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    36d8:	683b      	ldr	r3, [r7, #0]
    36da:	0018      	movs	r0, r3
    36dc:	4b07      	ldr	r3, [pc, #28]	; (36fc <_spi_m_async_init+0x7c>)
    36de:	4798      	blx	r3
    36e0:	0003      	movs	r3, r0
    36e2:	b25b      	sxtb	r3, r3
    36e4:	0018      	movs	r0, r3
    36e6:	4b07      	ldr	r3, [pc, #28]	; (3704 <_spi_m_async_init+0x84>)
    36e8:	4798      	blx	r3

	return ERR_NONE;
    36ea:	2300      	movs	r3, #0
}
    36ec:	0018      	movs	r0, r3
    36ee:	46bd      	mov	sp, r7
    36f0:	b004      	add	sp, #16
    36f2:	bd80      	pop	{r7, pc}
    36f4:	0000351d 	.word	0x0000351d
    36f8:	00003105 	.word	0x00003105
    36fc:	00003145 	.word	0x00003145
    3700:	00002db5 	.word	0x00002db5
    3704:	00002df5 	.word	0x00002df5

00003708 <_spi_s_async_init>:

int32_t _spi_s_async_init(struct _spi_s_async_dev *dev, void *const hw)
{
    3708:	b580      	push	{r7, lr}
    370a:	b082      	sub	sp, #8
    370c:	af00      	add	r7, sp, #0
    370e:	6078      	str	r0, [r7, #4]
    3710:	6039      	str	r1, [r7, #0]
	return _spi_m_async_init(dev, hw);
    3712:	683a      	ldr	r2, [r7, #0]
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	0011      	movs	r1, r2
    3718:	0018      	movs	r0, r3
    371a:	4b03      	ldr	r3, [pc, #12]	; (3728 <_spi_s_async_init+0x20>)
    371c:	4798      	blx	r3
    371e:	0003      	movs	r3, r0
}
    3720:	0018      	movs	r0, r3
    3722:	46bd      	mov	sp, r7
    3724:	b002      	add	sp, #8
    3726:	bd80      	pop	{r7, pc}
    3728:	00003681 	.word	0x00003681

0000372c <_spi_m_async_enable>:

	return _spi_sync_enable(dev->prvt);
}

int32_t _spi_m_async_enable(struct _spi_async_dev *dev)
{
    372c:	b580      	push	{r7, lr}
    372e:	b082      	sub	sp, #8
    3730:	af00      	add	r7, sp, #0
    3732:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    3734:	687b      	ldr	r3, [r7, #4]
    3736:	2b00      	cmp	r3, #0
    3738:	d005      	beq.n	3746 <_spi_m_async_enable+0x1a>
    373a:	687b      	ldr	r3, [r7, #4]
    373c:	681b      	ldr	r3, [r3, #0]
    373e:	2b00      	cmp	r3, #0
    3740:	d001      	beq.n	3746 <_spi_m_async_enable+0x1a>
    3742:	2301      	movs	r3, #1
    3744:	e000      	b.n	3748 <_spi_m_async_enable+0x1c>
    3746:	2300      	movs	r3, #0
    3748:	1c1a      	adds	r2, r3, #0
    374a:	2301      	movs	r3, #1
    374c:	4013      	ands	r3, r2
    374e:	b2db      	uxtb	r3, r3
    3750:	4a07      	ldr	r2, [pc, #28]	; (3770 <_spi_m_async_enable+0x44>)
    3752:	4908      	ldr	r1, [pc, #32]	; (3774 <_spi_m_async_enable+0x48>)
    3754:	0018      	movs	r0, r3
    3756:	4b08      	ldr	r3, [pc, #32]	; (3778 <_spi_m_async_enable+0x4c>)
    3758:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
    375a:	687b      	ldr	r3, [r7, #4]
    375c:	681b      	ldr	r3, [r3, #0]
    375e:	0018      	movs	r0, r3
    3760:	4b06      	ldr	r3, [pc, #24]	; (377c <_spi_m_async_enable+0x50>)
    3762:	4798      	blx	r3
    3764:	0003      	movs	r3, r0
}
    3766:	0018      	movs	r0, r3
    3768:	46bd      	mov	sp, r7
    376a:	b002      	add	sp, #8
    376c:	bd80      	pop	{r7, pc}
    376e:	46c0      	nop			; (mov r8, r8)
    3770:	000009b4 	.word	0x000009b4
    3774:	000046f8 	.word	0x000046f8
    3778:	00001ec1 	.word	0x00001ec1
    377c:	000031a1 	.word	0x000031a1

00003780 <_spi_s_async_enable>:

int32_t _spi_s_async_enable(struct _spi_s_async_dev *dev)
{
    3780:	b580      	push	{r7, lr}
    3782:	b082      	sub	sp, #8
    3784:	af00      	add	r7, sp, #0
    3786:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    3788:	687b      	ldr	r3, [r7, #4]
    378a:	2b00      	cmp	r3, #0
    378c:	d005      	beq.n	379a <_spi_s_async_enable+0x1a>
    378e:	687b      	ldr	r3, [r7, #4]
    3790:	681b      	ldr	r3, [r3, #0]
    3792:	2b00      	cmp	r3, #0
    3794:	d001      	beq.n	379a <_spi_s_async_enable+0x1a>
    3796:	2301      	movs	r3, #1
    3798:	e000      	b.n	379c <_spi_s_async_enable+0x1c>
    379a:	2300      	movs	r3, #0
    379c:	1c1a      	adds	r2, r3, #0
    379e:	2301      	movs	r3, #1
    37a0:	4013      	ands	r3, r2
    37a2:	b2db      	uxtb	r3, r3
    37a4:	4a07      	ldr	r2, [pc, #28]	; (37c4 <_spi_s_async_enable+0x44>)
    37a6:	4908      	ldr	r1, [pc, #32]	; (37c8 <_spi_s_async_enable+0x48>)
    37a8:	0018      	movs	r0, r3
    37aa:	4b08      	ldr	r3, [pc, #32]	; (37cc <_spi_s_async_enable+0x4c>)
    37ac:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	681b      	ldr	r3, [r3, #0]
    37b2:	0018      	movs	r0, r3
    37b4:	4b06      	ldr	r3, [pc, #24]	; (37d0 <_spi_s_async_enable+0x50>)
    37b6:	4798      	blx	r3
    37b8:	0003      	movs	r3, r0
}
    37ba:	0018      	movs	r0, r3
    37bc:	46bd      	mov	sp, r7
    37be:	b002      	add	sp, #8
    37c0:	bd80      	pop	{r7, pc}
    37c2:	46c0      	nop			; (mov r8, r8)
    37c4:	000009bb 	.word	0x000009bb
    37c8:	000046f8 	.word	0x000046f8
    37cc:	00001ec1 	.word	0x00001ec1
    37d0:	000031a1 	.word	0x000031a1

000037d4 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    37d4:	b580      	push	{r7, lr}
    37d6:	b084      	sub	sp, #16
    37d8:	af00      	add	r7, sp, #0
    37da:	6078      	str	r0, [r7, #4]
    37dc:	000a      	movs	r2, r1
    37de:	1cfb      	adds	r3, r7, #3
    37e0:	701a      	strb	r2, [r3, #0]
	void *hw = dev->prvt;
    37e2:	687b      	ldr	r3, [r7, #4]
    37e4:	681b      	ldr	r3, [r3, #0]
    37e6:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    37e8:	687b      	ldr	r3, [r7, #4]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d004      	beq.n	37f8 <_spi_m_async_enable_tx+0x24>
    37ee:	68fb      	ldr	r3, [r7, #12]
    37f0:	2b00      	cmp	r3, #0
    37f2:	d001      	beq.n	37f8 <_spi_m_async_enable_tx+0x24>
    37f4:	2301      	movs	r3, #1
    37f6:	e000      	b.n	37fa <_spi_m_async_enable_tx+0x26>
    37f8:	2300      	movs	r3, #0
    37fa:	1c1a      	adds	r2, r3, #0
    37fc:	2301      	movs	r3, #1
    37fe:	4013      	ands	r3, r2
    3800:	b2db      	uxtb	r3, r3
    3802:	4a0b      	ldr	r2, [pc, #44]	; (3830 <_spi_m_async_enable_tx+0x5c>)
    3804:	490b      	ldr	r1, [pc, #44]	; (3834 <_spi_m_async_enable_tx+0x60>)
    3806:	0018      	movs	r0, r3
    3808:	4b0b      	ldr	r3, [pc, #44]	; (3838 <_spi_m_async_enable_tx+0x64>)
    380a:	4798      	blx	r3

	if (state) {
    380c:	1cfb      	adds	r3, r7, #3
    380e:	781b      	ldrb	r3, [r3, #0]
    3810:	2b00      	cmp	r3, #0
    3812:	d004      	beq.n	381e <_spi_m_async_enable_tx+0x4a>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    3814:	68fb      	ldr	r3, [r7, #12]
    3816:	0018      	movs	r0, r3
    3818:	4b08      	ldr	r3, [pc, #32]	; (383c <_spi_m_async_enable_tx+0x68>)
    381a:	4798      	blx	r3
    381c:	e003      	b.n	3826 <_spi_m_async_enable_tx+0x52>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    381e:	68fb      	ldr	r3, [r7, #12]
    3820:	0018      	movs	r0, r3
    3822:	4b07      	ldr	r3, [pc, #28]	; (3840 <_spi_m_async_enable_tx+0x6c>)
    3824:	4798      	blx	r3
	}

	return ERR_NONE;
    3826:	2300      	movs	r3, #0
}
    3828:	0018      	movs	r0, r3
    382a:	46bd      	mov	sp, r7
    382c:	b004      	add	sp, #16
    382e:	bd80      	pop	{r7, pc}
    3830:	00000ad7 	.word	0x00000ad7
    3834:	000046f8 	.word	0x000046f8
    3838:	00001ec1 	.word	0x00001ec1
    383c:	00002e9f 	.word	0x00002e9f
    3840:	00002eb5 	.word	0x00002eb5

00003844 <_spi_s_async_enable_tx>:

int32_t _spi_s_async_enable_tx(struct _spi_s_async_dev *dev, bool state)
{
    3844:	b580      	push	{r7, lr}
    3846:	b082      	sub	sp, #8
    3848:	af00      	add	r7, sp, #0
    384a:	6078      	str	r0, [r7, #4]
    384c:	000a      	movs	r2, r1
    384e:	1cfb      	adds	r3, r7, #3
    3850:	701a      	strb	r2, [r3, #0]
	return _spi_m_async_enable_tx(dev, state);
    3852:	1cfb      	adds	r3, r7, #3
    3854:	781a      	ldrb	r2, [r3, #0]
    3856:	687b      	ldr	r3, [r7, #4]
    3858:	0011      	movs	r1, r2
    385a:	0018      	movs	r0, r3
    385c:	4b03      	ldr	r3, [pc, #12]	; (386c <_spi_s_async_enable_tx+0x28>)
    385e:	4798      	blx	r3
    3860:	0003      	movs	r3, r0
}
    3862:	0018      	movs	r0, r3
    3864:	46bd      	mov	sp, r7
    3866:	b002      	add	sp, #8
    3868:	bd80      	pop	{r7, pc}
    386a:	46c0      	nop			; (mov r8, r8)
    386c:	000037d5 	.word	0x000037d5

00003870 <_spi_m_async_enable_rx>:

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    3870:	b580      	push	{r7, lr}
    3872:	b084      	sub	sp, #16
    3874:	af00      	add	r7, sp, #0
    3876:	6078      	str	r0, [r7, #4]
    3878:	000a      	movs	r2, r1
    387a:	1cfb      	adds	r3, r7, #3
    387c:	701a      	strb	r2, [r3, #0]
	void *hw = dev->prvt;
    387e:	687b      	ldr	r3, [r7, #4]
    3880:	681b      	ldr	r3, [r3, #0]
    3882:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    3884:	687b      	ldr	r3, [r7, #4]
    3886:	1e5a      	subs	r2, r3, #1
    3888:	4193      	sbcs	r3, r2
    388a:	b2db      	uxtb	r3, r3
    388c:	4a0f      	ldr	r2, [pc, #60]	; (38cc <_spi_m_async_enable_rx+0x5c>)
    388e:	4910      	ldr	r1, [pc, #64]	; (38d0 <_spi_m_async_enable_rx+0x60>)
    3890:	0018      	movs	r0, r3
    3892:	4b10      	ldr	r3, [pc, #64]	; (38d4 <_spi_m_async_enable_rx+0x64>)
    3894:	4798      	blx	r3
	ASSERT(hw);
    3896:	68fb      	ldr	r3, [r7, #12]
    3898:	1e5a      	subs	r2, r3, #1
    389a:	4193      	sbcs	r3, r2
    389c:	b2db      	uxtb	r3, r3
    389e:	4a0e      	ldr	r2, [pc, #56]	; (38d8 <_spi_m_async_enable_rx+0x68>)
    38a0:	490b      	ldr	r1, [pc, #44]	; (38d0 <_spi_m_async_enable_rx+0x60>)
    38a2:	0018      	movs	r0, r3
    38a4:	4b0b      	ldr	r3, [pc, #44]	; (38d4 <_spi_m_async_enable_rx+0x64>)
    38a6:	4798      	blx	r3

	if (state) {
    38a8:	1cfb      	adds	r3, r7, #3
    38aa:	781b      	ldrb	r3, [r3, #0]
    38ac:	2b00      	cmp	r3, #0
    38ae:	d004      	beq.n	38ba <_spi_m_async_enable_rx+0x4a>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    38b0:	68fb      	ldr	r3, [r7, #12]
    38b2:	0018      	movs	r0, r3
    38b4:	4b09      	ldr	r3, [pc, #36]	; (38dc <_spi_m_async_enable_rx+0x6c>)
    38b6:	4798      	blx	r3
    38b8:	e003      	b.n	38c2 <_spi_m_async_enable_rx+0x52>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    38ba:	68fb      	ldr	r3, [r7, #12]
    38bc:	0018      	movs	r0, r3
    38be:	4b08      	ldr	r3, [pc, #32]	; (38e0 <_spi_m_async_enable_rx+0x70>)
    38c0:	4798      	blx	r3
	}

	return ERR_NONE;
    38c2:	2300      	movs	r3, #0
}
    38c4:	0018      	movs	r0, r3
    38c6:	46bd      	mov	sp, r7
    38c8:	b004      	add	sp, #16
    38ca:	bd80      	pop	{r7, pc}
    38cc:	00000aeb 	.word	0x00000aeb
    38d0:	000046f8 	.word	0x000046f8
    38d4:	00001ec1 	.word	0x00001ec1
    38d8:	00000aec 	.word	0x00000aec
    38dc:	00002ef7 	.word	0x00002ef7
    38e0:	00002f0d 	.word	0x00002f0d

000038e4 <_spi_s_async_enable_rx>:

int32_t _spi_s_async_enable_rx(struct _spi_s_async_dev *dev, bool state)
{
    38e4:	b580      	push	{r7, lr}
    38e6:	b082      	sub	sp, #8
    38e8:	af00      	add	r7, sp, #0
    38ea:	6078      	str	r0, [r7, #4]
    38ec:	000a      	movs	r2, r1
    38ee:	1cfb      	adds	r3, r7, #3
    38f0:	701a      	strb	r2, [r3, #0]
	return _spi_m_async_enable_rx(dev, state);
    38f2:	1cfb      	adds	r3, r7, #3
    38f4:	781a      	ldrb	r2, [r3, #0]
    38f6:	687b      	ldr	r3, [r7, #4]
    38f8:	0011      	movs	r1, r2
    38fa:	0018      	movs	r0, r3
    38fc:	4b03      	ldr	r3, [pc, #12]	; (390c <_spi_s_async_enable_rx+0x28>)
    38fe:	4798      	blx	r3
    3900:	0003      	movs	r3, r0
}
    3902:	0018      	movs	r0, r3
    3904:	46bd      	mov	sp, r7
    3906:	b002      	add	sp, #8
    3908:	bd80      	pop	{r7, pc}
    390a:	46c0      	nop			; (mov r8, r8)
    390c:	00003871 	.word	0x00003871

00003910 <_spi_m_async_enable_tx_complete>:

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    3910:	b580      	push	{r7, lr}
    3912:	b082      	sub	sp, #8
    3914:	af00      	add	r7, sp, #0
    3916:	6078      	str	r0, [r7, #4]
    3918:	000a      	movs	r2, r1
    391a:	1cfb      	adds	r3, r7, #3
    391c:	701a      	strb	r2, [r3, #0]
	ASSERT(dev && dev->prvt);
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	2b00      	cmp	r3, #0
    3922:	d005      	beq.n	3930 <_spi_m_async_enable_tx_complete+0x20>
    3924:	687b      	ldr	r3, [r7, #4]
    3926:	681b      	ldr	r3, [r3, #0]
    3928:	2b00      	cmp	r3, #0
    392a:	d001      	beq.n	3930 <_spi_m_async_enable_tx_complete+0x20>
    392c:	2301      	movs	r3, #1
    392e:	e000      	b.n	3932 <_spi_m_async_enable_tx_complete+0x22>
    3930:	2300      	movs	r3, #0
    3932:	1c1a      	adds	r2, r3, #0
    3934:	2301      	movs	r3, #1
    3936:	4013      	ands	r3, r2
    3938:	b2db      	uxtb	r3, r3
    393a:	4a0c      	ldr	r2, [pc, #48]	; (396c <_spi_m_async_enable_tx_complete+0x5c>)
    393c:	490c      	ldr	r1, [pc, #48]	; (3970 <_spi_m_async_enable_tx_complete+0x60>)
    393e:	0018      	movs	r0, r3
    3940:	4b0c      	ldr	r3, [pc, #48]	; (3974 <_spi_m_async_enable_tx_complete+0x64>)
    3942:	4798      	blx	r3

	if (state) {
    3944:	1cfb      	adds	r3, r7, #3
    3946:	781b      	ldrb	r3, [r3, #0]
    3948:	2b00      	cmp	r3, #0
    394a:	d005      	beq.n	3958 <_spi_m_async_enable_tx_complete+0x48>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    394c:	687b      	ldr	r3, [r7, #4]
    394e:	681b      	ldr	r3, [r3, #0]
    3950:	0018      	movs	r0, r3
    3952:	4b09      	ldr	r3, [pc, #36]	; (3978 <_spi_m_async_enable_tx_complete+0x68>)
    3954:	4798      	blx	r3
    3956:	e004      	b.n	3962 <_spi_m_async_enable_tx_complete+0x52>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    3958:	687b      	ldr	r3, [r7, #4]
    395a:	681b      	ldr	r3, [r3, #0]
    395c:	0018      	movs	r0, r3
    395e:	4b07      	ldr	r3, [pc, #28]	; (397c <_spi_m_async_enable_tx_complete+0x6c>)
    3960:	4798      	blx	r3
	}

	return ERR_NONE;
    3962:	2300      	movs	r3, #0
}
    3964:	0018      	movs	r0, r3
    3966:	46bd      	mov	sp, r7
    3968:	b002      	add	sp, #8
    396a:	bd80      	pop	{r7, pc}
    396c:	00000afe 	.word	0x00000afe
    3970:	000046f8 	.word	0x000046f8
    3974:	00001ec1 	.word	0x00001ec1
    3978:	00002ecb 	.word	0x00002ecb
    397c:	00002ee1 	.word	0x00002ee1

00003980 <_spi_s_async_enable_ss_detect>:

int32_t _spi_s_async_enable_ss_detect(struct _spi_s_async_dev *dev, bool state)
{
    3980:	b580      	push	{r7, lr}
    3982:	b082      	sub	sp, #8
    3984:	af00      	add	r7, sp, #0
    3986:	6078      	str	r0, [r7, #4]
    3988:	000a      	movs	r2, r1
    398a:	1cfb      	adds	r3, r7, #3
    398c:	701a      	strb	r2, [r3, #0]
	return _spi_m_async_enable_tx_complete(dev, state);
    398e:	1cfb      	adds	r3, r7, #3
    3990:	781a      	ldrb	r2, [r3, #0]
    3992:	687b      	ldr	r3, [r7, #4]
    3994:	0011      	movs	r1, r2
    3996:	0018      	movs	r0, r3
    3998:	4b03      	ldr	r3, [pc, #12]	; (39a8 <_spi_s_async_enable_ss_detect+0x28>)
    399a:	4798      	blx	r3
    399c:	0003      	movs	r3, r0
}
    399e:	0018      	movs	r0, r3
    39a0:	46bd      	mov	sp, r7
    39a2:	b002      	add	sp, #8
    39a4:	bd80      	pop	{r7, pc}
    39a6:	46c0      	nop			; (mov r8, r8)
    39a8:	00003911 	.word	0x00003911

000039ac <_spi_m_async_write_one>:

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    39ac:	b580      	push	{r7, lr}
    39ae:	b082      	sub	sp, #8
    39b0:	af00      	add	r7, sp, #0
    39b2:	6078      	str	r0, [r7, #4]
    39b4:	000a      	movs	r2, r1
    39b6:	1cbb      	adds	r3, r7, #2
    39b8:	801a      	strh	r2, [r3, #0]
	ASSERT(dev && dev->prvt);
    39ba:	687b      	ldr	r3, [r7, #4]
    39bc:	2b00      	cmp	r3, #0
    39be:	d005      	beq.n	39cc <_spi_m_async_write_one+0x20>
    39c0:	687b      	ldr	r3, [r7, #4]
    39c2:	681b      	ldr	r3, [r3, #0]
    39c4:	2b00      	cmp	r3, #0
    39c6:	d001      	beq.n	39cc <_spi_m_async_write_one+0x20>
    39c8:	2301      	movs	r3, #1
    39ca:	e000      	b.n	39ce <_spi_m_async_write_one+0x22>
    39cc:	2300      	movs	r3, #0
    39ce:	1c1a      	adds	r2, r3, #0
    39d0:	2301      	movs	r3, #1
    39d2:	4013      	ands	r3, r2
    39d4:	b2d8      	uxtb	r0, r3
    39d6:	23b1      	movs	r3, #177	; 0xb1
    39d8:	011a      	lsls	r2, r3, #4
    39da:	4b08      	ldr	r3, [pc, #32]	; (39fc <_spi_m_async_write_one+0x50>)
    39dc:	0019      	movs	r1, r3
    39de:	4b08      	ldr	r3, [pc, #32]	; (3a00 <_spi_m_async_write_one+0x54>)
    39e0:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	681a      	ldr	r2, [r3, #0]
    39e6:	1cbb      	adds	r3, r7, #2
    39e8:	881b      	ldrh	r3, [r3, #0]
    39ea:	0019      	movs	r1, r3
    39ec:	0010      	movs	r0, r2
    39ee:	4b05      	ldr	r3, [pc, #20]	; (3a04 <_spi_m_async_write_one+0x58>)
    39f0:	4798      	blx	r3

	return ERR_NONE;
    39f2:	2300      	movs	r3, #0
}
    39f4:	0018      	movs	r0, r3
    39f6:	46bd      	mov	sp, r7
    39f8:	b002      	add	sp, #8
    39fa:	bd80      	pop	{r7, pc}
    39fc:	000046f8 	.word	0x000046f8
    3a00:	00001ec1 	.word	0x00001ec1
    3a04:	0000307b 	.word	0x0000307b

00003a08 <_spi_s_async_write_one>:

int32_t _spi_s_async_write_one(struct _spi_s_async_dev *dev, uint16_t data)
{
    3a08:	b580      	push	{r7, lr}
    3a0a:	b082      	sub	sp, #8
    3a0c:	af00      	add	r7, sp, #0
    3a0e:	6078      	str	r0, [r7, #4]
    3a10:	000a      	movs	r2, r1
    3a12:	1cbb      	adds	r3, r7, #2
    3a14:	801a      	strh	r2, [r3, #0]
	ASSERT(dev && dev->prvt);
    3a16:	687b      	ldr	r3, [r7, #4]
    3a18:	2b00      	cmp	r3, #0
    3a1a:	d005      	beq.n	3a28 <_spi_s_async_write_one+0x20>
    3a1c:	687b      	ldr	r3, [r7, #4]
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	2b00      	cmp	r3, #0
    3a22:	d001      	beq.n	3a28 <_spi_s_async_write_one+0x20>
    3a24:	2301      	movs	r3, #1
    3a26:	e000      	b.n	3a2a <_spi_s_async_write_one+0x22>
    3a28:	2300      	movs	r3, #0
    3a2a:	1c1a      	adds	r2, r3, #0
    3a2c:	2301      	movs	r3, #1
    3a2e:	4013      	ands	r3, r2
    3a30:	b2db      	uxtb	r3, r3
    3a32:	4a09      	ldr	r2, [pc, #36]	; (3a58 <_spi_s_async_write_one+0x50>)
    3a34:	4909      	ldr	r1, [pc, #36]	; (3a5c <_spi_s_async_write_one+0x54>)
    3a36:	0018      	movs	r0, r3
    3a38:	4b09      	ldr	r3, [pc, #36]	; (3a60 <_spi_s_async_write_one+0x58>)
    3a3a:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    3a3c:	687b      	ldr	r3, [r7, #4]
    3a3e:	681a      	ldr	r2, [r3, #0]
    3a40:	1cbb      	adds	r3, r7, #2
    3a42:	881b      	ldrh	r3, [r3, #0]
    3a44:	0019      	movs	r1, r3
    3a46:	0010      	movs	r0, r2
    3a48:	4b06      	ldr	r3, [pc, #24]	; (3a64 <_spi_s_async_write_one+0x5c>)
    3a4a:	4798      	blx	r3

	return ERR_NONE;
    3a4c:	2300      	movs	r3, #0
}
    3a4e:	0018      	movs	r0, r3
    3a50:	46bd      	mov	sp, r7
    3a52:	b002      	add	sp, #8
    3a54:	bd80      	pop	{r7, pc}
    3a56:	46c0      	nop			; (mov r8, r8)
    3a58:	00000b19 	.word	0x00000b19
    3a5c:	000046f8 	.word	0x000046f8
    3a60:	00001ec1 	.word	0x00001ec1
    3a64:	0000307b 	.word	0x0000307b

00003a68 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    3a68:	b580      	push	{r7, lr}
    3a6a:	b082      	sub	sp, #8
    3a6c:	af00      	add	r7, sp, #0
    3a6e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    3a70:	687b      	ldr	r3, [r7, #4]
    3a72:	2b00      	cmp	r3, #0
    3a74:	d005      	beq.n	3a82 <_spi_m_async_read_one+0x1a>
    3a76:	687b      	ldr	r3, [r7, #4]
    3a78:	681b      	ldr	r3, [r3, #0]
    3a7a:	2b00      	cmp	r3, #0
    3a7c:	d001      	beq.n	3a82 <_spi_m_async_read_one+0x1a>
    3a7e:	2301      	movs	r3, #1
    3a80:	e000      	b.n	3a84 <_spi_m_async_read_one+0x1c>
    3a82:	2300      	movs	r3, #0
    3a84:	1c1a      	adds	r2, r3, #0
    3a86:	2301      	movs	r3, #1
    3a88:	4013      	ands	r3, r2
    3a8a:	b2db      	uxtb	r3, r3
    3a8c:	4a07      	ldr	r2, [pc, #28]	; (3aac <_spi_m_async_read_one+0x44>)
    3a8e:	4908      	ldr	r1, [pc, #32]	; (3ab0 <_spi_m_async_read_one+0x48>)
    3a90:	0018      	movs	r0, r3
    3a92:	4b08      	ldr	r3, [pc, #32]	; (3ab4 <_spi_m_async_read_one+0x4c>)
    3a94:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    3a96:	687b      	ldr	r3, [r7, #4]
    3a98:	681b      	ldr	r3, [r3, #0]
    3a9a:	0018      	movs	r0, r3
    3a9c:	4b06      	ldr	r3, [pc, #24]	; (3ab8 <_spi_m_async_read_one+0x50>)
    3a9e:	4798      	blx	r3
    3aa0:	0003      	movs	r3, r0
    3aa2:	b29b      	uxth	r3, r3
}
    3aa4:	0018      	movs	r0, r3
    3aa6:	46bd      	mov	sp, r7
    3aa8:	b002      	add	sp, #8
    3aaa:	bd80      	pop	{r7, pc}
    3aac:	00000b2b 	.word	0x00000b2b
    3ab0:	000046f8 	.word	0x000046f8
    3ab4:	00001ec1 	.word	0x00001ec1
    3ab8:	00003093 	.word	0x00003093

00003abc <_spi_s_async_read_one>:

uint16_t _spi_s_async_read_one(struct _spi_s_async_dev *dev)
{
    3abc:	b580      	push	{r7, lr}
    3abe:	b082      	sub	sp, #8
    3ac0:	af00      	add	r7, sp, #0
    3ac2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    3ac4:	687b      	ldr	r3, [r7, #4]
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d005      	beq.n	3ad6 <_spi_s_async_read_one+0x1a>
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	681b      	ldr	r3, [r3, #0]
    3ace:	2b00      	cmp	r3, #0
    3ad0:	d001      	beq.n	3ad6 <_spi_s_async_read_one+0x1a>
    3ad2:	2301      	movs	r3, #1
    3ad4:	e000      	b.n	3ad8 <_spi_s_async_read_one+0x1c>
    3ad6:	2300      	movs	r3, #0
    3ad8:	1c1a      	adds	r2, r3, #0
    3ada:	2301      	movs	r3, #1
    3adc:	4013      	ands	r3, r2
    3ade:	b2db      	uxtb	r3, r3
    3ae0:	4a07      	ldr	r2, [pc, #28]	; (3b00 <_spi_s_async_read_one+0x44>)
    3ae2:	4908      	ldr	r1, [pc, #32]	; (3b04 <_spi_s_async_read_one+0x48>)
    3ae4:	0018      	movs	r0, r3
    3ae6:	4b08      	ldr	r3, [pc, #32]	; (3b08 <_spi_s_async_read_one+0x4c>)
    3ae8:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    3aea:	687b      	ldr	r3, [r7, #4]
    3aec:	681b      	ldr	r3, [r3, #0]
    3aee:	0018      	movs	r0, r3
    3af0:	4b06      	ldr	r3, [pc, #24]	; (3b0c <_spi_s_async_read_one+0x50>)
    3af2:	4798      	blx	r3
    3af4:	0003      	movs	r3, r0
    3af6:	b29b      	uxth	r3, r3
}
    3af8:	0018      	movs	r0, r3
    3afa:	46bd      	mov	sp, r7
    3afc:	b002      	add	sp, #8
    3afe:	bd80      	pop	{r7, pc}
    3b00:	00000b32 	.word	0x00000b32
    3b04:	000046f8 	.word	0x000046f8
    3b08:	00001ec1 	.word	0x00001ec1
    3b0c:	00003093 	.word	0x00003093

00003b10 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    3b10:	b580      	push	{r7, lr}
    3b12:	b086      	sub	sp, #24
    3b14:	af00      	add	r7, sp, #0
    3b16:	60f8      	str	r0, [r7, #12]
    3b18:	607a      	str	r2, [r7, #4]
    3b1a:	230b      	movs	r3, #11
    3b1c:	18fb      	adds	r3, r7, r3
    3b1e:	1c0a      	adds	r2, r1, #0
    3b20:	701a      	strb	r2, [r3, #0]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    3b22:	68fb      	ldr	r3, [r7, #12]
    3b24:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    3b26:	68fb      	ldr	r3, [r7, #12]
    3b28:	2b00      	cmp	r3, #0
    3b2a:	d006      	beq.n	3b3a <_spi_m_async_register_callback+0x2a>
    3b2c:	230b      	movs	r3, #11
    3b2e:	18fb      	adds	r3, r7, r3
    3b30:	781b      	ldrb	r3, [r3, #0]
    3b32:	2b03      	cmp	r3, #3
    3b34:	d801      	bhi.n	3b3a <_spi_m_async_register_callback+0x2a>
    3b36:	2301      	movs	r3, #1
    3b38:	e000      	b.n	3b3c <_spi_m_async_register_callback+0x2c>
    3b3a:	2300      	movs	r3, #0
    3b3c:	1c1a      	adds	r2, r3, #0
    3b3e:	2301      	movs	r3, #1
    3b40:	4013      	ands	r3, r2
    3b42:	b2db      	uxtb	r3, r3
    3b44:	4a0a      	ldr	r2, [pc, #40]	; (3b70 <_spi_m_async_register_callback+0x60>)
    3b46:	490b      	ldr	r1, [pc, #44]	; (3b74 <_spi_m_async_register_callback+0x64>)
    3b48:	0018      	movs	r0, r3
    3b4a:	4b0b      	ldr	r3, [pc, #44]	; (3b78 <_spi_m_async_register_callback+0x68>)
    3b4c:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    3b4e:	697b      	ldr	r3, [r7, #20]
    3b50:	3308      	adds	r3, #8
    3b52:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    3b54:	230b      	movs	r3, #11
    3b56:	18fb      	adds	r3, r7, r3
    3b58:	781b      	ldrb	r3, [r3, #0]
    3b5a:	009b      	lsls	r3, r3, #2
    3b5c:	693a      	ldr	r2, [r7, #16]
    3b5e:	18d3      	adds	r3, r2, r3
    3b60:	687a      	ldr	r2, [r7, #4]
    3b62:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    3b64:	2300      	movs	r3, #0
}
    3b66:	0018      	movs	r0, r3
    3b68:	46bd      	mov	sp, r7
    3b6a:	b006      	add	sp, #24
    3b6c:	bd80      	pop	{r7, pc}
    3b6e:	46c0      	nop			; (mov r8, r8)
    3b70:	00000b44 	.word	0x00000b44
    3b74:	000046f8 	.word	0x000046f8
    3b78:	00001ec1 	.word	0x00001ec1

00003b7c <_spi_s_async_register_callback>:

int32_t _spi_s_async_register_callback(struct _spi_s_async_dev *dev, const enum _spi_s_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    3b7c:	b580      	push	{r7, lr}
    3b7e:	b084      	sub	sp, #16
    3b80:	af00      	add	r7, sp, #0
    3b82:	60f8      	str	r0, [r7, #12]
    3b84:	607a      	str	r2, [r7, #4]
    3b86:	230b      	movs	r3, #11
    3b88:	18fb      	adds	r3, r7, r3
    3b8a:	1c0a      	adds	r2, r1, #0
    3b8c:	701a      	strb	r2, [r3, #0]
	return _spi_m_async_register_callback(dev, cb_type, func);
    3b8e:	687a      	ldr	r2, [r7, #4]
    3b90:	230b      	movs	r3, #11
    3b92:	18fb      	adds	r3, r7, r3
    3b94:	7819      	ldrb	r1, [r3, #0]
    3b96:	68fb      	ldr	r3, [r7, #12]
    3b98:	0018      	movs	r0, r3
    3b9a:	4b03      	ldr	r3, [pc, #12]	; (3ba8 <_spi_s_async_register_callback+0x2c>)
    3b9c:	4798      	blx	r3
    3b9e:	0003      	movs	r3, r0
}
    3ba0:	0018      	movs	r0, r3
    3ba2:	46bd      	mov	sp, r7
    3ba4:	b004      	add	sp, #16
    3ba6:	bd80      	pop	{r7, pc}
    3ba8:	00003b11 	.word	0x00003b11

00003bac <_spi_m_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_m_async_set_irq_state(struct _spi_async_dev *const device, const enum _spi_async_dev_cb_type type,
                                const bool state)
{
    3bac:	b580      	push	{r7, lr}
    3bae:	b082      	sub	sp, #8
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	6078      	str	r0, [r7, #4]
    3bb4:	0008      	movs	r0, r1
    3bb6:	0011      	movs	r1, r2
    3bb8:	1cfb      	adds	r3, r7, #3
    3bba:	1c02      	adds	r2, r0, #0
    3bbc:	701a      	strb	r2, [r3, #0]
    3bbe:	1cbb      	adds	r3, r7, #2
    3bc0:	1c0a      	adds	r2, r1, #0
    3bc2:	701a      	strb	r2, [r3, #0]
	ASSERT(device);
    3bc4:	687b      	ldr	r3, [r7, #4]
    3bc6:	1e5a      	subs	r2, r3, #1
    3bc8:	4193      	sbcs	r3, r2
    3bca:	b2db      	uxtb	r3, r3
    3bcc:	4a0a      	ldr	r2, [pc, #40]	; (3bf8 <_spi_m_async_set_irq_state+0x4c>)
    3bce:	490b      	ldr	r1, [pc, #44]	; (3bfc <_spi_m_async_set_irq_state+0x50>)
    3bd0:	0018      	movs	r0, r3
    3bd2:	4b0b      	ldr	r3, [pc, #44]	; (3c00 <_spi_m_async_set_irq_state+0x54>)
    3bd4:	4798      	blx	r3

	if (SPI_DEV_CB_ERROR == type) {
    3bd6:	1cfb      	adds	r3, r7, #3
    3bd8:	781b      	ldrb	r3, [r3, #0]
    3bda:	2b03      	cmp	r3, #3
    3bdc:	d107      	bne.n	3bee <_spi_m_async_set_irq_state+0x42>
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	681a      	ldr	r2, [r3, #0]
    3be2:	1cbb      	adds	r3, r7, #2
    3be4:	781b      	ldrb	r3, [r3, #0]
    3be6:	0019      	movs	r1, r3
    3be8:	0010      	movs	r0, r2
    3bea:	4b06      	ldr	r3, [pc, #24]	; (3c04 <_spi_m_async_set_irq_state+0x58>)
    3bec:	4798      	blx	r3
	}
}
    3bee:	46c0      	nop			; (mov r8, r8)
    3bf0:	46bd      	mov	sp, r7
    3bf2:	b002      	add	sp, #8
    3bf4:	bd80      	pop	{r7, pc}
    3bf6:	46c0      	nop			; (mov r8, r8)
    3bf8:	00000b85 	.word	0x00000b85
    3bfc:	000046f8 	.word	0x000046f8
    3c00:	00001ec1 	.word	0x00001ec1
    3c04:	00002f23 	.word	0x00002f23

00003c08 <_spi_s_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_s_async_set_irq_state(struct _spi_async_dev *const device, const enum _spi_async_dev_cb_type type,
                                const bool state)
{
    3c08:	b580      	push	{r7, lr}
    3c0a:	b082      	sub	sp, #8
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	6078      	str	r0, [r7, #4]
    3c10:	0008      	movs	r0, r1
    3c12:	0011      	movs	r1, r2
    3c14:	1cfb      	adds	r3, r7, #3
    3c16:	1c02      	adds	r2, r0, #0
    3c18:	701a      	strb	r2, [r3, #0]
    3c1a:	1cbb      	adds	r3, r7, #2
    3c1c:	1c0a      	adds	r2, r1, #0
    3c1e:	701a      	strb	r2, [r3, #0]
	_spi_m_async_set_irq_state(device, type, state);
    3c20:	1cbb      	adds	r3, r7, #2
    3c22:	781a      	ldrb	r2, [r3, #0]
    3c24:	1cfb      	adds	r3, r7, #3
    3c26:	7819      	ldrb	r1, [r3, #0]
    3c28:	687b      	ldr	r3, [r7, #4]
    3c2a:	0018      	movs	r0, r3
    3c2c:	4b02      	ldr	r3, [pc, #8]	; (3c38 <_spi_s_async_set_irq_state+0x30>)
    3c2e:	4798      	blx	r3
}
    3c30:	46c0      	nop			; (mov r8, r8)
    3c32:	46bd      	mov	sp, r7
    3c34:	b002      	add	sp, #8
    3c36:	bd80      	pop	{r7, pc}
    3c38:	00003bad 	.word	0x00003bad

00003c3c <hri_port_read_DIR_reg>:
{
    3c3c:	b580      	push	{r7, lr}
    3c3e:	b082      	sub	sp, #8
    3c40:	af00      	add	r7, sp, #0
    3c42:	6078      	str	r0, [r7, #4]
    3c44:	000a      	movs	r2, r1
    3c46:	1cfb      	adds	r3, r7, #3
    3c48:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3c4a:	1cfb      	adds	r3, r7, #3
    3c4c:	781a      	ldrb	r2, [r3, #0]
    3c4e:	687b      	ldr	r3, [r7, #4]
    3c50:	01d2      	lsls	r2, r2, #7
    3c52:	58d3      	ldr	r3, [r2, r3]
}
    3c54:	0018      	movs	r0, r3
    3c56:	46bd      	mov	sp, r7
    3c58:	b002      	add	sp, #8
    3c5a:	bd80      	pop	{r7, pc}

00003c5c <hri_port_set_OUT_reg>:
{
    3c5c:	b580      	push	{r7, lr}
    3c5e:	b084      	sub	sp, #16
    3c60:	af00      	add	r7, sp, #0
    3c62:	60f8      	str	r0, [r7, #12]
    3c64:	607a      	str	r2, [r7, #4]
    3c66:	230b      	movs	r3, #11
    3c68:	18fb      	adds	r3, r7, r3
    3c6a:	1c0a      	adds	r2, r1, #0
    3c6c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3c6e:	230b      	movs	r3, #11
    3c70:	18fb      	adds	r3, r7, r3
    3c72:	781b      	ldrb	r3, [r3, #0]
    3c74:	68fa      	ldr	r2, [r7, #12]
    3c76:	01db      	lsls	r3, r3, #7
    3c78:	18d3      	adds	r3, r2, r3
    3c7a:	3318      	adds	r3, #24
    3c7c:	687a      	ldr	r2, [r7, #4]
    3c7e:	601a      	str	r2, [r3, #0]
}
    3c80:	46c0      	nop			; (mov r8, r8)
    3c82:	46bd      	mov	sp, r7
    3c84:	b004      	add	sp, #16
    3c86:	bd80      	pop	{r7, pc}

00003c88 <hri_port_read_OUT_reg>:
{
    3c88:	b580      	push	{r7, lr}
    3c8a:	b082      	sub	sp, #8
    3c8c:	af00      	add	r7, sp, #0
    3c8e:	6078      	str	r0, [r7, #4]
    3c90:	000a      	movs	r2, r1
    3c92:	1cfb      	adds	r3, r7, #3
    3c94:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3c96:	1cfb      	adds	r3, r7, #3
    3c98:	781b      	ldrb	r3, [r3, #0]
    3c9a:	687a      	ldr	r2, [r7, #4]
    3c9c:	01db      	lsls	r3, r3, #7
    3c9e:	18d3      	adds	r3, r2, r3
    3ca0:	3310      	adds	r3, #16
    3ca2:	681b      	ldr	r3, [r3, #0]
}
    3ca4:	0018      	movs	r0, r3
    3ca6:	46bd      	mov	sp, r7
    3ca8:	b002      	add	sp, #8
    3caa:	bd80      	pop	{r7, pc}

00003cac <hri_port_clear_OUT_reg>:
{
    3cac:	b580      	push	{r7, lr}
    3cae:	b084      	sub	sp, #16
    3cb0:	af00      	add	r7, sp, #0
    3cb2:	60f8      	str	r0, [r7, #12]
    3cb4:	607a      	str	r2, [r7, #4]
    3cb6:	230b      	movs	r3, #11
    3cb8:	18fb      	adds	r3, r7, r3
    3cba:	1c0a      	adds	r2, r1, #0
    3cbc:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3cbe:	230b      	movs	r3, #11
    3cc0:	18fb      	adds	r3, r7, r3
    3cc2:	781b      	ldrb	r3, [r3, #0]
    3cc4:	68fa      	ldr	r2, [r7, #12]
    3cc6:	01db      	lsls	r3, r3, #7
    3cc8:	18d3      	adds	r3, r2, r3
    3cca:	3314      	adds	r3, #20
    3ccc:	687a      	ldr	r2, [r7, #4]
    3cce:	601a      	str	r2, [r3, #0]
}
    3cd0:	46c0      	nop			; (mov r8, r8)
    3cd2:	46bd      	mov	sp, r7
    3cd4:	b004      	add	sp, #16
    3cd6:	bd80      	pop	{r7, pc}

00003cd8 <hri_port_read_IN_reg>:
{
    3cd8:	b580      	push	{r7, lr}
    3cda:	b082      	sub	sp, #8
    3cdc:	af00      	add	r7, sp, #0
    3cde:	6078      	str	r0, [r7, #4]
    3ce0:	000a      	movs	r2, r1
    3ce2:	1cfb      	adds	r3, r7, #3
    3ce4:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3ce6:	1cfb      	adds	r3, r7, #3
    3ce8:	781b      	ldrb	r3, [r3, #0]
    3cea:	687a      	ldr	r2, [r7, #4]
    3cec:	01db      	lsls	r3, r3, #7
    3cee:	18d3      	adds	r3, r2, r3
    3cf0:	3320      	adds	r3, #32
    3cf2:	681b      	ldr	r3, [r3, #0]
}
    3cf4:	0018      	movs	r0, r3
    3cf6:	46bd      	mov	sp, r7
    3cf8:	b002      	add	sp, #8
    3cfa:	bd80      	pop	{r7, pc}

00003cfc <_gpio_set_level>:
{
    3cfc:	b580      	push	{r7, lr}
    3cfe:	b082      	sub	sp, #8
    3d00:	af00      	add	r7, sp, #0
    3d02:	6039      	str	r1, [r7, #0]
    3d04:	0011      	movs	r1, r2
    3d06:	1dfb      	adds	r3, r7, #7
    3d08:	1c02      	adds	r2, r0, #0
    3d0a:	701a      	strb	r2, [r3, #0]
    3d0c:	1dbb      	adds	r3, r7, #6
    3d0e:	1c0a      	adds	r2, r1, #0
    3d10:	701a      	strb	r2, [r3, #0]
	if (level) {
    3d12:	1dbb      	adds	r3, r7, #6
    3d14:	781b      	ldrb	r3, [r3, #0]
    3d16:	2b00      	cmp	r3, #0
    3d18:	d008      	beq.n	3d2c <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    3d1a:	683a      	ldr	r2, [r7, #0]
    3d1c:	1dfb      	adds	r3, r7, #7
    3d1e:	7819      	ldrb	r1, [r3, #0]
    3d20:	23c0      	movs	r3, #192	; 0xc0
    3d22:	05db      	lsls	r3, r3, #23
    3d24:	0018      	movs	r0, r3
    3d26:	4b07      	ldr	r3, [pc, #28]	; (3d44 <_gpio_set_level+0x48>)
    3d28:	4798      	blx	r3
}
    3d2a:	e007      	b.n	3d3c <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    3d2c:	683a      	ldr	r2, [r7, #0]
    3d2e:	1dfb      	adds	r3, r7, #7
    3d30:	7819      	ldrb	r1, [r3, #0]
    3d32:	23c0      	movs	r3, #192	; 0xc0
    3d34:	05db      	lsls	r3, r3, #23
    3d36:	0018      	movs	r0, r3
    3d38:	4b03      	ldr	r3, [pc, #12]	; (3d48 <_gpio_set_level+0x4c>)
    3d3a:	4798      	blx	r3
}
    3d3c:	46c0      	nop			; (mov r8, r8)
    3d3e:	46bd      	mov	sp, r7
    3d40:	b002      	add	sp, #8
    3d42:	bd80      	pop	{r7, pc}
    3d44:	00003c5d 	.word	0x00003c5d
    3d48:	00003cad 	.word	0x00003cad

00003d4c <_gpio_get_level>:
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b086      	sub	sp, #24
    3d50:	af00      	add	r7, sp, #0
    3d52:	0002      	movs	r2, r0
    3d54:	1dfb      	adds	r3, r7, #7
    3d56:	701a      	strb	r2, [r3, #0]
	CRITICAL_SECTION_ENTER();
    3d58:	230c      	movs	r3, #12
    3d5a:	18fb      	adds	r3, r7, r3
    3d5c:	0018      	movs	r0, r3
    3d5e:	4b18      	ldr	r3, [pc, #96]	; (3dc0 <_gpio_get_level+0x74>)
    3d60:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);
    3d62:	1dfb      	adds	r3, r7, #7
    3d64:	781a      	ldrb	r2, [r3, #0]
    3d66:	23c0      	movs	r3, #192	; 0xc0
    3d68:	05db      	lsls	r3, r3, #23
    3d6a:	0011      	movs	r1, r2
    3d6c:	0018      	movs	r0, r3
    3d6e:	4b15      	ldr	r3, [pc, #84]	; (3dc4 <_gpio_get_level+0x78>)
    3d70:	4798      	blx	r3
    3d72:	0003      	movs	r3, r0
    3d74:	617b      	str	r3, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    3d76:	1dfb      	adds	r3, r7, #7
    3d78:	781a      	ldrb	r2, [r3, #0]
    3d7a:	2382      	movs	r3, #130	; 0x82
    3d7c:	05db      	lsls	r3, r3, #23
    3d7e:	0011      	movs	r1, r2
    3d80:	0018      	movs	r0, r3
    3d82:	4b11      	ldr	r3, [pc, #68]	; (3dc8 <_gpio_get_level+0x7c>)
    3d84:	4798      	blx	r3
    3d86:	0002      	movs	r2, r0
    3d88:	697b      	ldr	r3, [r7, #20]
    3d8a:	43db      	mvns	r3, r3
    3d8c:	4013      	ands	r3, r2
    3d8e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3d90:	1dfb      	adds	r3, r7, #7
    3d92:	781a      	ldrb	r2, [r3, #0]
    3d94:	23c0      	movs	r3, #192	; 0xc0
    3d96:	05db      	lsls	r3, r3, #23
    3d98:	0011      	movs	r1, r2
    3d9a:	0018      	movs	r0, r3
    3d9c:	4b0b      	ldr	r3, [pc, #44]	; (3dcc <_gpio_get_level+0x80>)
    3d9e:	4798      	blx	r3
    3da0:	0002      	movs	r2, r0
    3da2:	697b      	ldr	r3, [r7, #20]
    3da4:	4013      	ands	r3, r2
    3da6:	693a      	ldr	r2, [r7, #16]
    3da8:	4313      	orrs	r3, r2
    3daa:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    3dac:	230c      	movs	r3, #12
    3dae:	18fb      	adds	r3, r7, r3
    3db0:	0018      	movs	r0, r3
    3db2:	4b07      	ldr	r3, [pc, #28]	; (3dd0 <_gpio_get_level+0x84>)
    3db4:	4798      	blx	r3
	return tmp;
    3db6:	693b      	ldr	r3, [r7, #16]
}
    3db8:	0018      	movs	r0, r3
    3dba:	46bd      	mov	sp, r7
    3dbc:	b006      	add	sp, #24
    3dbe:	bd80      	pop	{r7, pc}
    3dc0:	00000e05 	.word	0x00000e05
    3dc4:	00003c3d 	.word	0x00003c3d
    3dc8:	00003cd9 	.word	0x00003cd9
    3dcc:	00003c89 	.word	0x00003c89
    3dd0:	00000e27 	.word	0x00000e27

00003dd4 <gpio_set_pin_level>:
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	b082      	sub	sp, #8
    3dd8:	af00      	add	r7, sp, #0
    3dda:	0002      	movs	r2, r0
    3ddc:	1dfb      	adds	r3, r7, #7
    3dde:	701a      	strb	r2, [r3, #0]
    3de0:	1dbb      	adds	r3, r7, #6
    3de2:	1c0a      	adds	r2, r1, #0
    3de4:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3de6:	1dfb      	adds	r3, r7, #7
    3de8:	781b      	ldrb	r3, [r3, #0]
    3dea:	095b      	lsrs	r3, r3, #5
    3dec:	b2d8      	uxtb	r0, r3
    3dee:	1dfb      	adds	r3, r7, #7
    3df0:	781b      	ldrb	r3, [r3, #0]
    3df2:	221f      	movs	r2, #31
    3df4:	4013      	ands	r3, r2
    3df6:	2201      	movs	r2, #1
    3df8:	409a      	lsls	r2, r3
    3dfa:	0011      	movs	r1, r2
    3dfc:	1dbb      	adds	r3, r7, #6
    3dfe:	781b      	ldrb	r3, [r3, #0]
    3e00:	001a      	movs	r2, r3
    3e02:	4b03      	ldr	r3, [pc, #12]	; (3e10 <gpio_set_pin_level+0x3c>)
    3e04:	4798      	blx	r3
}
    3e06:	46c0      	nop			; (mov r8, r8)
    3e08:	46bd      	mov	sp, r7
    3e0a:	b002      	add	sp, #8
    3e0c:	bd80      	pop	{r7, pc}
    3e0e:	46c0      	nop			; (mov r8, r8)
    3e10:	00003cfd 	.word	0x00003cfd

00003e14 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    3e14:	b580      	push	{r7, lr}
    3e16:	b082      	sub	sp, #8
    3e18:	af00      	add	r7, sp, #0
    3e1a:	0002      	movs	r2, r0
    3e1c:	1dfb      	adds	r3, r7, #7
    3e1e:	701a      	strb	r2, [r3, #0]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    3e20:	1dfb      	adds	r3, r7, #7
    3e22:	781b      	ldrb	r3, [r3, #0]
    3e24:	095b      	lsrs	r3, r3, #5
    3e26:	b2db      	uxtb	r3, r3
    3e28:	0018      	movs	r0, r3
    3e2a:	4b09      	ldr	r3, [pc, #36]	; (3e50 <gpio_get_pin_level+0x3c>)
    3e2c:	4798      	blx	r3
    3e2e:	0001      	movs	r1, r0
    3e30:	1dfb      	adds	r3, r7, #7
    3e32:	781b      	ldrb	r3, [r3, #0]
    3e34:	221f      	movs	r2, #31
    3e36:	4013      	ands	r3, r2
    3e38:	2201      	movs	r2, #1
    3e3a:	409a      	lsls	r2, r3
    3e3c:	0013      	movs	r3, r2
    3e3e:	400b      	ands	r3, r1
    3e40:	1e5a      	subs	r2, r3, #1
    3e42:	4193      	sbcs	r3, r2
    3e44:	b2db      	uxtb	r3, r3
}
    3e46:	0018      	movs	r0, r3
    3e48:	46bd      	mov	sp, r7
    3e4a:	b002      	add	sp, #8
    3e4c:	bd80      	pop	{r7, pc}
    3e4e:	46c0      	nop			; (mov r8, r8)
    3e50:	00003d4d 	.word	0x00003d4d

00003e54 <int_CLEAR>:
struct io_descriptor *io_spi_master;
struct io_descriptor *io_spi_slave;

volatile bool enabled = true;

static void int_CLEAR(void) {
    3e54:	b580      	push	{r7, lr}
    3e56:	af00      	add	r7, sp, #0

	// spi_s_async_flush_rx_buffer(&SPI_1);
	// spi_s_async_abort_tx(&SPI_1);

	memset(column_rx, 0, MY * BPC);
    3e58:	4b0a      	ldr	r3, [pc, #40]	; (3e84 <int_CLEAR+0x30>)
    3e5a:	2240      	movs	r2, #64	; 0x40
    3e5c:	2100      	movs	r1, #0
    3e5e:	0018      	movs	r0, r3
    3e60:	4b09      	ldr	r3, [pc, #36]	; (3e88 <int_CLEAR+0x34>)
    3e62:	4798      	blx	r3
	memset(column_tx, 0, MY * BPC);
    3e64:	4b09      	ldr	r3, [pc, #36]	; (3e8c <int_CLEAR+0x38>)
    3e66:	2240      	movs	r2, #64	; 0x40
    3e68:	2100      	movs	r1, #0
    3e6a:	0018      	movs	r0, r3
    3e6c:	4b06      	ldr	r3, [pc, #24]	; (3e88 <int_CLEAR+0x34>)
    3e6e:	4798      	blx	r3
	memset(frame, 0, MX * MY * BPC);
    3e70:	2380      	movs	r3, #128	; 0x80
    3e72:	011a      	lsls	r2, r3, #4
    3e74:	4b06      	ldr	r3, [pc, #24]	; (3e90 <int_CLEAR+0x3c>)
    3e76:	2100      	movs	r1, #0
    3e78:	0018      	movs	r0, r3
    3e7a:	4b03      	ldr	r3, [pc, #12]	; (3e88 <int_CLEAR+0x34>)
    3e7c:	4798      	blx	r3
}
    3e7e:	46c0      	nop			; (mov r8, r8)
    3e80:	46bd      	mov	sp, r7
    3e82:	bd80      	pop	{r7, pc}
    3e84:	200002a8 	.word	0x200002a8
    3e88:	000045d3 	.word	0x000045d3
    3e8c:	20000264 	.word	0x20000264
    3e90:	200002e8 	.word	0x200002e8

00003e94 <int_SHIFT>:

static void int_SHIFT(void) {
    3e94:	b580      	push	{r7, lr}
    3e96:	af00      	add	r7, sp, #0
	// NOP
}
    3e98:	46c0      	nop			; (mov r8, r8)
    3e9a:	46bd      	mov	sp, r7
    3e9c:	bd80      	pop	{r7, pc}
	...

00003ea0 <int_OE>:

static void int_OE(void) {
    3ea0:	b580      	push	{r7, lr}
    3ea2:	af00      	add	r7, sp, #0
	enabled = gpio_get_pin_level(OE);
    3ea4:	201b      	movs	r0, #27
    3ea6:	4b04      	ldr	r3, [pc, #16]	; (3eb8 <int_OE+0x18>)
    3ea8:	4798      	blx	r3
    3eaa:	0003      	movs	r3, r0
    3eac:	001a      	movs	r2, r3
    3eae:	4b03      	ldr	r3, [pc, #12]	; (3ebc <int_OE+0x1c>)
    3eb0:	701a      	strb	r2, [r3, #0]
}
    3eb2:	46c0      	nop			; (mov r8, r8)
    3eb4:	46bd      	mov	sp, r7
    3eb6:	bd80      	pop	{r7, pc}
    3eb8:	00003e15 	.word	0x00003e15
    3ebc:	20000002 	.word	0x20000002

00003ec0 <frame_sent>:

static void frame_sent(const struct spi_m_async_descriptor *const io_descr) {
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b082      	sub	sp, #8
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(SPI0_SS, true);
    3ec8:	2101      	movs	r1, #1
    3eca:	2009      	movs	r0, #9
    3ecc:	4b02      	ldr	r3, [pc, #8]	; (3ed8 <frame_sent+0x18>)
    3ece:	4798      	blx	r3
}
    3ed0:	46c0      	nop			; (mov r8, r8)
    3ed2:	46bd      	mov	sp, r7
    3ed4:	b002      	add	sp, #8
    3ed6:	bd80      	pop	{r7, pc}
    3ed8:	00003dd5 	.word	0x00003dd5

00003edc <frame_received>:

static void frame_received(const struct spi_s_async_descriptor *const desc) {
    3edc:	b580      	push	{r7, lr}
    3ede:	b082      	sub	sp, #8
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	6078      	str	r0, [r7, #4]
	//io_read(io_spi_slave, column_rx, MY * BPC);
	//ringbuffer_flush((struct ringbuffer *) &desc->rx_rb);
	
	memcpy(column_tx, frame, (MY * BPC)); // Copy column into transmit buffer
    3ee4:	4a16      	ldr	r2, [pc, #88]	; (3f40 <frame_received+0x64>)
    3ee6:	4b17      	ldr	r3, [pc, #92]	; (3f44 <frame_received+0x68>)
    3ee8:	0010      	movs	r0, r2
    3eea:	0019      	movs	r1, r3
    3eec:	2340      	movs	r3, #64	; 0x40
    3eee:	001a      	movs	r2, r3
    3ef0:	4b15      	ldr	r3, [pc, #84]	; (3f48 <frame_received+0x6c>)
    3ef2:	4798      	blx	r3
	memcpy(frame, frame + (MY * BPC), MS - (MY * BPC)); // Move frame by one column
    3ef4:	4915      	ldr	r1, [pc, #84]	; (3f4c <frame_received+0x70>)
    3ef6:	4b16      	ldr	r3, [pc, #88]	; (3f50 <frame_received+0x74>)
    3ef8:	881b      	ldrh	r3, [r3, #0]
    3efa:	3b40      	subs	r3, #64	; 0x40
    3efc:	001a      	movs	r2, r3
    3efe:	4b11      	ldr	r3, [pc, #68]	; (3f44 <frame_received+0x68>)
    3f00:	0018      	movs	r0, r3
    3f02:	4b11      	ldr	r3, [pc, #68]	; (3f48 <frame_received+0x6c>)
    3f04:	4798      	blx	r3
	memcpy(frame + MS - (MY * BPC), column_rx, (MY * BPC)); // Copy received buffer into frame
    3f06:	4b12      	ldr	r3, [pc, #72]	; (3f50 <frame_received+0x74>)
    3f08:	881b      	ldrh	r3, [r3, #0]
    3f0a:	3b40      	subs	r3, #64	; 0x40
    3f0c:	001a      	movs	r2, r3
    3f0e:	4b0d      	ldr	r3, [pc, #52]	; (3f44 <frame_received+0x68>)
    3f10:	18d2      	adds	r2, r2, r3
    3f12:	4b10      	ldr	r3, [pc, #64]	; (3f54 <frame_received+0x78>)
    3f14:	0010      	movs	r0, r2
    3f16:	0019      	movs	r1, r3
    3f18:	2340      	movs	r3, #64	; 0x40
    3f1a:	001a      	movs	r2, r3
    3f1c:	4b0a      	ldr	r3, [pc, #40]	; (3f48 <frame_received+0x6c>)
    3f1e:	4798      	blx	r3
	
	gpio_set_pin_level(SPI0_SS, false);
    3f20:	2100      	movs	r1, #0
    3f22:	2009      	movs	r0, #9
    3f24:	4b0c      	ldr	r3, [pc, #48]	; (3f58 <frame_received+0x7c>)
    3f26:	4798      	blx	r3
	//spi_m_async_transfer(&SPI_0, column_tx, column_tmp, (MY * BPC));
	io_write(io_spi_master, column_tx, MY * BPC);
    3f28:	4b0c      	ldr	r3, [pc, #48]	; (3f5c <frame_received+0x80>)
    3f2a:	681b      	ldr	r3, [r3, #0]
    3f2c:	4904      	ldr	r1, [pc, #16]	; (3f40 <frame_received+0x64>)
    3f2e:	2240      	movs	r2, #64	; 0x40
    3f30:	0018      	movs	r0, r3
    3f32:	4b0b      	ldr	r3, [pc, #44]	; (3f60 <frame_received+0x84>)
    3f34:	4798      	blx	r3

	#ifdef LED_STATUS
		gpio_toggle_pin_level(LED);
	#endif
}
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	46bd      	mov	sp, r7
    3f3a:	b002      	add	sp, #8
    3f3c:	bd80      	pop	{r7, pc}
    3f3e:	46c0      	nop			; (mov r8, r8)
    3f40:	20000264 	.word	0x20000264
    3f44:	200002e8 	.word	0x200002e8
    3f48:	000045c1 	.word	0x000045c1
    3f4c:	20000328 	.word	0x20000328
    3f50:	20000000 	.word	0x20000000
    3f54:	200002a8 	.word	0x200002a8
    3f58:	00003dd5 	.word	0x00003dd5
    3f5c:	20000260 	.word	0x20000260
    3f60:	0000115d 	.word	0x0000115d

00003f64 <refresher>:

void refresher() {
    3f64:	b590      	push	{r4, r7, lr}
    3f66:	b083      	sub	sp, #12
    3f68:	af00      	add	r7, sp, #0
	
	uint16_t from = 0;
    3f6a:	1cbb      	adds	r3, r7, #2
    3f6c:	2200      	movs	r2, #0
    3f6e:	801a      	strh	r2, [r3, #0]
	uint16_t to = 0;
    3f70:	003b      	movs	r3, r7
    3f72:	2200      	movs	r2, #0
    3f74:	801a      	strh	r2, [r3, #0]
	uint16_t idx = 0;
    3f76:	1dbb      	adds	r3, r7, #6
    3f78:	2200      	movs	r2, #0
    3f7a:	801a      	strh	r2, [r3, #0]
	
	while(1) {
		for (uint8_t pwm = 1; pwm <= (pow(2, BPC) - 1); pwm++) {
    3f7c:	1d7b      	adds	r3, r7, #5
    3f7e:	2201      	movs	r2, #1
    3f80:	701a      	strb	r2, [r3, #0]
    3f82:	e065      	b.n	4050 <refresher+0xec>

			for (uint8_t row = 0; row < MY; row++) {
    3f84:	1d3b      	adds	r3, r7, #4
    3f86:	2200      	movs	r2, #0
    3f88:	701a      	strb	r2, [r3, #0]
    3f8a:	e058      	b.n	403e <refresher+0xda>

				from = row + (seq_pwm[pwm] * MY);
    3f8c:	1d3b      	adds	r3, r7, #4
    3f8e:	781b      	ldrb	r3, [r3, #0]
    3f90:	b299      	uxth	r1, r3
    3f92:	1d7b      	adds	r3, r7, #5
    3f94:	781b      	ldrb	r3, [r3, #0]
    3f96:	4a34      	ldr	r2, [pc, #208]	; (4068 <refresher+0x104>)
    3f98:	5cd3      	ldrb	r3, [r2, r3]
    3f9a:	b29b      	uxth	r3, r3
    3f9c:	00db      	lsls	r3, r3, #3
    3f9e:	b29a      	uxth	r2, r3
    3fa0:	1cbb      	adds	r3, r7, #2
    3fa2:	188a      	adds	r2, r1, r2
    3fa4:	801a      	strh	r2, [r3, #0]
				to = from + (MX * MY * BPC);
    3fa6:	003b      	movs	r3, r7
    3fa8:	1cba      	adds	r2, r7, #2
    3faa:	8812      	ldrh	r2, [r2, #0]
    3fac:	2180      	movs	r1, #128	; 0x80
    3fae:	0109      	lsls	r1, r1, #4
    3fb0:	468c      	mov	ip, r1
    3fb2:	4462      	add	r2, ip
    3fb4:	801a      	strh	r2, [r3, #0]

				for (idx = from; idx < to; idx+=(MY * BPC)) {
    3fb6:	1dbb      	adds	r3, r7, #6
    3fb8:	1cba      	adds	r2, r7, #2
    3fba:	8812      	ldrh	r2, [r2, #0]
    3fbc:	801a      	strh	r2, [r3, #0]
    3fbe:	e017      	b.n	3ff0 <refresher+0x8c>
					PORT_IOBUS->Group[GPIO_PORTA].OUTCLR.reg = 0b111111; // Clear RGBRGB
    3fc0:	23c0      	movs	r3, #192	; 0xc0
    3fc2:	05db      	lsls	r3, r3, #23
    3fc4:	223f      	movs	r2, #63	; 0x3f
    3fc6:	615a      	str	r2, [r3, #20]
					PORT_IOBUS->Group[GPIO_PORTA].OUTSET.reg = frame[idx]; // Set RGBRGB
    3fc8:	23c0      	movs	r3, #192	; 0xc0
    3fca:	05db      	lsls	r3, r3, #23
    3fcc:	1dba      	adds	r2, r7, #6
    3fce:	8812      	ldrh	r2, [r2, #0]
    3fd0:	4926      	ldr	r1, [pc, #152]	; (406c <refresher+0x108>)
    3fd2:	5c8a      	ldrb	r2, [r1, r2]
    3fd4:	619a      	str	r2, [r3, #24]
					
					PORT_IOBUS->Group[GPIO_PORTA].OUTSET.reg = 0b1000000; // P_CLK true
    3fd6:	23c0      	movs	r3, #192	; 0xc0
    3fd8:	05db      	lsls	r3, r3, #23
    3fda:	2240      	movs	r2, #64	; 0x40
    3fdc:	619a      	str	r2, [r3, #24]
					PORT_IOBUS->Group[GPIO_PORTA].OUTCLR.reg = 0b1000000; // P_CLK false
    3fde:	23c0      	movs	r3, #192	; 0xc0
    3fe0:	05db      	lsls	r3, r3, #23
    3fe2:	2240      	movs	r2, #64	; 0x40
    3fe4:	615a      	str	r2, [r3, #20]
				for (idx = from; idx < to; idx+=(MY * BPC)) {
    3fe6:	1dbb      	adds	r3, r7, #6
    3fe8:	1dba      	adds	r2, r7, #6
    3fea:	8812      	ldrh	r2, [r2, #0]
    3fec:	3240      	adds	r2, #64	; 0x40
    3fee:	801a      	strh	r2, [r3, #0]
    3ff0:	1dba      	adds	r2, r7, #6
    3ff2:	003b      	movs	r3, r7
    3ff4:	8812      	ldrh	r2, [r2, #0]
    3ff6:	881b      	ldrh	r3, [r3, #0]
    3ff8:	429a      	cmp	r2, r3
    3ffa:	d3e1      	bcc.n	3fc0 <refresher+0x5c>
				}
				
				if (enabled) {
    3ffc:	4b1c      	ldr	r3, [pc, #112]	; (4070 <refresher+0x10c>)
    3ffe:	781b      	ldrb	r3, [r3, #0]
    4000:	b2db      	uxtb	r3, r3
    4002:	2b00      	cmp	r3, #0
    4004:	d016      	beq.n	4034 <refresher+0xd0>
					PORT_IOBUS->Group[GPIO_PORTB].OUTSET.reg = 0b110000000000; // P_OE + P_STB true
    4006:	23c0      	movs	r3, #192	; 0xc0
    4008:	05db      	lsls	r3, r3, #23
    400a:	2198      	movs	r1, #152	; 0x98
    400c:	22c0      	movs	r2, #192	; 0xc0
    400e:	0112      	lsls	r2, r2, #4
    4010:	505a      	str	r2, [r3, r1]
					PORT_IOBUS->Group[GPIO_PORTA].OUTCLR.reg = 0b1110000000000000000; // Clear ABC
    4012:	23c0      	movs	r3, #192	; 0xc0
    4014:	05db      	lsls	r3, r3, #23
    4016:	22e0      	movs	r2, #224	; 0xe0
    4018:	02d2      	lsls	r2, r2, #11
    401a:	615a      	str	r2, [r3, #20]
					PORT_IOBUS->Group[GPIO_PORTA].OUTSET.reg = (row << 16);	// Set ABC
    401c:	23c0      	movs	r3, #192	; 0xc0
    401e:	05db      	lsls	r3, r3, #23
    4020:	1d3a      	adds	r2, r7, #4
    4022:	7812      	ldrb	r2, [r2, #0]
    4024:	0412      	lsls	r2, r2, #16
    4026:	619a      	str	r2, [r3, #24]
					PORT_IOBUS->Group[GPIO_PORTB].OUTCLR.reg = 0b110000000000; // P_OE + P_STB false
    4028:	23c0      	movs	r3, #192	; 0xc0
    402a:	05db      	lsls	r3, r3, #23
    402c:	2194      	movs	r1, #148	; 0x94
    402e:	22c0      	movs	r2, #192	; 0xc0
    4030:	0112      	lsls	r2, r2, #4
    4032:	505a      	str	r2, [r3, r1]
			for (uint8_t row = 0; row < MY; row++) {
    4034:	1d3b      	adds	r3, r7, #4
    4036:	781a      	ldrb	r2, [r3, #0]
    4038:	1d3b      	adds	r3, r7, #4
    403a:	3201      	adds	r2, #1
    403c:	701a      	strb	r2, [r3, #0]
    403e:	1d3b      	adds	r3, r7, #4
    4040:	781b      	ldrb	r3, [r3, #0]
    4042:	2b07      	cmp	r3, #7
    4044:	d9a2      	bls.n	3f8c <refresher+0x28>
		for (uint8_t pwm = 1; pwm <= (pow(2, BPC) - 1); pwm++) {
    4046:	1d7b      	adds	r3, r7, #5
    4048:	781a      	ldrb	r2, [r3, #0]
    404a:	1d7b      	adds	r3, r7, #5
    404c:	3201      	adds	r2, #1
    404e:	701a      	strb	r2, [r3, #0]
    4050:	1d7b      	adds	r3, r7, #5
    4052:	781a      	ldrb	r2, [r3, #0]
    4054:	4b07      	ldr	r3, [pc, #28]	; (4074 <refresher+0x110>)
    4056:	0010      	movs	r0, r2
    4058:	4798      	blx	r3
    405a:	4c07      	ldr	r4, [pc, #28]	; (4078 <refresher+0x114>)
    405c:	2200      	movs	r2, #0
    405e:	4b07      	ldr	r3, [pc, #28]	; (407c <refresher+0x118>)
    4060:	47a0      	blx	r4
    4062:	1e03      	subs	r3, r0, #0
    4064:	d18e      	bne.n	3f84 <refresher+0x20>
    4066:	e789      	b.n	3f7c <refresher+0x18>
    4068:	200000a4 	.word	0x200000a4
    406c:	200002e8 	.word	0x200002e8
    4070:	20000002 	.word	0x20000002
    4074:	0000449d 	.word	0x0000449d
    4078:	00004261 	.word	0x00004261
    407c:	406fe000 	.word	0x406fe000

00004080 <main>:
		
	}

}

int main(void) {
    4080:	b590      	push	{r4, r7, lr}
    4082:	b083      	sub	sp, #12
    4084:	af00      	add	r7, sp, #0
	
	atmel_start_init();
    4086:	4b50      	ldr	r3, [pc, #320]	; (41c8 <main+0x148>)
    4088:	4798      	blx	r3
		
	for (uint8_t i = 0; i < 255; i++) {
    408a:	1dfb      	adds	r3, r7, #7
    408c:	2200      	movs	r2, #0
    408e:	701a      	strb	r2, [r3, #0]
    4090:	e059      	b.n	4146 <main+0xc6>
		seq_pwm[i] = 0;
    4092:	1dfb      	adds	r3, r7, #7
    4094:	781b      	ldrb	r3, [r3, #0]
    4096:	4a4d      	ldr	r2, [pc, #308]	; (41cc <main+0x14c>)
    4098:	2100      	movs	r1, #0
    409a:	54d1      	strb	r1, [r2, r3]
		if (i & 1) seq_pwm[i] = 0;
    409c:	1dfb      	adds	r3, r7, #7
    409e:	781b      	ldrb	r3, [r3, #0]
    40a0:	2201      	movs	r2, #1
    40a2:	4013      	ands	r3, r2
    40a4:	d004      	beq.n	40b0 <main+0x30>
    40a6:	1dfb      	adds	r3, r7, #7
    40a8:	781b      	ldrb	r3, [r3, #0]
    40aa:	4a48      	ldr	r2, [pc, #288]	; (41cc <main+0x14c>)
    40ac:	2100      	movs	r1, #0
    40ae:	54d1      	strb	r1, [r2, r3]
		if (i & 2) seq_pwm[i] = 1;
    40b0:	1dfb      	adds	r3, r7, #7
    40b2:	781b      	ldrb	r3, [r3, #0]
    40b4:	2202      	movs	r2, #2
    40b6:	4013      	ands	r3, r2
    40b8:	d004      	beq.n	40c4 <main+0x44>
    40ba:	1dfb      	adds	r3, r7, #7
    40bc:	781b      	ldrb	r3, [r3, #0]
    40be:	4a43      	ldr	r2, [pc, #268]	; (41cc <main+0x14c>)
    40c0:	2101      	movs	r1, #1
    40c2:	54d1      	strb	r1, [r2, r3]
		if (i & 4) seq_pwm[i] = 2;
    40c4:	1dfb      	adds	r3, r7, #7
    40c6:	781b      	ldrb	r3, [r3, #0]
    40c8:	2204      	movs	r2, #4
    40ca:	4013      	ands	r3, r2
    40cc:	d004      	beq.n	40d8 <main+0x58>
    40ce:	1dfb      	adds	r3, r7, #7
    40d0:	781b      	ldrb	r3, [r3, #0]
    40d2:	4a3e      	ldr	r2, [pc, #248]	; (41cc <main+0x14c>)
    40d4:	2102      	movs	r1, #2
    40d6:	54d1      	strb	r1, [r2, r3]
		if (i & 8) seq_pwm[i] = 3;
    40d8:	1dfb      	adds	r3, r7, #7
    40da:	781b      	ldrb	r3, [r3, #0]
    40dc:	2208      	movs	r2, #8
    40de:	4013      	ands	r3, r2
    40e0:	d004      	beq.n	40ec <main+0x6c>
    40e2:	1dfb      	adds	r3, r7, #7
    40e4:	781b      	ldrb	r3, [r3, #0]
    40e6:	4a39      	ldr	r2, [pc, #228]	; (41cc <main+0x14c>)
    40e8:	2103      	movs	r1, #3
    40ea:	54d1      	strb	r1, [r2, r3]
		if (i & 16) seq_pwm[i] = 4;
    40ec:	1dfb      	adds	r3, r7, #7
    40ee:	781b      	ldrb	r3, [r3, #0]
    40f0:	2210      	movs	r2, #16
    40f2:	4013      	ands	r3, r2
    40f4:	d004      	beq.n	4100 <main+0x80>
    40f6:	1dfb      	adds	r3, r7, #7
    40f8:	781b      	ldrb	r3, [r3, #0]
    40fa:	4a34      	ldr	r2, [pc, #208]	; (41cc <main+0x14c>)
    40fc:	2104      	movs	r1, #4
    40fe:	54d1      	strb	r1, [r2, r3]
		if (i & 32) seq_pwm[i] = 5;
    4100:	1dfb      	adds	r3, r7, #7
    4102:	781b      	ldrb	r3, [r3, #0]
    4104:	2220      	movs	r2, #32
    4106:	4013      	ands	r3, r2
    4108:	d004      	beq.n	4114 <main+0x94>
    410a:	1dfb      	adds	r3, r7, #7
    410c:	781b      	ldrb	r3, [r3, #0]
    410e:	4a2f      	ldr	r2, [pc, #188]	; (41cc <main+0x14c>)
    4110:	2105      	movs	r1, #5
    4112:	54d1      	strb	r1, [r2, r3]
		if (i & 64) seq_pwm[i] = 6;
    4114:	1dfb      	adds	r3, r7, #7
    4116:	781b      	ldrb	r3, [r3, #0]
    4118:	2240      	movs	r2, #64	; 0x40
    411a:	4013      	ands	r3, r2
    411c:	d004      	beq.n	4128 <main+0xa8>
    411e:	1dfb      	adds	r3, r7, #7
    4120:	781b      	ldrb	r3, [r3, #0]
    4122:	4a2a      	ldr	r2, [pc, #168]	; (41cc <main+0x14c>)
    4124:	2106      	movs	r1, #6
    4126:	54d1      	strb	r1, [r2, r3]
		if (i & 128) seq_pwm[i] = 7;
    4128:	1dfb      	adds	r3, r7, #7
    412a:	781b      	ldrb	r3, [r3, #0]
    412c:	b25b      	sxtb	r3, r3
    412e:	2b00      	cmp	r3, #0
    4130:	da04      	bge.n	413c <main+0xbc>
    4132:	1dfb      	adds	r3, r7, #7
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	4a25      	ldr	r2, [pc, #148]	; (41cc <main+0x14c>)
    4138:	2107      	movs	r1, #7
    413a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 255; i++) {
    413c:	1dfb      	adds	r3, r7, #7
    413e:	781a      	ldrb	r2, [r3, #0]
    4140:	1dfb      	adds	r3, r7, #7
    4142:	3201      	adds	r2, #1
    4144:	701a      	strb	r2, [r3, #0]
    4146:	1dfb      	adds	r3, r7, #7
    4148:	781b      	ldrb	r3, [r3, #0]
    414a:	2bff      	cmp	r3, #255	; 0xff
    414c:	d1a1      	bne.n	4092 <main+0x12>
	}

	ext_irq_register(PIN_PB22, int_CLEAR);
    414e:	4b20      	ldr	r3, [pc, #128]	; (41d0 <main+0x150>)
    4150:	0019      	movs	r1, r3
    4152:	2036      	movs	r0, #54	; 0x36
    4154:	4b1f      	ldr	r3, [pc, #124]	; (41d4 <main+0x154>)
    4156:	4798      	blx	r3
	ext_irq_register(PIN_PB23, int_SHIFT);
    4158:	4b1f      	ldr	r3, [pc, #124]	; (41d8 <main+0x158>)
    415a:	0019      	movs	r1, r3
    415c:	2037      	movs	r0, #55	; 0x37
    415e:	4b1d      	ldr	r3, [pc, #116]	; (41d4 <main+0x154>)
    4160:	4798      	blx	r3
	ext_irq_register(PIN_PA27, int_OE);
    4162:	4b1e      	ldr	r3, [pc, #120]	; (41dc <main+0x15c>)
    4164:	0019      	movs	r1, r3
    4166:	201b      	movs	r0, #27
    4168:	4b1a      	ldr	r3, [pc, #104]	; (41d4 <main+0x154>)
    416a:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&SPI_0, &io_spi_master);
    416c:	4a1c      	ldr	r2, [pc, #112]	; (41e0 <main+0x160>)
    416e:	4b1d      	ldr	r3, [pc, #116]	; (41e4 <main+0x164>)
    4170:	0011      	movs	r1, r2
    4172:	0018      	movs	r0, r3
    4174:	4b1c      	ldr	r3, [pc, #112]	; (41e8 <main+0x168>)
    4176:	4798      	blx	r3
	spi_m_async_register_callback(&SPI_0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)frame_sent);
    4178:	4a1c      	ldr	r2, [pc, #112]	; (41ec <main+0x16c>)
    417a:	4b1a      	ldr	r3, [pc, #104]	; (41e4 <main+0x164>)
    417c:	2100      	movs	r1, #0
    417e:	0018      	movs	r0, r3
    4180:	4b1b      	ldr	r3, [pc, #108]	; (41f0 <main+0x170>)
    4182:	4798      	blx	r3
	spi_m_async_enable(&SPI_0);
    4184:	4b17      	ldr	r3, [pc, #92]	; (41e4 <main+0x164>)
    4186:	0018      	movs	r0, r3
    4188:	4b1a      	ldr	r3, [pc, #104]	; (41f4 <main+0x174>)
    418a:	4798      	blx	r3

	spi_s_async_init(&SPI_1, SERCOM2, (uint8_t *)column_rx, MY * BPC);
    418c:	4a1a      	ldr	r2, [pc, #104]	; (41f8 <main+0x178>)
    418e:	491b      	ldr	r1, [pc, #108]	; (41fc <main+0x17c>)
    4190:	481b      	ldr	r0, [pc, #108]	; (4200 <main+0x180>)
    4192:	2340      	movs	r3, #64	; 0x40
    4194:	4c1b      	ldr	r4, [pc, #108]	; (4204 <main+0x184>)
    4196:	47a0      	blx	r4
	spi_s_async_get_io_descriptor(&SPI_1, &io_spi_slave);
    4198:	4a1b      	ldr	r2, [pc, #108]	; (4208 <main+0x188>)
    419a:	4b19      	ldr	r3, [pc, #100]	; (4200 <main+0x180>)
    419c:	0011      	movs	r1, r2
    419e:	0018      	movs	r0, r3
    41a0:	4b1a      	ldr	r3, [pc, #104]	; (420c <main+0x18c>)
    41a2:	4798      	blx	r3
	spi_s_async_register_callback(&SPI_1, SPI_S_CB_COMPLETE, (FUNC_PTR)frame_received);
    41a4:	4a1a      	ldr	r2, [pc, #104]	; (4210 <main+0x190>)
    41a6:	4b16      	ldr	r3, [pc, #88]	; (4200 <main+0x180>)
    41a8:	2102      	movs	r1, #2
    41aa:	0018      	movs	r0, r3
    41ac:	4b19      	ldr	r3, [pc, #100]	; (4214 <main+0x194>)
    41ae:	4798      	blx	r3
	spi_s_async_enable(&SPI_1);
    41b0:	4b13      	ldr	r3, [pc, #76]	; (4200 <main+0x180>)
    41b2:	0018      	movs	r0, r3
    41b4:	4b18      	ldr	r3, [pc, #96]	; (4218 <main+0x198>)
    41b6:	4798      	blx	r3

	refresher();
    41b8:	4b18      	ldr	r3, [pc, #96]	; (421c <main+0x19c>)
    41ba:	4798      	blx	r3
    41bc:	2300      	movs	r3, #0

}
    41be:	0018      	movs	r0, r3
    41c0:	46bd      	mov	sp, r7
    41c2:	b003      	add	sp, #12
    41c4:	bd90      	pop	{r4, r7, pc}
    41c6:	46c0      	nop			; (mov r8, r8)
    41c8:	0000011d 	.word	0x0000011d
    41cc:	200000a4 	.word	0x200000a4
    41d0:	00003e55 	.word	0x00003e55
    41d4:	00000ea5 	.word	0x00000ea5
    41d8:	00003e95 	.word	0x00003e95
    41dc:	00003ea1 	.word	0x00003ea1
    41e0:	20000260 	.word	0x20000260
    41e4:	200001fc 	.word	0x200001fc
    41e8:	00001665 	.word	0x00001665
    41ec:	00003ec1 	.word	0x00003ec1
    41f0:	000015e5 	.word	0x000015e5
    41f4:	000014b9 	.word	0x000014b9
    41f8:	200002a8 	.word	0x200002a8
    41fc:	42000c00 	.word	0x42000c00
    4200:	200001a4 	.word	0x200001a4
    4204:	00001a05 	.word	0x00001a05
    4208:	200002a4 	.word	0x200002a4
    420c:	00001c55 	.word	0x00001c55
    4210:	00003edd 	.word	0x00003edd
    4214:	00001bb9 	.word	0x00001bb9
    4218:	00001b39 	.word	0x00001b39
    421c:	00003f65 	.word	0x00003f65

00004220 <__aeabi_cdrcmple>:
    4220:	4684      	mov	ip, r0
    4222:	1c10      	adds	r0, r2, #0
    4224:	4662      	mov	r2, ip
    4226:	468c      	mov	ip, r1
    4228:	1c19      	adds	r1, r3, #0
    422a:	4663      	mov	r3, ip
    422c:	e000      	b.n	4230 <__aeabi_cdcmpeq>
    422e:	46c0      	nop			; (mov r8, r8)

00004230 <__aeabi_cdcmpeq>:
    4230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4232:	f000 f8d1 	bl	43d8 <__ledf2>
    4236:	2800      	cmp	r0, #0
    4238:	d401      	bmi.n	423e <__aeabi_cdcmpeq+0xe>
    423a:	2100      	movs	r1, #0
    423c:	42c8      	cmn	r0, r1
    423e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004240 <__aeabi_dcmpeq>:
    4240:	b510      	push	{r4, lr}
    4242:	f000 f82b 	bl	429c <__eqdf2>
    4246:	4240      	negs	r0, r0
    4248:	3001      	adds	r0, #1
    424a:	bd10      	pop	{r4, pc}

0000424c <__aeabi_dcmplt>:
    424c:	b510      	push	{r4, lr}
    424e:	f000 f8c3 	bl	43d8 <__ledf2>
    4252:	2800      	cmp	r0, #0
    4254:	db01      	blt.n	425a <__aeabi_dcmplt+0xe>
    4256:	2000      	movs	r0, #0
    4258:	bd10      	pop	{r4, pc}
    425a:	2001      	movs	r0, #1
    425c:	bd10      	pop	{r4, pc}
    425e:	46c0      	nop			; (mov r8, r8)

00004260 <__aeabi_dcmple>:
    4260:	b510      	push	{r4, lr}
    4262:	f000 f8b9 	bl	43d8 <__ledf2>
    4266:	2800      	cmp	r0, #0
    4268:	dd01      	ble.n	426e <__aeabi_dcmple+0xe>
    426a:	2000      	movs	r0, #0
    426c:	bd10      	pop	{r4, pc}
    426e:	2001      	movs	r0, #1
    4270:	bd10      	pop	{r4, pc}
    4272:	46c0      	nop			; (mov r8, r8)

00004274 <__aeabi_dcmpgt>:
    4274:	b510      	push	{r4, lr}
    4276:	f000 f84b 	bl	4310 <__gedf2>
    427a:	2800      	cmp	r0, #0
    427c:	dc01      	bgt.n	4282 <__aeabi_dcmpgt+0xe>
    427e:	2000      	movs	r0, #0
    4280:	bd10      	pop	{r4, pc}
    4282:	2001      	movs	r0, #1
    4284:	bd10      	pop	{r4, pc}
    4286:	46c0      	nop			; (mov r8, r8)

00004288 <__aeabi_dcmpge>:
    4288:	b510      	push	{r4, lr}
    428a:	f000 f841 	bl	4310 <__gedf2>
    428e:	2800      	cmp	r0, #0
    4290:	da01      	bge.n	4296 <__aeabi_dcmpge+0xe>
    4292:	2000      	movs	r0, #0
    4294:	bd10      	pop	{r4, pc}
    4296:	2001      	movs	r0, #1
    4298:	bd10      	pop	{r4, pc}
    429a:	46c0      	nop			; (mov r8, r8)

0000429c <__eqdf2>:
    429c:	b5f0      	push	{r4, r5, r6, r7, lr}
    429e:	464f      	mov	r7, r9
    42a0:	4646      	mov	r6, r8
    42a2:	46d6      	mov	lr, sl
    42a4:	005c      	lsls	r4, r3, #1
    42a6:	b5c0      	push	{r6, r7, lr}
    42a8:	031f      	lsls	r7, r3, #12
    42aa:	0fdb      	lsrs	r3, r3, #31
    42ac:	469a      	mov	sl, r3
    42ae:	4b17      	ldr	r3, [pc, #92]	; (430c <__eqdf2+0x70>)
    42b0:	030e      	lsls	r6, r1, #12
    42b2:	004d      	lsls	r5, r1, #1
    42b4:	4684      	mov	ip, r0
    42b6:	4680      	mov	r8, r0
    42b8:	0b36      	lsrs	r6, r6, #12
    42ba:	0d6d      	lsrs	r5, r5, #21
    42bc:	0fc9      	lsrs	r1, r1, #31
    42be:	4691      	mov	r9, r2
    42c0:	0b3f      	lsrs	r7, r7, #12
    42c2:	0d64      	lsrs	r4, r4, #21
    42c4:	2001      	movs	r0, #1
    42c6:	429d      	cmp	r5, r3
    42c8:	d008      	beq.n	42dc <__eqdf2+0x40>
    42ca:	429c      	cmp	r4, r3
    42cc:	d001      	beq.n	42d2 <__eqdf2+0x36>
    42ce:	42a5      	cmp	r5, r4
    42d0:	d00b      	beq.n	42ea <__eqdf2+0x4e>
    42d2:	bc1c      	pop	{r2, r3, r4}
    42d4:	4690      	mov	r8, r2
    42d6:	4699      	mov	r9, r3
    42d8:	46a2      	mov	sl, r4
    42da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42dc:	4663      	mov	r3, ip
    42de:	4333      	orrs	r3, r6
    42e0:	d1f7      	bne.n	42d2 <__eqdf2+0x36>
    42e2:	42ac      	cmp	r4, r5
    42e4:	d1f5      	bne.n	42d2 <__eqdf2+0x36>
    42e6:	433a      	orrs	r2, r7
    42e8:	d1f3      	bne.n	42d2 <__eqdf2+0x36>
    42ea:	2001      	movs	r0, #1
    42ec:	42be      	cmp	r6, r7
    42ee:	d1f0      	bne.n	42d2 <__eqdf2+0x36>
    42f0:	45c8      	cmp	r8, r9
    42f2:	d1ee      	bne.n	42d2 <__eqdf2+0x36>
    42f4:	4551      	cmp	r1, sl
    42f6:	d007      	beq.n	4308 <__eqdf2+0x6c>
    42f8:	2d00      	cmp	r5, #0
    42fa:	d1ea      	bne.n	42d2 <__eqdf2+0x36>
    42fc:	4663      	mov	r3, ip
    42fe:	431e      	orrs	r6, r3
    4300:	0030      	movs	r0, r6
    4302:	1e46      	subs	r6, r0, #1
    4304:	41b0      	sbcs	r0, r6
    4306:	e7e4      	b.n	42d2 <__eqdf2+0x36>
    4308:	2000      	movs	r0, #0
    430a:	e7e2      	b.n	42d2 <__eqdf2+0x36>
    430c:	000007ff 	.word	0x000007ff

00004310 <__gedf2>:
    4310:	b5f0      	push	{r4, r5, r6, r7, lr}
    4312:	4645      	mov	r5, r8
    4314:	46de      	mov	lr, fp
    4316:	4657      	mov	r7, sl
    4318:	464e      	mov	r6, r9
    431a:	b5e0      	push	{r5, r6, r7, lr}
    431c:	031f      	lsls	r7, r3, #12
    431e:	0b3d      	lsrs	r5, r7, #12
    4320:	4f2c      	ldr	r7, [pc, #176]	; (43d4 <__gedf2+0xc4>)
    4322:	030e      	lsls	r6, r1, #12
    4324:	004c      	lsls	r4, r1, #1
    4326:	46ab      	mov	fp, r5
    4328:	005d      	lsls	r5, r3, #1
    432a:	4684      	mov	ip, r0
    432c:	0b36      	lsrs	r6, r6, #12
    432e:	0d64      	lsrs	r4, r4, #21
    4330:	0fc9      	lsrs	r1, r1, #31
    4332:	4690      	mov	r8, r2
    4334:	0d6d      	lsrs	r5, r5, #21
    4336:	0fdb      	lsrs	r3, r3, #31
    4338:	42bc      	cmp	r4, r7
    433a:	d02a      	beq.n	4392 <__gedf2+0x82>
    433c:	4f25      	ldr	r7, [pc, #148]	; (43d4 <__gedf2+0xc4>)
    433e:	42bd      	cmp	r5, r7
    4340:	d02d      	beq.n	439e <__gedf2+0x8e>
    4342:	2c00      	cmp	r4, #0
    4344:	d10f      	bne.n	4366 <__gedf2+0x56>
    4346:	4330      	orrs	r0, r6
    4348:	0007      	movs	r7, r0
    434a:	4681      	mov	r9, r0
    434c:	4278      	negs	r0, r7
    434e:	4178      	adcs	r0, r7
    4350:	b2c0      	uxtb	r0, r0
    4352:	2d00      	cmp	r5, #0
    4354:	d117      	bne.n	4386 <__gedf2+0x76>
    4356:	465f      	mov	r7, fp
    4358:	433a      	orrs	r2, r7
    435a:	d114      	bne.n	4386 <__gedf2+0x76>
    435c:	464b      	mov	r3, r9
    435e:	2000      	movs	r0, #0
    4360:	2b00      	cmp	r3, #0
    4362:	d00a      	beq.n	437a <__gedf2+0x6a>
    4364:	e006      	b.n	4374 <__gedf2+0x64>
    4366:	2d00      	cmp	r5, #0
    4368:	d102      	bne.n	4370 <__gedf2+0x60>
    436a:	4658      	mov	r0, fp
    436c:	4302      	orrs	r2, r0
    436e:	d001      	beq.n	4374 <__gedf2+0x64>
    4370:	4299      	cmp	r1, r3
    4372:	d018      	beq.n	43a6 <__gedf2+0x96>
    4374:	4248      	negs	r0, r1
    4376:	2101      	movs	r1, #1
    4378:	4308      	orrs	r0, r1
    437a:	bc3c      	pop	{r2, r3, r4, r5}
    437c:	4690      	mov	r8, r2
    437e:	4699      	mov	r9, r3
    4380:	46a2      	mov	sl, r4
    4382:	46ab      	mov	fp, r5
    4384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4386:	2800      	cmp	r0, #0
    4388:	d0f2      	beq.n	4370 <__gedf2+0x60>
    438a:	2001      	movs	r0, #1
    438c:	3b01      	subs	r3, #1
    438e:	4318      	orrs	r0, r3
    4390:	e7f3      	b.n	437a <__gedf2+0x6a>
    4392:	0037      	movs	r7, r6
    4394:	4307      	orrs	r7, r0
    4396:	d0d1      	beq.n	433c <__gedf2+0x2c>
    4398:	2002      	movs	r0, #2
    439a:	4240      	negs	r0, r0
    439c:	e7ed      	b.n	437a <__gedf2+0x6a>
    439e:	465f      	mov	r7, fp
    43a0:	4317      	orrs	r7, r2
    43a2:	d0ce      	beq.n	4342 <__gedf2+0x32>
    43a4:	e7f8      	b.n	4398 <__gedf2+0x88>
    43a6:	42ac      	cmp	r4, r5
    43a8:	dce4      	bgt.n	4374 <__gedf2+0x64>
    43aa:	da03      	bge.n	43b4 <__gedf2+0xa4>
    43ac:	1e48      	subs	r0, r1, #1
    43ae:	2101      	movs	r1, #1
    43b0:	4308      	orrs	r0, r1
    43b2:	e7e2      	b.n	437a <__gedf2+0x6a>
    43b4:	455e      	cmp	r6, fp
    43b6:	d8dd      	bhi.n	4374 <__gedf2+0x64>
    43b8:	d006      	beq.n	43c8 <__gedf2+0xb8>
    43ba:	2000      	movs	r0, #0
    43bc:	455e      	cmp	r6, fp
    43be:	d2dc      	bcs.n	437a <__gedf2+0x6a>
    43c0:	2301      	movs	r3, #1
    43c2:	1e48      	subs	r0, r1, #1
    43c4:	4318      	orrs	r0, r3
    43c6:	e7d8      	b.n	437a <__gedf2+0x6a>
    43c8:	45c4      	cmp	ip, r8
    43ca:	d8d3      	bhi.n	4374 <__gedf2+0x64>
    43cc:	2000      	movs	r0, #0
    43ce:	45c4      	cmp	ip, r8
    43d0:	d3f6      	bcc.n	43c0 <__gedf2+0xb0>
    43d2:	e7d2      	b.n	437a <__gedf2+0x6a>
    43d4:	000007ff 	.word	0x000007ff

000043d8 <__ledf2>:
    43d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    43da:	464e      	mov	r6, r9
    43dc:	4645      	mov	r5, r8
    43de:	46de      	mov	lr, fp
    43e0:	4657      	mov	r7, sl
    43e2:	005c      	lsls	r4, r3, #1
    43e4:	b5e0      	push	{r5, r6, r7, lr}
    43e6:	031f      	lsls	r7, r3, #12
    43e8:	0fdb      	lsrs	r3, r3, #31
    43ea:	4699      	mov	r9, r3
    43ec:	4b2a      	ldr	r3, [pc, #168]	; (4498 <__ledf2+0xc0>)
    43ee:	030e      	lsls	r6, r1, #12
    43f0:	004d      	lsls	r5, r1, #1
    43f2:	0fc9      	lsrs	r1, r1, #31
    43f4:	4684      	mov	ip, r0
    43f6:	0b36      	lsrs	r6, r6, #12
    43f8:	0d6d      	lsrs	r5, r5, #21
    43fa:	468b      	mov	fp, r1
    43fc:	4690      	mov	r8, r2
    43fe:	0b3f      	lsrs	r7, r7, #12
    4400:	0d64      	lsrs	r4, r4, #21
    4402:	429d      	cmp	r5, r3
    4404:	d020      	beq.n	4448 <__ledf2+0x70>
    4406:	4b24      	ldr	r3, [pc, #144]	; (4498 <__ledf2+0xc0>)
    4408:	429c      	cmp	r4, r3
    440a:	d022      	beq.n	4452 <__ledf2+0x7a>
    440c:	2d00      	cmp	r5, #0
    440e:	d112      	bne.n	4436 <__ledf2+0x5e>
    4410:	4330      	orrs	r0, r6
    4412:	4243      	negs	r3, r0
    4414:	4143      	adcs	r3, r0
    4416:	b2db      	uxtb	r3, r3
    4418:	2c00      	cmp	r4, #0
    441a:	d01f      	beq.n	445c <__ledf2+0x84>
    441c:	2b00      	cmp	r3, #0
    441e:	d00c      	beq.n	443a <__ledf2+0x62>
    4420:	464b      	mov	r3, r9
    4422:	2001      	movs	r0, #1
    4424:	3b01      	subs	r3, #1
    4426:	4303      	orrs	r3, r0
    4428:	0018      	movs	r0, r3
    442a:	bc3c      	pop	{r2, r3, r4, r5}
    442c:	4690      	mov	r8, r2
    442e:	4699      	mov	r9, r3
    4430:	46a2      	mov	sl, r4
    4432:	46ab      	mov	fp, r5
    4434:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4436:	2c00      	cmp	r4, #0
    4438:	d016      	beq.n	4468 <__ledf2+0x90>
    443a:	45cb      	cmp	fp, r9
    443c:	d017      	beq.n	446e <__ledf2+0x96>
    443e:	465b      	mov	r3, fp
    4440:	4259      	negs	r1, r3
    4442:	2301      	movs	r3, #1
    4444:	430b      	orrs	r3, r1
    4446:	e7ef      	b.n	4428 <__ledf2+0x50>
    4448:	0031      	movs	r1, r6
    444a:	2302      	movs	r3, #2
    444c:	4301      	orrs	r1, r0
    444e:	d1eb      	bne.n	4428 <__ledf2+0x50>
    4450:	e7d9      	b.n	4406 <__ledf2+0x2e>
    4452:	0039      	movs	r1, r7
    4454:	2302      	movs	r3, #2
    4456:	4311      	orrs	r1, r2
    4458:	d1e6      	bne.n	4428 <__ledf2+0x50>
    445a:	e7d7      	b.n	440c <__ledf2+0x34>
    445c:	433a      	orrs	r2, r7
    445e:	d1dd      	bne.n	441c <__ledf2+0x44>
    4460:	2300      	movs	r3, #0
    4462:	2800      	cmp	r0, #0
    4464:	d0e0      	beq.n	4428 <__ledf2+0x50>
    4466:	e7ea      	b.n	443e <__ledf2+0x66>
    4468:	433a      	orrs	r2, r7
    446a:	d1e6      	bne.n	443a <__ledf2+0x62>
    446c:	e7e7      	b.n	443e <__ledf2+0x66>
    446e:	42a5      	cmp	r5, r4
    4470:	dce5      	bgt.n	443e <__ledf2+0x66>
    4472:	db05      	blt.n	4480 <__ledf2+0xa8>
    4474:	42be      	cmp	r6, r7
    4476:	d8e2      	bhi.n	443e <__ledf2+0x66>
    4478:	d007      	beq.n	448a <__ledf2+0xb2>
    447a:	2300      	movs	r3, #0
    447c:	42be      	cmp	r6, r7
    447e:	d2d3      	bcs.n	4428 <__ledf2+0x50>
    4480:	4659      	mov	r1, fp
    4482:	2301      	movs	r3, #1
    4484:	3901      	subs	r1, #1
    4486:	430b      	orrs	r3, r1
    4488:	e7ce      	b.n	4428 <__ledf2+0x50>
    448a:	45c4      	cmp	ip, r8
    448c:	d8d7      	bhi.n	443e <__ledf2+0x66>
    448e:	2300      	movs	r3, #0
    4490:	45c4      	cmp	ip, r8
    4492:	d3f5      	bcc.n	4480 <__ledf2+0xa8>
    4494:	e7c8      	b.n	4428 <__ledf2+0x50>
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	000007ff 	.word	0x000007ff

0000449c <__aeabi_i2d>:
    449c:	b570      	push	{r4, r5, r6, lr}
    449e:	2800      	cmp	r0, #0
    44a0:	d030      	beq.n	4504 <__aeabi_i2d+0x68>
    44a2:	17c3      	asrs	r3, r0, #31
    44a4:	18c4      	adds	r4, r0, r3
    44a6:	405c      	eors	r4, r3
    44a8:	0fc5      	lsrs	r5, r0, #31
    44aa:	0020      	movs	r0, r4
    44ac:	f000 f838 	bl	4520 <__clzsi2>
    44b0:	4b17      	ldr	r3, [pc, #92]	; (4510 <__aeabi_i2d+0x74>)
    44b2:	4a18      	ldr	r2, [pc, #96]	; (4514 <__aeabi_i2d+0x78>)
    44b4:	1a1b      	subs	r3, r3, r0
    44b6:	1ad2      	subs	r2, r2, r3
    44b8:	2a1f      	cmp	r2, #31
    44ba:	dd18      	ble.n	44ee <__aeabi_i2d+0x52>
    44bc:	4a16      	ldr	r2, [pc, #88]	; (4518 <__aeabi_i2d+0x7c>)
    44be:	1ad2      	subs	r2, r2, r3
    44c0:	4094      	lsls	r4, r2
    44c2:	2200      	movs	r2, #0
    44c4:	0324      	lsls	r4, r4, #12
    44c6:	055b      	lsls	r3, r3, #21
    44c8:	0b24      	lsrs	r4, r4, #12
    44ca:	0d5b      	lsrs	r3, r3, #21
    44cc:	2100      	movs	r1, #0
    44ce:	0010      	movs	r0, r2
    44d0:	0324      	lsls	r4, r4, #12
    44d2:	0d0a      	lsrs	r2, r1, #20
    44d4:	0b24      	lsrs	r4, r4, #12
    44d6:	0512      	lsls	r2, r2, #20
    44d8:	4322      	orrs	r2, r4
    44da:	4c10      	ldr	r4, [pc, #64]	; (451c <__aeabi_i2d+0x80>)
    44dc:	051b      	lsls	r3, r3, #20
    44de:	4022      	ands	r2, r4
    44e0:	4313      	orrs	r3, r2
    44e2:	005b      	lsls	r3, r3, #1
    44e4:	07ed      	lsls	r5, r5, #31
    44e6:	085b      	lsrs	r3, r3, #1
    44e8:	432b      	orrs	r3, r5
    44ea:	0019      	movs	r1, r3
    44ec:	bd70      	pop	{r4, r5, r6, pc}
    44ee:	0021      	movs	r1, r4
    44f0:	4091      	lsls	r1, r2
    44f2:	000a      	movs	r2, r1
    44f4:	210b      	movs	r1, #11
    44f6:	1a08      	subs	r0, r1, r0
    44f8:	40c4      	lsrs	r4, r0
    44fa:	055b      	lsls	r3, r3, #21
    44fc:	0324      	lsls	r4, r4, #12
    44fe:	0b24      	lsrs	r4, r4, #12
    4500:	0d5b      	lsrs	r3, r3, #21
    4502:	e7e3      	b.n	44cc <__aeabi_i2d+0x30>
    4504:	2500      	movs	r5, #0
    4506:	2300      	movs	r3, #0
    4508:	2400      	movs	r4, #0
    450a:	2200      	movs	r2, #0
    450c:	e7de      	b.n	44cc <__aeabi_i2d+0x30>
    450e:	46c0      	nop			; (mov r8, r8)
    4510:	0000041e 	.word	0x0000041e
    4514:	00000433 	.word	0x00000433
    4518:	00000413 	.word	0x00000413
    451c:	800fffff 	.word	0x800fffff

00004520 <__clzsi2>:
    4520:	211c      	movs	r1, #28
    4522:	2301      	movs	r3, #1
    4524:	041b      	lsls	r3, r3, #16
    4526:	4298      	cmp	r0, r3
    4528:	d301      	bcc.n	452e <__clzsi2+0xe>
    452a:	0c00      	lsrs	r0, r0, #16
    452c:	3910      	subs	r1, #16
    452e:	0a1b      	lsrs	r3, r3, #8
    4530:	4298      	cmp	r0, r3
    4532:	d301      	bcc.n	4538 <__clzsi2+0x18>
    4534:	0a00      	lsrs	r0, r0, #8
    4536:	3908      	subs	r1, #8
    4538:	091b      	lsrs	r3, r3, #4
    453a:	4298      	cmp	r0, r3
    453c:	d301      	bcc.n	4542 <__clzsi2+0x22>
    453e:	0900      	lsrs	r0, r0, #4
    4540:	3904      	subs	r1, #4
    4542:	a202      	add	r2, pc, #8	; (adr r2, 454c <__clzsi2+0x2c>)
    4544:	5c10      	ldrb	r0, [r2, r0]
    4546:	1840      	adds	r0, r0, r1
    4548:	4770      	bx	lr
    454a:	46c0      	nop			; (mov r8, r8)
    454c:	02020304 	.word	0x02020304
    4550:	01010101 	.word	0x01010101
	...

0000455c <ffs>:
    455c:	2300      	movs	r3, #0
    455e:	b510      	push	{r4, lr}
    4560:	4298      	cmp	r0, r3
    4562:	d007      	beq.n	4574 <ffs+0x18>
    4564:	001a      	movs	r2, r3
    4566:	2101      	movs	r1, #1
    4568:	0004      	movs	r4, r0
    456a:	4114      	asrs	r4, r2
    456c:	1c53      	adds	r3, r2, #1
    456e:	001a      	movs	r2, r3
    4570:	420c      	tst	r4, r1
    4572:	d0f9      	beq.n	4568 <ffs+0xc>
    4574:	0018      	movs	r0, r3
    4576:	bd10      	pop	{r4, pc}

00004578 <__libc_init_array>:
    4578:	b570      	push	{r4, r5, r6, lr}
    457a:	2600      	movs	r6, #0
    457c:	4d0c      	ldr	r5, [pc, #48]	; (45b0 <__libc_init_array+0x38>)
    457e:	4c0d      	ldr	r4, [pc, #52]	; (45b4 <__libc_init_array+0x3c>)
    4580:	1b64      	subs	r4, r4, r5
    4582:	10a4      	asrs	r4, r4, #2
    4584:	42a6      	cmp	r6, r4
    4586:	d109      	bne.n	459c <__libc_init_array+0x24>
    4588:	2600      	movs	r6, #0
    458a:	f000 f8d5 	bl	4738 <_init>
    458e:	4d0a      	ldr	r5, [pc, #40]	; (45b8 <__libc_init_array+0x40>)
    4590:	4c0a      	ldr	r4, [pc, #40]	; (45bc <__libc_init_array+0x44>)
    4592:	1b64      	subs	r4, r4, r5
    4594:	10a4      	asrs	r4, r4, #2
    4596:	42a6      	cmp	r6, r4
    4598:	d105      	bne.n	45a6 <__libc_init_array+0x2e>
    459a:	bd70      	pop	{r4, r5, r6, pc}
    459c:	00b3      	lsls	r3, r6, #2
    459e:	58eb      	ldr	r3, [r5, r3]
    45a0:	4798      	blx	r3
    45a2:	3601      	adds	r6, #1
    45a4:	e7ee      	b.n	4584 <__libc_init_array+0xc>
    45a6:	00b3      	lsls	r3, r6, #2
    45a8:	58eb      	ldr	r3, [r5, r3]
    45aa:	4798      	blx	r3
    45ac:	3601      	adds	r6, #1
    45ae:	e7f2      	b.n	4596 <__libc_init_array+0x1e>
    45b0:	00004744 	.word	0x00004744
    45b4:	00004744 	.word	0x00004744
    45b8:	00004744 	.word	0x00004744
    45bc:	00004748 	.word	0x00004748

000045c0 <memcpy>:
    45c0:	2300      	movs	r3, #0
    45c2:	b510      	push	{r4, lr}
    45c4:	429a      	cmp	r2, r3
    45c6:	d100      	bne.n	45ca <memcpy+0xa>
    45c8:	bd10      	pop	{r4, pc}
    45ca:	5ccc      	ldrb	r4, [r1, r3]
    45cc:	54c4      	strb	r4, [r0, r3]
    45ce:	3301      	adds	r3, #1
    45d0:	e7f8      	b.n	45c4 <memcpy+0x4>

000045d2 <memset>:
    45d2:	0003      	movs	r3, r0
    45d4:	1882      	adds	r2, r0, r2
    45d6:	4293      	cmp	r3, r2
    45d8:	d100      	bne.n	45dc <memset+0xa>
    45da:	4770      	bx	lr
    45dc:	7019      	strb	r1, [r3, #0]
    45de:	3301      	adds	r3, #1
    45e0:	e7f9      	b.n	45d6 <memset+0x4>
    45e2:	0000      	movs	r0, r0
    45e4:	682f2e2e 	.word	0x682f2e2e
    45e8:	702f6c70 	.word	0x702f6c70
    45ec:	2f74726f 	.word	0x2f74726f
    45f0:	5f6c7068 	.word	0x5f6c7068
    45f4:	6f697067 	.word	0x6f697067
    45f8:	7361625f 	.word	0x7361625f
    45fc:	00682e65 	.word	0x00682e65
    4600:	682f2e2e 	.word	0x682f2e2e
    4604:	732f6c61 	.word	0x732f6c61
    4608:	682f6372 	.word	0x682f6372
    460c:	695f6c61 	.word	0x695f6c61
    4610:	00632e6f 	.word	0x00632e6f
    4614:	682f2e2e 	.word	0x682f2e2e
    4618:	732f6c61 	.word	0x732f6c61
    461c:	682f6372 	.word	0x682f6372
    4620:	735f6c61 	.word	0x735f6c61
    4624:	6d5f6970 	.word	0x6d5f6970
    4628:	7973615f 	.word	0x7973615f
    462c:	632e636e 	.word	0x632e636e
    4630:	00000000 	.word	0x00000000
    4634:	682f2e2e 	.word	0x682f2e2e
    4638:	732f6c61 	.word	0x732f6c61
    463c:	682f6372 	.word	0x682f6372
    4640:	735f6c61 	.word	0x735f6c61
    4644:	735f6970 	.word	0x735f6970
    4648:	7973615f 	.word	0x7973615f
    464c:	632e636e 	.word	0x632e636e
    4650:	00000000 	.word	0x00000000
    4654:	682f2e2e 	.word	0x682f2e2e
    4658:	732f6c61 	.word	0x732f6c61
    465c:	682f6372 	.word	0x682f6372
    4660:	745f6c61 	.word	0x745f6c61
    4664:	72656d69 	.word	0x72656d69
    4668:	0000632e 	.word	0x0000632e
    466c:	682f2e2e 	.word	0x682f2e2e
    4670:	752f6c61 	.word	0x752f6c61
    4674:	736c6974 	.word	0x736c6974
    4678:	6372732f 	.word	0x6372732f
    467c:	6974752f 	.word	0x6974752f
    4680:	6c5f736c 	.word	0x6c5f736c
    4684:	2e747369 	.word	0x2e747369
    4688:	00000063 	.word	0x00000063
    468c:	682f2e2e 	.word	0x682f2e2e
    4690:	752f6c61 	.word	0x752f6c61
    4694:	736c6974 	.word	0x736c6974
    4698:	6372732f 	.word	0x6372732f
    469c:	6974752f 	.word	0x6974752f
    46a0:	725f736c 	.word	0x725f736c
    46a4:	62676e69 	.word	0x62676e69
    46a8:	65666675 	.word	0x65666675
    46ac:	00632e72 	.word	0x00632e72

000046b0 <_map>:
    46b0:	00000006 00000036 00000007 00000037     ....6.......7...
    46c0:	0000000f 0000001b 682f2e2e 652f6c70     ........../hpl/e
    46d0:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    46e0:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    46f0:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    4700:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    4710:	0000632e                                .c..

00004714 <sercomspi_regs>:
    4714:	0001000c 00000000 00000000 01ff002f     ............/...
    4724:	02000800 00020000 00000000 00000000     ................
    4734:	00000200                                ....

00004738 <_init>:
    4738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    473a:	46c0      	nop			; (mov r8, r8)
    473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    473e:	bc08      	pop	{r3}
    4740:	469e      	mov	lr, r3
    4742:	4770      	bx	lr

00004744 <__init_array_start>:
    4744:	000000e5 	.word	0x000000e5

00004748 <_fini>:
    4748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    474a:	46c0      	nop			; (mov r8, r8)
    474c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    474e:	bc08      	pop	{r3}
    4750:	469e      	mov	lr, r3
    4752:	4770      	bx	lr

00004754 <__fini_array_start>:
    4754:	000000bd 	.word	0x000000bd
